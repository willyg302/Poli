{"version":3,"file":"\\packages\\application-configuration.js","sources":["application-configuration/config.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,0C;;AAEA,e;;;AAGA,2C;AACA,+E;AACA,gB;AACA,G;;AAEA,gF;AACA,G;;;AAGA,oF;AACA,8E;AACA,mC;;AAEA,6B;AACA,U;AACA,0E;;AAEA,e;AACA,a;AACA,oC;;AAEA,4B;AACA,c;AACA,gD;AACA,uB;AACA,O;AACA,kD;AACA,uB;AACA,O;AACA,uD;AACA,8B;AACA,G;AACA,G;;;AAGA,oB;;AAEA,K;AACA,+B;AACA,yD;AACA,U;AACA,iB;AACA,S;AACA,wC;AACA,2D;AACA,O;AACA,iB;AACA,0D;AACA,K;AACA,uB;AACA,yB;AACA,iB;AACA,2B;AACA,oC;AACA,U;AACA,kB;AACA,mC;AACA,S;AACA,O;AACA,M;AACA,G;AACA,a;AACA,sE;AACA,E;;AAEA,sC;AACA,mD;AACA,2B;AACA,G;AACA,mB;AACA,mC;AACA,Y;AACA,wB;AACA,yD;AACA,E;;AAEA,gE;AACA,mF;AACA,0E;AACA,sF;AACA,mB;AACA,0B;AACA,G;AACA,6C;AACA,4F;AACA,oC;AACA,oD;AACA,4B;AACA,K;AACA,I;AACA,gB;AACA,8B;;AAEA,6E;AACA,U;AACA,6B;AACA,6E;AACA,6C;AACA,4B;AACA,2C;AACA,kC;AACA,mC;AACA,O;AACA,sB;AACA,K;;AAEA,U;AACA,uB;AACA,sB;AACA,uB;AACA,K;AACA,I;AACA,E;;;AAGA,gE;AACA,c;AACA,6E;AACA,6C;AACA,4B;AACA,mD;AACA,uD;AACA,uB;AACA,wB;AACA,O;AACA,G;;AAEA,E","sourcesContent":["var Future = Npm.require(\"fibers/future\");\r\n\r\nAppConfig = {};\r\n\r\n\r\nAppConfig.findGalaxy = _.once(function () {\r\n  if (!('GALAXY' in process.env || 'ULTRAWORLD_DDP_ENDPOINT' in process.env)) {\r\n    return null;\r\n  }\r\n\r\n  return DDP.connect(process.env.ULTRAWORLD_DDP_ENDPOINT || process.env.GALAXY);\r\n});\r\n\r\n\r\n// TODO: Eventually, keep track of the replica set, and generally be conected to the\r\n// leader.  Waiting on actually having that concept implemented in ultraworld.\r\nvar ultra = AppConfig.findGalaxy();\r\n\r\nvar subFuture = new Future();\r\nif (ultra)\r\n  ultra.subscribe(\"oneApp\", process.env.GALAXY_APP, subFuture.resolver());\r\n\r\nvar OneAppApps;\r\nvar Services;\r\nvar collectionFuture = new Future();\r\n\r\nMeteor.startup(function () {\r\n  if (ultra) {\r\n    OneAppApps = new Meteor.Collection(\"apps\", {\r\n      connection: ultra\r\n    });\r\n    Services = new Meteor.Collection('services', {\r\n      connection: ultra\r\n    });\r\n    // allow us to block on the collections being ready\r\n    collectionFuture.return();\r\n  }\r\n});\r\n\r\n\r\nvar staticAppConfig;\r\n\r\ntry {\r\n  if (process.env.APP_CONFIG) {\r\n    staticAppConfig = JSON.parse(process.env.APP_CONFIG);\r\n  } else {\r\n    var settings;\r\n    try {\r\n      if (process.env.METEOR_SETTINGS) {\r\n        settings = JSON.parse(process.env.METEOR_SETTINGS);\r\n      }\r\n    } catch (e) {\r\n      Log.warn(\"Could not parse METEOR_SETTINGS as JSON\");\r\n    }\r\n    staticAppConfig = {\r\n      settings: settings,\r\n      packages: {\r\n        'mongo-livedata': {\r\n          url: process.env.MONGO_URL\r\n        },\r\n        'email': {\r\n          url: process.env.MAIL_URL\r\n        }\r\n      }\r\n    };\r\n  }\r\n} catch (e) {\r\n  Log.warn(\"Could not parse initial APP_CONFIG environment variable\");\r\n};\r\n\r\nAppConfig.getAppConfig = function () {\r\n  if (!subFuture.isResolved() && staticAppConfig) {\r\n    return staticAppConfig;\r\n  }\r\n  subFuture.wait();\r\n  var myApp = OneAppApps.findOne();\r\n  if (myApp)\r\n    return myApp.config;\r\n  throw new Error(\"there is no app config for this app\");\r\n};\r\n\r\nAppConfig.configurePackage = function (packageName, configure) {\r\n  var appConfig = AppConfig.getAppConfig(); // Will either be based in the env var,\r\n                                         // or wait for galaxy to connect.\r\n  var lastConfig = appConfig && appConfig.packages && appConfig.packages[packageName];\r\n  if (lastConfig) {\r\n    configure(lastConfig);\r\n  }\r\n  var configureIfDifferent = function (app) {\r\n    if (!EJSON.equals(app.config && app.config.packages && app.config.packages[packageName],\r\n                      lastConfig)) {\r\n      lastConfig = app.config.packages[packageName];\r\n      configure(lastConfig);\r\n    }\r\n  };\r\n  var subHandle;\r\n  var observed = new Future();\r\n\r\n  // This is not required to finish, so defer it so it doesn't block anything\r\n  // else.\r\n  Meteor.defer( function () {\r\n    // there's a Meteor.startup() that produces the various collections, make\r\n    // sure it runs first before we continue.\r\n    collectionFuture.wait();\r\n    subHandle = OneAppApps.find().observe({\r\n      added: configureIfDifferent,\r\n      changed: configureIfDifferent\r\n    });\r\n    observed.return();\r\n  });\r\n\r\n  return {\r\n    stop: function () {\r\n      observed.wait();\r\n      subHandle.stop();\r\n    }\r\n  };\r\n};\r\n\r\n\r\nAppConfig.configureService = function (serviceName, configure) {\r\n  if (ultra) {\r\n    // there's a Meteor.startup() that produces the various collections, make\r\n    // sure it runs first before we continue.\r\n    collectionFuture.wait();\r\n    ultra.subscribe('servicesByName', serviceName);\r\n    return Services.find({name: serviceName}).observe({\r\n      added: configure,\r\n      changed: configure\r\n    });\r\n  }\r\n\r\n};\r\n"]}