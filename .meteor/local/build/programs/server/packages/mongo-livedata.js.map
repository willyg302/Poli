{"version":3,"file":"\\packages\\mongo-livedata.js","sources":["mongo-livedata/mongo_driver.js","mongo-livedata/local_collection_driver.js","mongo-livedata/remote_collection_driver.js","mongo-livedata/collection.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,G;AACA,+D;AACA,qE;AACA,qB;AACA,E;AACA,uE;AACA,8C;AACA,G;;AAEA,+B;AACA,qC;AACA,kC;AACA,wD;;AAEA,oB;;AAEA,6C;AACA,kC;AACA,2B;AACA,8D;AACA,K;AACA,iB;AACA,yC;AACA,qD;AACA,O;AACA,e;AACA,G;AACA,e;AACA,E;;AAEA,gE;AACA,kE;;AAEA,sD;AACA,2C;AACA,sC;AACA,kC;AACA,G;AACA,6C;AACA,kE;AACA,G;AACA,0D;AACA,yE;AACA,G;AACA,mB;AACA,E;;AAEA,sD;AACA,iC;AACA,qE;AACA,+E;AACA,+B;AACA,oD;AACA,G;AACA,uD;AACA,wD;AACA,6C;AACA,qE;AACA,G;AACA,uE;AACA,4E;AACA,mB;AACA,E;;AAEA,yD;AACA,wD;AACA,oB;;AAEA,uD;AACA,yC;AACA,gC;;AAEA,qB;AACA,wC;AACA,yD;AACA,8B;AACA,kC;AACA,2B;AACA,gC;AACA,6B;AACA,K;AACA,K;AACA,a;AACA,E;;;AAGA,kC;AACA,kB;AACA,8B;AACA,6B;;AAEA,mC;;AAEA,qE;AACA,uE;AACA,sD;AACA,gD;AACA,4C;AACA,G;;AAEA,sE;AACA,sB;AACA,iE;AACA,oE;AACA,iB;AACA,wE;AACA,2C;AACA,kE;AACA,+C;AACA,qC;AACA,G;;AAEA,mD;AACA,Y;AACA,gB;AACA,iB;;AAEA,uB;AACA,yC;AACA,mD;AACA,c;AACA,S;AACA,a;AACA,K;AACA,E;;AAEA,8C;AACA,kB;AACA,+D;AACA,8D;AACA,2B;AACA,2D;AACA,E;;AAEA,yD;AACA,kB;AACA,gB;AACA,sB;AACA,U;AACA,0C;AACA,G;AACA,E;;AAEA,kD;AACA,sE;AACA,kB;;AAEA,0B;AACA,8B;AACA,qD;AACA,K;AACA,uB;AACA,E;;AAEA,6E;AACA,yE;AACA,kB;AACA,4B;AACA,8B;AACA,uE;AACA,2C;AACA,K;AACA,gB;AACA,E;;AAEA,gE;AACA,oE;AACA,kE;AACA,kE;AACA,gE;AACA,0D;AACA,kB;AACA,iD;AACA,Y;AACA,8B;AACA,M;AACA,uC;AACA,E;;AAEA,kC;;AAEA,6E;AACA,8E;AACA,+E;AACA,4E;AACA,wB;AACA,E;AACA,oE;AACA,sE;AACA,mE;AACA,yE;AACA,4D;AACA,E;AACA,8D;AACA,mE;AACA,6D;;AAEA,yD;AACA,iC;AACA,gB;AACA,uD;AACA,gB;AACA,K;AACA,sB;AACA,iB;AACA,4B;AACA,iB;AACA,gB;AACA,I;AACA,E;;AAEA,mD;AACA,0D;AACA,sD;AACA,K;AACA,E;;AAEA,wE;AACA,yD;AACA,kB;AACA,gE;AACA,sC;AACA,sB;AACA,iB;AACA,yB;AACA,Q;AACA,c;AACA,G;;AAEA,sC;AACA,6B;AACA,sE;AACA,I;AACA,8E;AACA,O;AACA,0D;AACA,yE;AACA,8C;AACA,e;AACA,sB;AACA,Y;AACA,G;AACA,E;;AAEA,2E;AACA,S;AACA,0E;AACA,kB;AACA,gD;AACA,2E;AACA,+E;AACA,8E;AACA,W;AACA,oE;AACA,oB;AACA,uC;AACA,qD;AACA,O;AACA,U;AACA,+B;AACA,G;AACA,E;;AAEA,wE;AACA,yD;AACA,kB;;AAEA,gE;AACA,sC;AACA,sB;AACA,iB;AACA,yB;AACA,Q;AACA,c;AACA,G;;AAEA,sC;AACA,6B;AACA,6C;AACA,I;AACA,8E;;AAEA,O;AACA,0D;AACA,yE;AACA,8C;AACA,e;AACA,sB;AACA,Y;AACA,G;AACA,E;;AAEA,6E;AACA,kE;AACA,kB;;AAEA,kD;AACA,uB;AACA,mB;AACA,G;;AAEA,gE;AACA,sC;AACA,sB;AACA,iB;AACA,yB;AACA,Q;AACA,c;AACA,G;;AAEA,kE;AACA,gE;AACA,+D;AACA,uE;AACA,gB;AACA,sC;AACA,qE;;AAEA,6B;;AAEA,sC;AACA,6B;AACA,6C;AACA,I;AACA,qD;AACA,O;AACA,0D;AACA,iC;AACA,0D;AACA,gD;AACA,8C;;AAEA,2E;AACA,iE;;AAEA,+C;AACA,sD;;AAEA,8D;AACA,4E;AACA,gF;AACA,kD;AACA,mC;AACA,4C;AACA,0B;AACA,uE;AACA,6E;AACA,mC;AACA,gC;AACA,gF;AACA,+E;AACA,4E;AACA,gD;AACA,iD;AACA,c;AACA,kC;AACA,S;AACA,Q;AACA,Y;AACA,wB;AACA,2C;AACA,+D;AACA,sB;AACA,kD;AACA,kD;AACA,8D;AACA,6D;AACA,wC;AACA,8C;AACA,0C;AACA,4C;AACA,a;AACA,W;AACA,gC;AACA,Y;AACA,K;AACA,e;AACA,sB;AACA,Y;AACA,G;AACA,E;;AAEA,wC;AACA,oB;AACA,+B;AACA,kB;AACA,e;AACA,E;;AAEA,6B;;AAEA,sB;AACA,yD;AACA,+D;AACA,+B;AACA,oE;AACA,E;;AAEA,uE;AACA,2E;AACA,4E;AACA,0E;AACA,0E;AACA,iE;AACA,wE;AACA,qE;AACA,2E;AACA,6E;AACA,uE;AACA,yE;AACA,qE;AACA,wE;AACA,gB;;AAEA,a;AACA,iE;AACA,8C;AACA,iB;AACA,mE;AACA,gE;AACA,gE;AACA,mD;AACA,uE;AACA,oD;AACA,yB;AACA,U;AACA,iB;AACA,G;;AAEA,oD;AACA,4B;AACA,e;AACA,wB;AACA,I;AACA,4B;AACA,e;AACA,gB;AACA,I;;AAEA,mC;;AAEA,8B;AACA,Y;AACA,kB;AACA,qF;AACA,Y;AACA,0D;AACA,wE;AACA,kC;AACA,0C;AACA,0C;AACA,4C;AACA,oD;AACA,+B;AACA,8B;AACA,kD;AACA,4B;AACA,K;AACA,I;;AAEA,yC;AACA,qC;AACA,kE;AACA,c;AACA,sE;AACA,sE;AACA,kC;AACA,oD;AACA,uE;AACA,wE;AACA,4E;AACA,uC;AACA,kC;AACA,0C;AACA,2B;AACA,gC;AACA,0C;AACA,mD;AACA,kD;AACA,6B;AACA,yB;AACA,0B;AACA,I;;AAEA,a;AACA,E;;AAEA,0D;AACA,kE;AACA,oB;AACA,wE;AACA,I;AACA,G;;AAEA,+E;AACA,6E;AACA,Q;AACA,2E;AACA,iE;AACA,kB;AACA,oD;AACA,uB;AACA,iB;AACA,G;;AAEA,mD;AACA,4C;AACA,oC;AACA,0C;AACA,mC;AACA,E;;AAEA,+E;AACA,kB;;AAEA,6B;AACA,kB;;AAEA,oB;AACA,oE;AACA,E;;AAEA,wE;AACA,wD;AACA,kB;AACA,6B;AACA,kB;;AAEA,0B;AACA,oB;AACA,kE;AACA,E;;AAEA,6E;AACA,oC;AACA,yE;AACA,6D;AACA,kB;AACA,4C;;AAEA,+E;AACA,+C;AACA,uD;AACA,0B;AACA,4E;AACA,gB;AACA,E;AACA,yE;AACA,kB;;AAEA,8E;AACA,mC;AACA,uD;AACA,0B;AACA,iE;AACA,gB;AACA,E;;AAEA,U;;AAEA,qD;AACA,E;AACA,yE;AACA,6E;AACA,6E;AACA,4E;AACA,mD;AACA,E;AACA,yD;AACA,6D;AACA,E;AACA,yE;AACA,+E;AACA,8E;AACA,gC;AACA,E;AACA,+E;AACA,iC;AACA,E;AACA,6E;AACA,yE;AACA,uE;AACA,c;;;AAGA,sE;AACA,kB;AACA,uC;AACA,+D;AACA,+B;AACA,E;;AAEA,kD;AACA,kB;;AAEA,sB;AACA,8C;AACA,iC;AACA,E;;AAEA,0E;AACA,0C;AACA,oB;;AAEA,8C;AACA,iD;AACA,yE;;AAEA,mC;AACA,qE;AACA,kC;AACA,+E;AACA,+C;AACA,iC;AACA,4B;AACA,W;AACA,K;;AAEA,iD;AACA,0C;AACA,I;AACA,G;;AAEA,6C;AACA,kB;AACA,mD;AACA,E;;AAEA,gF;AACA,+E;AACA,a;;AAEA,kD;AACA,kB;AACA,0D;AACA,iE;AACA,E;;AAEA,yE;AACA,wE;AACA,+C;AACA,mD;AACA,kB;AACA,gD;AACA,C;;AAEA,iD;AACA,kB;AACA,qE;AACA,E;;AAEA,wD;AACA,kB;AACA,6D;AACA,qC;AACA,iD;AACA,E;;AAEA,8D;AACA,iC;AACA,kB;AACA,sE;;AAEA,yE;AACA,gD;AACA,sB;AACA,6B;AACA,+B;AACA,4B;AACA,I;;AAEA,2E;AACA,+B;AACA,mC;AACA,iC;AACA,8E;AACA,+D;AACA,kC;AACA,gF;AACA,+B;AACA,sC;AACA,G;;AAEA,iC;AACA,yE;AACA,wC;;AAEA,qE;AACA,E;;AAEA,yE;AACA,kB;AACA,sE;;AAEA,4B;AACA,8C;AACA,0E;AACA,uE;AACA,4D;AACA,oE;AACA,4C;AACA,yC;AACA,M;AACA,U;AACA,2B;AACA,G;;AAEA,2E;AACA,wE;AACA,kE;AACA,4C;AACA,2C;AACA,sE;AACA,wB;AACA,E;;AAEA,uC;AACA,4B;AACA,oB;AACA,kB;AACA,qD;AACA,8D;AACA,0D;;AAEA,sD;AACA,2E;AACA,gF;AACA,+E;AACA,yD;AACA,0D;AACA,8C;AACA,uC;AACA,O;;AAEA,0B;AACA,mC;;AAEA,iB;AACA,K;AACA,I;;AAEA,yC;AACA,oB;;AAEA,0E;AACA,8E;AACA,2D;AACA,kB;AACA,kB;AACA,mC;AACA,uB;AACA,mE;AACA,K;AACA,I;;AAEA,kE;AACA,qC;AACA,oB;AACA,iB;AACA,wC;AACA,2E;AACA,O;AACA,e;AACA,I;;AAEA,uB;AACA,oB;;AAEA,8B;AACA,4B;;AAEA,0B;AACA,I;;AAEA,wC;AACA,sB;AACA,oB;;AAEA,2B;AACA,I;;AAEA,sB;AACA,oB;AACA,gC;AACA,I;;AAEA,sB;AACA,oB;AACA,2C;AACA,I;;AAEA,0C;AACA,qC;AACA,oB;AACA,kB;AACA,0B;AACA,Y;AACA,uB;AACA,mC;AACA,+B;AACA,S;AACA,qB;AACA,K;AACA,G;AACA,G;;AAEA,4B;AACA,0D;AACA,kB;AACA,wC;AACA,gC;AACA,4C;AACA,oC;AACA,oC;AACA,gC;AACA,4C;AACA,gD;AACA,E;AACA,4C;AACA,kB;AACA,kD;AACA,8B;AACA,E;;AAEA,sD;AACA,4C;AACA,kB;;AAEA,2C;AACA,+E;AACA,G;;AAEA,kC;AACA,qD;;AAEA,qB;AACA,oB;AACA,2B;;AAEA,4E;AACA,6E;AACA,2E;AACA,uC;AACA,mD;AACA,yD;AACA,Y;AACA,4E;AACA,oB;AACA,0C;AACA,0B;AACA,a;AACA,gB;AACA,qB;AACA,mD;AACA,U;AACA,yC;AACA,yD;AACA,0B;AACA,K;AACA,iE;AACA,K;;AAEA,qB;AACA,8E;AACA,sD;AACA,yD;AACA,U;AACA,2E;AACA,gF;AACA,+E;AACA,4B;AACA,sE;AACA,G;;AAEA,uB;AACA,E;;AAEA,uE;AACA,oE;AACA,kB;;AAEA,8C;AACA,kC;AACA,0B;AACA,uC;;AAEA,gF;AACA,4B;AACA,iC;;AAEA,kE;AACA,kC;AACA,oC;;AAEA,+E;AACA,gF;AACA,6E;AACA,+E;AACA,0E;AACA,+E;AACA,iD;AACA,wC;AACA,8E;AACA,8E;AACA,yB;AACA,mD;AACA,sE;;AAEA,gF;AACA,Y;AACA,2C;AACA,yD;;AAEA,mD;;AAEA,0E;AACA,gF;AACA,4E;AACA,4C;AACA,0D;AACA,kD;AACA,gF;AACA,gF;AACA,qE;AACA,uD;AACA,kB;AACA,uD;AACA,4E;AACA,+E;AACA,wD;AACA,oD;AACA,wC;AACA,mB;AACA,S;AACA,+D;AACA,I;AACA,2D;AACA,0D;AACA,gC;AACA,oB;AACA,uC;AACA,+C;AACA,O;AACA,U;AACA,yB;AACA,G;;AAEA,yC;AACA,4B;;AAEA,iC;AACA,sD;AACA,sB;AACA,gC;AACA,sC;AACA,sC;AACA,G;AACA,6C;AACA,wC;AACA,uD;AACA,sC;AACA,oE;AACA,wE;AACA,2E;AACA,2E;AACA,+E;AACA,yB;AACA,gE;AACA,oD;AACA,6C;AACA,gE;AACA,S;AACA,M;AACA,K;;AAEA,yE;AACA,sE;AACA,c;AACA,I;AACA,6E;AACA,+E;AACA,U;AACA,6B;AACA,sD;AACA,U;AACA,4C;AACA,4D;AACA,0C;AACA,2C;AACA,O;AACA,G;AACA,E;;AAEA,oC;AACA,6C;AACA,oB;AACA,0C;AACA,uD;AACA,mC;AACA,qE;;AAEA,2D;;AAEA,2E;AACA,4B;AACA,wC;AACA,yC;AACA,wB;AACA,O;AACA,I;;AAEA,8C;AACA,kD;AACA,oB;AACA,8C;AACA,a;AACA,wC;AACA,2C;AACA,wB;AACA,O;AACA,I;;AAEA,iD;AACA,I;AACA,+E;AACA,oE;AACA,2E;AACA,a;AACA,I;AACA,yE;AACA,+B;AACA,oB;AACA,sE;AACA,4D;AACA,wC;AACA,yE;AACA,2C;;AAEA,8E;AACA,uB;AACA,gD;AACA,0D;AACA,yD;AACA,I;AACA,8B;AACA,oB;AACA,uE;AACA,gD;AACA,0D;AACA,yD;AACA,0D;AACA,4D;AACA,yC;AACA,wB;AACA,O;AACA,I;;AAEA,2B;AACA,oB;AACA,wC;;AAEA,+D;;AAEA,oE;AACA,6C;AACA,6B;;AAEA,0D;AACA,kC;AACA,uC;AACA,Y;AACA,2E;AACA,iC;AACA,K;AACA,0E;AACA,mC;;AAEA,uC;AACA,2C;AACA,wC;AACA,0E;AACA,K;;AAEA,wC;AACA,+B;;AAEA,gF;AACA,wE;AACA,kC;AACA,0D;AACA,I;;AAEA,oE;AACA,8E;AACA,gE;AACA,0D;AACA,oB;;AAEA,2E;AACA,oE;AACA,yE;AACA,yC;AACA,sB;AACA,2E;;AAEA,sE;AACA,qD;AACA,mD;;AAEA,yC;AACA,gC;AACA,8E;;AAEA,+D;AACA,uD;AACA,6D;AACA,qD;;AAEA,2B;AACA,iD;AACA,iD;AACA,wC;AACA,4B;AACA,8B;AACA,4D;AACA,8E;AACA,kB;AACA,2C;AACA,W;AACA,W;AACA,O;AACA,O;AACA,I;;AAEA,8E;AACA,wE;AACA,I;AACA,8E;AACA,4D;AACA,2C;AACA,oB;;AAEA,8D;AACA,8E;AACA,yD;;AAEA,0C;AACA,6D;AACA,6E;AACA,sE;AACA,gC;AACA,qD;AACA,yD;AACA,4E;AACA,e;AACA,kC;AACA,K;AACA,G;AACA,G;;AAEA,6D;AACA,E;AACA,wC;AACA,8E;AACA,gF;AACA,U;AACA,8E;AACA,2E;AACA,kE;AACA,2E;AACA,yE;AACA,gF;AACA,4E;AACA,iD;AACA,yE;AACA,6E;AACA,wD;AACA,yC;AACA,gF;AACA,4E;AACA,8E;AACA,+E;AACA,gF;AACA,uE;AACA,2E;AACA,0E;AACA,8E;AACA,4B;AACA,8D;AACA,4C;AACA,kB;;AAEA,4E;AACA,sC;AACA,4C;AACA,uC;AACA,6E;AACA,mD;AACA,yE;AACA,G;AACA,gE;;AAEA,sB;AACA,yB;AACA,4B;AACA,kB;AACA,kB;AACA,e;AACA,W;AACA,uC;AACA,qB;AACA,+E;AACA,8E;AACA,4D;AACA,mB;AACA,O;AACA,kB;AACA,e;AACA,gB;AACA,yB;AACA,uB;AACA,6E;AACA,4E;AACA,+E;AACA,4E;AACA,kB;AACA,wB;AACA,sB;AACA,sB;AACA,+C;AACA,gB;AACA,mC;AACA,S;AACA,c;AACA,8D;AACA,qB;AACA,yC;AACA,S;AACA,oC;AACA,qE;AACA,2C;AACA,sB;AACA,sC;AACA,O;AACA,K;AACA,K;;AAEA,U;AACA,uB;AACA,qB;AACA,qB;AACA,K;AACA,I;AACA,E;;AAEA,sE;AACA,6D;AACA,sE;AACA,kD;;AAEA,4C;;;;;;;;;;;;;;;;;;;AC5uCA,qC;AACA,kB;AACA,8B;AACA,E;;AAEA,qD;AACA,6B;AACA,kD;AACA,2B;AACA,E;;AAEA,2C;AACA,+B;AACA,oB;AACA,c;AACA,iC;AACA,iB;AACA,4D;AACA,K;AACA,2C;AACA,4C;AACA,6E;AACA,6C;AACA,oE;AACA,G;AACA,G;;AAEA,Y;AACA,kD;;;;;;;;;;;;;;;;;;;AC5BA,8D;AACA,kB;AACA,8C;AACA,E;;AAEA,2D;AACA,yB;AACA,oB;AACA,iB;AACA,W;AACA,yD;AACA,0E;AACA,oB;AACA,yD;AACA,S;AACA,e;AACA,G;AACA,G;;;AAGA,oE;AACA,qE;AACA,gE;AACA,mE;AACA,e;AACA,kE;AACA,gF;AACA,4B;AACA,0B;AACA,K;AACA,8E;AACA,iB;AACA,4D;;AAEA,6D;AACA,G;;;;;;;;;;;;;;;;;;;ACnCA,sE;AACA,iE;;AAEA,8C;AACA,kB;AACA,4C;AACA,kE;AACA,mC;AACA,yE;AACA,sF;AACA,e;AACA,4B;AACA,oC;AACA,G;AACA,uE;AACA,0D;AACA,yC;AACA,G;AACA,sB;AACA,0B;AACA,2B;AACA,oB;AACA,uB;AACA,8B;AACA,c;;AAEA,iC;AACA,e;AACA,mC;AACA,8C;AACA,M;AACA,U;AACA,gB;AACA,U;AACA,mC;AACA,yB;AACA,M;AACA,U;AACA,G;;AAEA,wB;AACA,+D;AACA,M;AACA,2B;;AAEA,iC;AACA,6E;AACA,6E;AACA,oE;AACA,G;;AAEA,4C;AACA,yD;AACA,4B;AACA,8B;AACA,0C;AACA,2B;AACA,yC;AACA,M;AACA,qC;;AAEA,yB;AACA,qD;AACA,gD;AACA,uD;AACA,uE;AACA,Y;AACA,8C;AACA,K;AACA,G;;AAEA,kE;AACA,oB;;AAEA,2D;AACA,6D;AACA,qE;AACA,oC;AACA,mD;AACA,+E;AACA,mC;AACA,Q;AACA,+E;AACA,wE;AACA,0E;AACA,0E;AACA,+E;AACA,6E;AACA,yC;AACA,gD;AACA,2E;AACA,0E;AACA,gF;AACA,gF;AACA,gB;AACA,mC;AACA,4C;;AAEA,kB;AACA,sC;AACA,Q;;AAEA,yB;AACA,4E;AACA,8B;AACA,uD;AACA,oD;;AAEA,+E;AACA,2E;AACA,sC;AACA,oC;AACA,oC;AACA,yB;AACA,oB;AACA,+C;AACA,4B;AACA,6C;AACA,kB;AACA,kD;AACA,sD;AACA,W;AACA,iB;AACA,yC;AACA,oB;AACA,0F;AACA,W;AACA,wE;AACA,2C;AACA,mB;AACA,uF;AACA,2C;AACA,2C;AACA,mB;AACA,qE;AACA,uC;AACA,8B;AACA,sD;AACA,wC;AACA,qC;AACA,uC;AACA,yC;AACA,sB;AACA,mC;AACA,qC;AACA,2C;AACA,e;AACA,e;AACA,uD;AACA,W;AACA,gB;AACA,wE;AACA,S;;AAEA,Q;;AAEA,iD;AACA,8B;AACA,2C;AACA,Q;;AAEA,+E;AACA,+B;AACA,kC;AACA,yC;AACA,Q;AACA,sC;AACA,oD;AACA,O;AACA,O;;AAEA,Y;AACA,4E;AACA,G;;AAEA,gC;;AAEA,gB;AACA,6E;AACA,oC;AACA,gD;AACA,yB;AACA,wB;AACA,G;AACA,E;;AAEA,G;AACA,uB;AACA,G;;;AAGA,uC;;AAEA,qC;AACA,yB;AACA,gB;AACA,Q;AACA,qB;AACA,I;;AAEA,oC;AACA,oB;AACA,0B;AACA,4C;AACA,Y;AACA,uB;AACA,kC;AACA,kB;AACA,K;AACA,I;;AAEA,4C;AACA,8D;AACA,8D;AACA,6C;AACA,oB;AACA,wC;AACA,iE;AACA,iE;AACA,I;;AAEA,+C;AACA,oB;AACA,wC;AACA,oE;AACA,oE;AACA,G;;AAEA,G;;AAEA,uE;AACA,6C;AACA,kC;AACA,wC;AACA,M;AACA,oC;AACA,0C;AACA,M;AACA,4B;AACA,kC;AACA,K;AACA,K;;AAEA,6E;AACA,kE;;AAEA,wD;AACA,kD;AACA,E;;AAEA,0E;AACA,+E;AACA,wE;AACA,sB;AACA,0D;AACA,mC;AACA,8C;AACA,+B;;AAEA,0D;AACA,2B;AACA,8B;;AAEA,e;AACA,0C;AACA,sE;AACA,kC;AACA,qD;AACA,yD;AACA,4D;AACA,iE;AACA,yC;AACA,uC;AACA,2C;AACA,K;AACA,sD;AACA,gD;AACA,4C;AACA,qD;AACA,S;AACA,K;AACA,U;AACA,uB;AACA,K;AACA,K;AACA,a;AACA,E;;AAEA,qE;AACA,W;AACA,sD;AACA,uC;;AAEA,yC;AACA,wB;AACA,sE;AACA,oE;AACA,wB;AACA,wB;AACA,uB;AACA,wB;AACA,mB;AACA,qC;;AAEA,kB;AACA,E;;AAEA,8D;AACA,gE;AACA,2B;AACA,mE;AACA,6B;AACA,G;AACA,E;;AAEA,gE;AACA,0E;AACA,0E;AACA,gE;AACA,8E;AACA,iC;AACA,E;AACA,qE;AACA,6D;AACA,qE;AACA,oE;AACA,gF;AACA,gF;AACA,8E;AACA,gE;AACA,E;AACA,0D;AACA,6D;AACA,uB;AACA,E;AACA,gE;AACA,qE;AACA,iB;AACA,E;AACA,mE;AACA,oE;AACA,8D;AACA,kE;AACA,O;AACA,wD;AACA,kE;AACA,oB;AACA,oC;AACA,iB;AACA,iB;AACA,Y;;AAEA,iE;AACA,4B;;AAEA,4B;AACA,uB;AACA,uD;AACA,qD;AACA,sC;AACA,6B;AACA,+B;AACA,uD;AACA,iE;AACA,sG;AACA,c;AACA,mD;AACA,O;AACA,Y;AACA,4D;;AAEA,8B;AACA,2E;AACA,+E;AACA,2E;AACA,wB;AACA,uD;AACA,yE;AACA,6E;AACA,mC;AACA,wD;AACA,+E;AACA,uE;AACA,kB;AACA,mD;AACA,W;AACA,S;AACA,O;AACA,K;;AAEA,uE;AACA,8D;AACA,mE;AACA,4B;AACA,wB;AACA,U;AACA,sB;AACA,M;;AAEA,wB;AACA,mB;AACA,kD;AACA,kF;AACA,Q;AACA,K;;AAEA,iE;AACA,mE;AACA,mB;;AAEA,mD;AACA,oE;;AAEA,yE;AACA,sE;AACA,qE;AACA,kE;AACA,uE;AACA,gB;AACA,+E;AACA,+E;AACA,gC;AACA,0C;AACA,kB;AACA,0E;AACA,U;AACA,O;;AAEA,sD;AACA,8E;AACA,6E;AACA,4E;AACA,8C;AACA,O;;AAEA,kD;AACA,0E;AACA,Q;;AAEA,Y;AACA,gE;AACA,qC;AACA,iC;AACA,W;AACA,6E;AACA,6E;AACA,gE;AACA,4E;AACA,8D;AACA,mB;AACA,uB;AACA,sB;AACA,sB;AACA,S;AACA,gB;AACA,O;AACA,K;;AAEA,oE;AACA,+E;AACA,uD;AACA,e;AACA,I;AACA,G;;AAEA,kE;AACA,mE;AACA,kB;AACA,oD;AACA,uB;AACA,iB;AACA,G;AACA,wC;AACA,2E;AACA,wB;AACA,E;;AAEA,6E;AACA,oC;AACA,sE;AACA,kB;AACA,qC;AACA,wE;AACA,gD;AACA,E;AACA,2D;AACA,kB;AACA,mC;AACA,sE;AACA,qC;AACA,E;AACA,2E;AACA,kB;AACA,gD;AACA,mF;AACA,qD;AACA,E;;AAEA,uD;;AAEA,G;AACA,sC;AACA,G;;AAEA,uE;AACA,gB;AACA,E;AACA,yC;AACA,mD;AACA,E;AACA,4D;AACA,wD;AACA,qE;AACA,E;AACA,0C;AACA,uD;AACA,E;AACA,wB;AACA,uE;AACA,0D;AACA,E;AACA,kE;AACA,wB;AACA,qE;AACA,oE;AACA,uB;AACA,2E;AACA,6E;AACA,sC;AACA,E;AACA,8E;AACA,6E;AACA,mC;;AAEA,c;AACA,qD;AACA,oB;AACA,0E;AACA,4C;AACA,uC;AACA,+D;AACA,O;;AAEA,oB;AACA,4B;;AAEA,4D;AACA,0B;AACA,mD;AACA,yF;AACA,S;AACA,4B;AACA,oD;AACA,8B;AACA,6E;AACA,gE;AACA,O;AACA,O;;AAEA,sE;AACA,0E;AACA,6B;AACA,4D;AACA,+D;AACA,8E;AACA,O;AACA,uC;AACA,K;AACA,I;;AAEA,yD;AACA,8C;AACA,I;AACA,wD;AACA,6C;AACA,I;AACA,K;;;AAGA,iE;AACA,kB;;AAEA,qE;AACA,iE;AACA,2B;;AAEA,8E;AACA,4E;AACA,+E;AACA,uB;AACA,6B;;AAEA,sB;AACA,kC;AACA,kC;AACA,kC;AACA,oE;AACA,c;AACA,yB;AACA,I;;AAEA,kB;AACA,mC;;AAEA,gE;AACA,gC;AACA,wC;;AAEA,qB;AACA,yB;AACA,e;;AAEA,8D;AACA,uD;AACA,6E;AACA,sC;AACA,a;AACA,kC;;AAEA,2E;AACA,iC;AACA,kD;AACA,sD;AACA,W;;AAEA,wE;;AAEA,kF;AACA,iC;AACA,kC;AACA,yD;;AAEA,iC;AACA,6D;AACA,8D;AACA,qC;AACA,8E;AACA,6D;AACA,a;;AAEA,qC;AACA,kF;AACA,4E;AACA,yE;AACA,0C;AACA,6E;AACA,mE;AACA,wE;AACA,kB;AACA,+E;AACA,4B;AACA,yD;AACA,W;AACA,qB;AACA,uE;AACA,sD;AACA,kB;AACA,oB;AACA,W;AACA,S;AACA,Q;AACA,O;AACA,iE;AACA,sD;AACA,oE;AACA,8D;AACA,kC;AACA,G;AACA,E;;;AAGA,8D;AACA,kB;;AAEA,yC;AACA,iB;AACA,uE;AACA,Y;AACA,6C;AACA,oE;AACA,oC;AACA,K;AACA,G;AACA,E;;AAEA,uD;AACA,kB;AACA,mC;AACA,8B;AACA,wB;AACA,E;;AAEA,+C;AACA,gB;AACA,0B;AACA,gD;AACA,a;AACA,E;;AAEA,sE;AACA,kB;;AAEA,0B;AACA,wC;AACA,+D;AACA,4D;AACA,O;AACA,iD;AACA,G;AACA,wE;AACA,gE;AACA,6D;AACA,O;AACA,iD;AACA,G;;AAEA,sD;AACA,E;;AAEA,8C;AACA,0B;AACA,oC;AACA,a;AACA,E;;AAEA,uE;AACA,mE;AACA,kE;AACA,2C;AACA,wD;AACA,yC;AACA,kB;;AAEA,0B;;AAEA,8D;AACA,iE;;AAEA,2E;AACA,W;AACA,qB;AACA,+D;AACA,kE;;AAEA,4B;AACA,kB;AACA,yC;AACA,+B;AACA,6B;AACA,wJ;AACA,uD;AACA,6B;AACA,2F;AACA,Y;AACA,+C;AACA,6D;AACA,yB;AACA,sC;AACA,yD;;AAEA,mD;AACA,uC;AACA,6B;AACA,S;AACA,K;AACA,K;;AAEA,sC;AACA,yC;AACA,4B;AACA,wD;AACA,wC;AACA,O;AACA,G;;AAEA,4D;AACA,+B;AACA,W;;AAEA,mB;;AAEA,0B;AACA,wC;AACA,+D;AACA,sB;AACA,kD;AACA,4B;AACA,kC;AACA,4B;AACA,8B;AACA,O;AACA,iD;AACA,G;AACA,wE;AACA,gE;AACA,sB;AACA,kD;AACA,6B;AACA,mC;AACA,6B;AACA,+B;AACA,O;AACA,iD;AACA,G;;AAEA,4E;AACA,6E;AACA,+E;AACA,4B;;AAEA,+B;AACA,kD;AACA,E;;AAEA,iE;AACA,8D;AACA,oE;AACA,8D;AACA,uE;AACA,6D;AACA,iC;AACA,qE;AACA,6B;AACA,E;;AAEA,sE;AACA,8B;AACA,2E;AACA,kB;;AAEA,sC;AACA,yC;AACA,4B;AACA,wD;AACA,wC;AACA,O;AACA,G;;AAEA,4D;AACA,W;AACA,W;;AAEA,0B;AACA,wC;AACA,+D;AACA,2D;AACA,O;AACA,iD;AACA,G;AACA,wE;AACA,gE;AACA,4D;AACA,O;AACA,iD;AACA,G;;AAEA,4E;AACA,gF;AACA,8E;AACA,sC;;AAEA,2D;AACA,E","sourcesContent":["/**\r\n * Provide a synchronous Collection API using fibers, backed by\r\n * MongoDB.  This is only for use on the server, and mostly identical\r\n * to the client API.\r\n *\r\n * NOTE: the public API methods must be run within a fiber. If you call\r\n * these outside of a fiber they will explode!\r\n */\r\n\r\nvar path = Npm.require('path');\r\nvar MongoDB = Npm.require('mongodb');\r\nvar Fiber = Npm.require('fibers');\r\nvar Future = Npm.require(path.join('fibers', 'future'));\r\n\r\nMongoInternals = {};\r\n\r\nvar replaceNames = function (filter, thing) {\r\n  if (typeof thing === \"object\") {\r\n    if (_.isArray(thing)) {\r\n      return _.map(thing, _.bind(replaceNames, null, filter));\r\n    }\r\n    var ret = {};\r\n    _.each(thing, function (value, key) {\r\n      ret[filter(key)] = replaceNames(filter, value);\r\n    });\r\n    return ret;\r\n  }\r\n  return thing;\r\n};\r\n\r\nvar makeMongoLegal = function (name) { return \"EJSON\" + name; };\r\nvar unmakeMongoLegal = function (name) { return name.substr(5); };\r\n\r\nvar replaceMongoAtomWithMeteor = function (document) {\r\n  if (document instanceof MongoDB.Binary) {\r\n    var buffer = document.value(true);\r\n    return new Uint8Array(buffer);\r\n  }\r\n  if (document instanceof MongoDB.ObjectID) {\r\n    return new Meteor.Collection.ObjectID(document.toHexString());\r\n  }\r\n  if (document[\"EJSON$type\"] && document[\"EJSON$value\"]) {\r\n    return EJSON.fromJSONValue(replaceNames(unmakeMongoLegal, document));\r\n  }\r\n  return undefined;\r\n};\r\n\r\nvar replaceMeteorAtomWithMongo = function (document) {\r\n  if (EJSON.isBinary(document)) {\r\n    // This does more copies than we'd like, but is necessary because\r\n    // MongoDB.BSON only looks like it takes a Uint8Array (and doesn't actually\r\n    // serialize it correctly).\r\n    return new MongoDB.Binary(new Buffer(document));\r\n  }\r\n  if (document instanceof Meteor.Collection.ObjectID) {\r\n    return new MongoDB.ObjectID(document.toHexString());\r\n  } else if (EJSON._isCustomType(document)) {\r\n    return replaceNames(makeMongoLegal, EJSON.toJSONValue(document));\r\n  }\r\n  // It is not ordinarily possible to stick dollar-sign keys into mongo\r\n  // so we don't bother checking for things that need escaping at this time.\r\n  return undefined;\r\n};\r\n\r\nvar replaceTypes = function (document, atomTransformer) {\r\n  if (typeof document !== 'object' || document === null)\r\n    return document;\r\n\r\n  var replacedTopLevelAtom = atomTransformer(document);\r\n  if (replacedTopLevelAtom !== undefined)\r\n    return replacedTopLevelAtom;\r\n\r\n  var ret = document;\r\n  _.each(document, function (val, key) {\r\n    var valReplaced = replaceTypes(val, atomTransformer);\r\n    if (val !== valReplaced) {\r\n      // Lazy clone. Shallow copy.\r\n      if (ret === document)\r\n        ret = _.clone(document);\r\n      ret[key] = valReplaced;\r\n    }\r\n  });\r\n  return ret;\r\n};\r\n\r\n\r\nMongoConnection = function (url) {\r\n  var self = this;\r\n  self._connectCallbacks = [];\r\n  self._liveResultsSets = {};\r\n\r\n  var options = {db: {safe: true}};\r\n\r\n  // Set autoReconnect to true, unless passed on the URL. Why someone\r\n  // would want to set autoReconnect to false, I'm not really sure, but\r\n  // keeping this for backwards compatibility for now.\r\n  if (!(/[\\?&]auto_?[rR]econnect=/.test(url))) {\r\n    options.server = {auto_reconnect: true};\r\n  }\r\n\r\n  // Disable the native parser by default, unless specifically enabled\r\n  // in the mongo URL.\r\n  // - The native driver can cause errors which normally would be\r\n  //   thrown, caught, and handled into segfaults that take down the\r\n  //   whole app.\r\n  // - Binary modules don't yet work when you bundle and move the bundle\r\n  //   to a different platform (aka deploy)\r\n  // We should revisit this after binary npm module support lands.\r\n  if (!(/[\\?&]native_?[pP]arser=/.test(url))) {\r\n    options.db.native_parser = false;\r\n  }\r\n\r\n  MongoDB.connect(url, options, function(err, db) {\r\n    if (err)\r\n      throw err;\r\n    self.db = db;\r\n\r\n    Fiber(function () {\r\n      // drain queue of pending callbacks\r\n      _.each(self._connectCallbacks, function (c) {\r\n        c(db);\r\n      });\r\n    }).run();\r\n  });\r\n};\r\n\r\nMongoConnection.prototype.close = function() {\r\n  var self = this;\r\n  // Use Future.wrap so that errors get thrown. This happens to\r\n  // work even outside a fiber since the 'close' method is not\r\n  // actually asynchronous.\r\n  Future.wrap(_.bind(self.db.close, self.db))(true).wait();\r\n};\r\n\r\nMongoConnection.prototype._withDb = function (callback) {\r\n  var self = this;\r\n  if (self.db) {\r\n    callback(self.db);\r\n  } else {\r\n    self._connectCallbacks.push(callback);\r\n  }\r\n};\r\n\r\n// Returns the Mongo Collection object; may yield.\r\nMongoConnection.prototype._getCollection = function (collectionName) {\r\n  var self = this;\r\n\r\n  var future = new Future;\r\n  self._withDb(function (db) {\r\n    db.collection(collectionName, future.resolver());\r\n  });\r\n  return future.wait();\r\n};\r\n\r\nMongoConnection.prototype._createCappedCollection = function (collectionName,\r\n                                                              byteSize) {\r\n  var self = this;\r\n  var future = new Future();\r\n  self._withDb(function (db) {\r\n    db.createCollection(collectionName, {capped: true, size: byteSize},\r\n                        future.resolver());\r\n  });\r\n  future.wait();\r\n};\r\n\r\n// This should be called synchronously with a write, to create a\r\n// transaction on the current write fence, if any. After we can read\r\n// the write, and after observers have been notified (or at least,\r\n// after the observer notifiers have added themselves to the write\r\n// fence), you should call 'committed()' on the object returned.\r\nMongoConnection.prototype._maybeBeginWrite = function () {\r\n  var self = this;\r\n  var fence = DDPServer._CurrentWriteFence.get();\r\n  if (fence)\r\n    return fence.beginWrite();\r\n  else\r\n    return {committed: function () {}};\r\n};\r\n\r\n//////////// Public API //////////\r\n\r\n// The write methods block until the database has confirmed the write (it may\r\n// not be replicated or stable on disk, but one server has confirmed it) if no\r\n// callback is provided. If a callback is provided, then they call the callback\r\n// when the write is confirmed. They return nothing on success, and raise an\r\n// exception on failure.\r\n//\r\n// After making a write (with insert, update, remove), observers are\r\n// notified asynchronously. If you want to receive a callback once all\r\n// of the observer notifications have landed for your write, do the\r\n// writes inside a write fence (set DDPServer._CurrentWriteFence to a new\r\n// _WriteFence, and then set a callback on the write fence.)\r\n//\r\n// Since our execution environment is single-threaded, this is\r\n// well-defined -- a write \"has been made\" if it's returned, and an\r\n// observer \"has been notified\" if its callback has returned.\r\n\r\nvar writeCallback = function (write, refresh, callback) {\r\n  return function (err, result) {\r\n    if (! err) {\r\n      // XXX We don't have to run this on error, right?\r\n      refresh();\r\n    }\r\n    write.committed();\r\n    if (callback)\r\n      callback(err, result);\r\n    else if (err)\r\n      throw err;\r\n  };\r\n};\r\n\r\nvar bindEnvironmentForWrite = function (callback) {\r\n  return Meteor.bindEnvironment(callback, function (err) {\r\n    Meteor._debug(\"Error in Mongo write:\", err.stack);\r\n  });\r\n};\r\n\r\nMongoConnection.prototype._insert = function (collection_name, document,\r\n                                              callback) {\r\n  var self = this;\r\n  if (collection_name === \"___meteor_failure_test_collection\") {\r\n    var e = new Error(\"Failure test\");\r\n    e.expected = true;\r\n    if (callback)\r\n      return callback(e);\r\n    else\r\n      throw e;\r\n  }\r\n\r\n  var write = self._maybeBeginWrite();\r\n  var refresh = function () {\r\n    Meteor.refresh({ collection: collection_name, id: document._id });\r\n  };\r\n  callback = bindEnvironmentForWrite(writeCallback(write, refresh, callback));\r\n  try {\r\n    var collection = self._getCollection(collection_name);\r\n    collection.insert(replaceTypes(document, replaceMeteorAtomWithMongo),\r\n                      {safe: true}, callback);\r\n  } catch (e) {\r\n    write.committed();\r\n    throw e;\r\n  }\r\n};\r\n\r\n// Cause queries that may be affected by the selector to poll in this write\r\n// fence.\r\nMongoConnection.prototype._refresh = function (collectionName, selector) {\r\n  var self = this;\r\n  var refreshKey = {collection: collectionName};\r\n  // If we know which documents we're removing, don't poll queries that are\r\n  // specific to other documents. (Note that multiple notifications here should\r\n  // not cause multiple polls, since all our listener is doing is enqueueing a\r\n  // poll.)\r\n  var specificIds = LocalCollection._idsMatchedBySelector(selector);\r\n  if (specificIds) {\r\n    _.each(specificIds, function (id) {\r\n      Meteor.refresh(_.extend({id: id}, refreshKey));\r\n    });\r\n  } else {\r\n    Meteor.refresh(refreshKey);\r\n  }\r\n};\r\n\r\nMongoConnection.prototype._remove = function (collection_name, selector,\r\n                                              callback) {\r\n  var self = this;\r\n\r\n  if (collection_name === \"___meteor_failure_test_collection\") {\r\n    var e = new Error(\"Failure test\");\r\n    e.expected = true;\r\n    if (callback)\r\n      return callback(e);\r\n    else\r\n      throw e;\r\n  }\r\n\r\n  var write = self._maybeBeginWrite();\r\n  var refresh = function () {\r\n    self._refresh(collection_name, selector);\r\n  };\r\n  callback = bindEnvironmentForWrite(writeCallback(write, refresh, callback));\r\n\r\n  try {\r\n    var collection = self._getCollection(collection_name);\r\n    collection.remove(replaceTypes(selector, replaceMeteorAtomWithMongo),\r\n                      {safe: true}, callback);\r\n  } catch (e) {\r\n    write.committed();\r\n    throw e;\r\n  }\r\n};\r\n\r\nMongoConnection.prototype._update = function (collection_name, selector, mod,\r\n                                              options, callback) {\r\n  var self = this;\r\n\r\n  if (! callback && options instanceof Function) {\r\n    callback = options;\r\n    options = null;\r\n  }\r\n\r\n  if (collection_name === \"___meteor_failure_test_collection\") {\r\n    var e = new Error(\"Failure test\");\r\n    e.expected = true;\r\n    if (callback)\r\n      return callback(e);\r\n    else\r\n      throw e;\r\n  }\r\n\r\n  // explicit safety check. null and undefined can crash the mongo\r\n  // driver. Although the node driver and minimongo do 'support'\r\n  // non-object modifier in that they don't crash, they are not\r\n  // meaningful operations and do not do anything. Defensively throw an\r\n  // error here.\r\n  if (!mod || typeof mod !== 'object')\r\n    throw new Error(\"Invalid modifier. Modifier must be an object.\");\r\n\r\n  if (!options) options = {};\r\n\r\n  var write = self._maybeBeginWrite();\r\n  var refresh = function () {\r\n    self._refresh(collection_name, selector);\r\n  };\r\n  callback = writeCallback(write, refresh, callback);\r\n  try {\r\n    var collection = self._getCollection(collection_name);\r\n    var mongoOpts = {safe: true};\r\n    // explictly enumerate options that minimongo supports\r\n    if (options.upsert) mongoOpts.upsert = true;\r\n    if (options.multi) mongoOpts.multi = true;\r\n\r\n    var mongoSelector = replaceTypes(selector, replaceMeteorAtomWithMongo);\r\n    var mongoMod = replaceTypes(mod, replaceMeteorAtomWithMongo);\r\n\r\n    var isModify = isModificationMod(mongoMod);\r\n    var knownId = (isModify ? selector._id : mod._id);\r\n\r\n    if (options.upsert && (! knownId) && options.insertedId) {\r\n      // XXX In future we could do a real upsert for the mongo id generation\r\n      // case, if the the node mongo driver gives us back the id of the upserted\r\n      // doc (which our current version does not).\r\n      simulateUpsertWithInsertedId(\r\n        collection, mongoSelector, mongoMod,\r\n        isModify, options,\r\n        // This callback does not need to be bindEnvironment'ed because\r\n        // simulateUpsertWithInsertedId() wraps it and then passes it through\r\n        // bindEnvironmentForWrite.\r\n        function (err, result) {\r\n          // If we got here via a upsert() call, then options._returnObject will\r\n          // be set and we should return the whole object. Otherwise, we should\r\n          // just return the number of affected docs to match the mongo API.\r\n          if (result && ! options._returnObject)\r\n            callback(err, result.numberAffected);\r\n          else\r\n            callback(err, result);\r\n        }\r\n      );\r\n    } else {\r\n      collection.update(\r\n        mongoSelector, mongoMod, mongoOpts,\r\n        bindEnvironmentForWrite(function (err, result, extra) {\r\n          if (! err) {\r\n            if (result && options._returnObject) {\r\n              result = { numberAffected: result };\r\n              // If this was an upsert() call, and we ended up\r\n              // inserting a new doc and we know its id, then\r\n              // return that id as well.\r\n              if (options.upsert && knownId &&\r\n                  ! extra.updatedExisting)\r\n                result.insertedId = knownId;\r\n            }\r\n          }\r\n          callback(err, result);\r\n        }));\r\n    }\r\n  } catch (e) {\r\n    write.committed();\r\n    throw e;\r\n  }\r\n};\r\n\r\nvar isModificationMod = function (mod) {\r\n  for (var k in mod)\r\n    if (k.substr(0, 1) === '$')\r\n      return true;\r\n  return false;\r\n};\r\n\r\nvar NUM_OPTIMISTIC_TRIES = 3;\r\n\r\n// exposed for testing\r\nMongoConnection._isCannotChangeIdError = function (err) {\r\n  // either of these checks should work, but just to be safe...\r\n  return (err.code === 13596 ||\r\n          err.err.indexOf(\"cannot change _id of a document\") === 0);\r\n};\r\n\r\nvar simulateUpsertWithInsertedId = function (collection, selector, mod,\r\n                                             isModify, options, callback) {\r\n  // STRATEGY:  First try doing a plain update.  If it affected 0 documents,\r\n  // then without affecting the database, we know we should probably do an\r\n  // insert.  We then do a *conditional* insert that will fail in the case\r\n  // of a race condition.  This conditional insert is actually an\r\n  // upsert-replace with an _id, which will never successfully update an\r\n  // existing document.  If this upsert fails with an error saying it\r\n  // couldn't change an existing _id, then we know an intervening write has\r\n  // caused the query to match something.  We go back to step one and repeat.\r\n  // Like all \"optimistic write\" schemes, we rely on the fact that it's\r\n  // unlikely our writes will continue to be interfered with under normal\r\n  // circumstances (though sufficiently heavy contention with writers\r\n  // disagreeing on the existence of an object will cause writes to fail\r\n  // in theory).\r\n\r\n  var newDoc;\r\n  // Run this code up front so that it fails fast if someone uses\r\n  // a Mongo update operator we don't support.\r\n  if (isModify) {\r\n    // We've already run replaceTypes/replaceMeteorAtomWithMongo on\r\n    // selector and mod.  We assume it doesn't matter, as far as\r\n    // the behavior of modifiers is concerned, whether `_modify`\r\n    // is run on EJSON or on mongo-converted EJSON.\r\n    var selectorDoc = LocalCollection._removeDollarOperators(selector);\r\n    LocalCollection._modify(selectorDoc, mod, true);\r\n    newDoc = selectorDoc;\r\n  } else {\r\n    newDoc = mod;\r\n  }\r\n\r\n  var insertedId = options.insertedId; // must exist\r\n  var mongoOptsForUpdate = {\r\n    safe: true,\r\n    multi: options.multi\r\n  };\r\n  var mongoOptsForInsert = {\r\n    safe: true,\r\n    upsert: true\r\n  };\r\n\r\n  var tries = NUM_OPTIMISTIC_TRIES;\r\n\r\n  var doUpdate = function () {\r\n    tries--;\r\n    if (! tries) {\r\n      callback(new Error(\"Upsert failed after \" + NUM_OPTIMISTIC_TRIES + \" tries.\"));\r\n    } else {\r\n      collection.update(selector, mod, mongoOptsForUpdate,\r\n                        bindEnvironmentForWrite(function (err, result) {\r\n                          if (err)\r\n                            callback(err);\r\n                          else if (result)\r\n                            callback(null, {\r\n                              numberAffected: result\r\n                            });\r\n                          else\r\n                            doConditionalInsert();\r\n                        }));\r\n    }\r\n  };\r\n\r\n  var doConditionalInsert = function () {\r\n    var replacementWithId = _.extend(\r\n      replaceTypes({_id: insertedId}, replaceMeteorAtomWithMongo),\r\n      newDoc);\r\n    collection.update(selector, replacementWithId, mongoOptsForInsert,\r\n                      bindEnvironmentForWrite(function (err, result) {\r\n                        if (err) {\r\n                          // figure out if this is a\r\n                          // \"cannot change _id of document\" error, and\r\n                          // if so, try doUpdate() again, up to 3 times.\r\n                          if (MongoConnection._isCannotChangeIdError(err)) {\r\n                            doUpdate();\r\n                          } else {\r\n                            callback(err);\r\n                          }\r\n                        } else {\r\n                          callback(null, {\r\n                            numberAffected: result,\r\n                            insertedId: insertedId\r\n                          });\r\n                        }\r\n                      }));\r\n  };\r\n\r\n  doUpdate();\r\n};\r\n\r\n_.each([\"insert\", \"update\", \"remove\"], function (method) {\r\n  MongoConnection.prototype[method] = function (/* arguments */) {\r\n    var self = this;\r\n    return Meteor._wrapAsync(self[\"_\" + method]).apply(self, arguments);\r\n  };\r\n});\r\n\r\n// XXX MongoConnection.upsert() does not return the id of the inserted document\r\n// unless you set it explicitly in the selector or modifier (as a replacement\r\n// doc).\r\nMongoConnection.prototype.upsert = function (collectionName, selector, mod,\r\n                                             options, callback) {\r\n  var self = this;\r\n  if (typeof options === \"function\" && ! callback) {\r\n    callback = options;\r\n    options = {};\r\n  }\r\n\r\n  return self.update(collectionName, selector, mod,\r\n                     _.extend({}, options, {\r\n                       upsert: true,\r\n                       _returnObject: true\r\n                     }), callback);\r\n};\r\n\r\nMongoConnection.prototype.find = function (collectionName, selector, options) {\r\n  var self = this;\r\n\r\n  if (arguments.length === 1)\r\n    selector = {};\r\n\r\n  return new Cursor(\r\n    self, new CursorDescription(collectionName, selector, options));\r\n};\r\n\r\nMongoConnection.prototype.findOne = function (collection_name, selector,\r\n                                              options) {\r\n  var self = this;\r\n  if (arguments.length === 1)\r\n    selector = {};\r\n\r\n  options = options || {};\r\n  options.limit = 1;\r\n  return self.find(collection_name, selector, options).fetch()[0];\r\n};\r\n\r\n// We'll actually design an index API later. For now, we just pass through to\r\n// Mongo's, but make it synchronous.\r\nMongoConnection.prototype._ensureIndex = function (collectionName, index,\r\n                                                   options) {\r\n  var self = this;\r\n  options = _.extend({safe: true}, options);\r\n\r\n  // We expect this function to be called at startup, not from within a method,\r\n  // so we don't interact with the write fence.\r\n  var collection = self._getCollection(collectionName);\r\n  var future = new Future;\r\n  var indexName = collection.ensureIndex(index, options, future.resolver());\r\n  future.wait();\r\n};\r\nMongoConnection.prototype._dropIndex = function (collectionName, index) {\r\n  var self = this;\r\n\r\n  // This function is only used by test code, not within a method, so we don't\r\n  // interact with the write fence.\r\n  var collection = self._getCollection(collectionName);\r\n  var future = new Future;\r\n  var indexName = collection.dropIndex(index, future.resolver());\r\n  future.wait();\r\n};\r\n\r\n// CURSORS\r\n\r\n// There are several classes which relate to cursors:\r\n//\r\n// CursorDescription represents the arguments used to construct a cursor:\r\n// collectionName, selector, and (find) options.  Because it is used as a key\r\n// for cursor de-dup, everything in it should either be JSON-stringifiable or\r\n// not affect observeChanges output (eg, options.transform functions are not\r\n// stringifiable but do not affect observeChanges).\r\n//\r\n// SynchronousCursor is a wrapper around a MongoDB cursor\r\n// which includes fully-synchronous versions of forEach, etc.\r\n//\r\n// Cursor is the cursor object returned from find(), which implements the\r\n// documented Meteor.Collection cursor API.  It wraps a CursorDescription and a\r\n// SynchronousCursor (lazily: it doesn't contact Mongo until you call a method\r\n// like fetch or forEach on it).\r\n//\r\n// ObserveHandle is the \"observe handle\" returned from observeChanges. It has a\r\n// reference to a LiveResultsSet.\r\n//\r\n// LiveResultsSet caches the results of a query and reruns it when necessary.\r\n// It is hooked up to one or more ObserveHandles; a single LiveResultsSet\r\n// can drive multiple sets of observation callbacks if they are for the\r\n// same query.\r\n\r\n\r\nvar CursorDescription = function (collectionName, selector, options) {\r\n  var self = this;\r\n  self.collectionName = collectionName;\r\n  self.selector = Meteor.Collection._rewriteSelector(selector);\r\n  self.options = options || {};\r\n};\r\n\r\nvar Cursor = function (mongo, cursorDescription) {\r\n  var self = this;\r\n\r\n  self._mongo = mongo;\r\n  self._cursorDescription = cursorDescription;\r\n  self._synchronousCursor = null;\r\n};\r\n\r\n_.each(['forEach', 'map', 'rewind', 'fetch', 'count'], function (method) {\r\n  Cursor.prototype[method] = function () {\r\n    var self = this;\r\n\r\n    // You can only observe a tailable cursor.\r\n    if (self._cursorDescription.options.tailable)\r\n      throw new Error(\"Cannot call \" + method + \" on a tailable cursor\");\r\n\r\n    if (!self._synchronousCursor) {\r\n      self._synchronousCursor = self._mongo._createSynchronousCursor(\r\n        self._cursorDescription, {\r\n          // Make sure that the \"self\" argument to forEach/map callbacks is the\r\n          // Cursor, not the SynchronousCursor.\r\n          selfForIteration: self,\r\n          useTransform: true\r\n        });\r\n    }\r\n\r\n    return self._synchronousCursor[method].apply(\r\n      self._synchronousCursor, arguments);\r\n  };\r\n});\r\n\r\nCursor.prototype.getTransform = function () {\r\n  var self = this;\r\n  return self._cursorDescription.options.transform;\r\n};\r\n\r\n// When you call Meteor.publish() with a function that returns a Cursor, we need\r\n// to transmute it into the equivalent subscription.  This is the function that\r\n// does that.\r\n\r\nCursor.prototype._publishCursor = function (sub) {\r\n  var self = this;\r\n  var collection = self._cursorDescription.collectionName;\r\n  return Meteor.Collection._publishCursor(self, sub, collection);\r\n};\r\n\r\n// Used to guarantee that publish functions return at most one cursor per\r\n// collection. Private, because we might later have cursors that include\r\n// documents from multiple collections somehow.\r\nCursor.prototype._getCollectionName = function () {\r\n  var self = this;\r\n  return self._cursorDescription.collectionName;\r\n}\r\n\r\nCursor.prototype.observe = function (callbacks) {\r\n  var self = this;\r\n  return LocalCollection._observeFromObserveChanges(self, callbacks);\r\n};\r\n\r\nCursor.prototype.observeChanges = function (callbacks) {\r\n  var self = this;\r\n  var ordered = LocalCollection._isOrderedChanges(callbacks);\r\n  return self._mongo._observeChanges(\r\n    self._cursorDescription, ordered, callbacks);\r\n};\r\n\r\nMongoConnection.prototype._createSynchronousCursor = function(\r\n    cursorDescription, options) {\r\n  var self = this;\r\n  options = _.pick(options || {}, 'selfForIteration', 'useTransform');\r\n\r\n  var collection = self._getCollection(cursorDescription.collectionName);\r\n  var cursorOptions = cursorDescription.options;\r\n  var mongoOptions = {\r\n    sort: cursorOptions.sort,\r\n    limit: cursorOptions.limit,\r\n    skip: cursorOptions.skip\r\n  };\r\n\r\n  // Do we want a tailable cursor (which only works on capped collections)?\r\n  if (cursorOptions.tailable) {\r\n    // We want a tailable cursor...\r\n    mongoOptions.tailable = true;\r\n    // ... and for the server to wait a bit if any getMore has no data (rather\r\n    // than making us put the relevant sleeps in the client)...\r\n    mongoOptions.awaitdata = true;\r\n    // ... and to keep querying the server indefinitely rather than just 5 times\r\n    // if there's no more data.\r\n    mongoOptions.numberOfRetries = -1;\r\n  }\r\n\r\n  var dbCursor = collection.find(\r\n    replaceTypes(cursorDescription.selector, replaceMeteorAtomWithMongo),\r\n    cursorOptions.fields, mongoOptions);\r\n\r\n  return new SynchronousCursor(dbCursor, cursorDescription, options);\r\n};\r\n\r\nvar SynchronousCursor = function (dbCursor, cursorDescription, options) {\r\n  var self = this;\r\n  options = _.pick(options || {}, 'selfForIteration', 'useTransform');\r\n\r\n  self._dbCursor = dbCursor;\r\n  self._cursorDescription = cursorDescription;\r\n  // The \"self\" argument passed to forEach/map callbacks. If we're wrapped\r\n  // inside a user-visible Cursor, we want to provide the outer cursor!\r\n  self._selfForIteration = options.selfForIteration || self;\r\n  if (options.useTransform && cursorDescription.options.transform) {\r\n    self._transform = Deps._makeNonreactive(\r\n      cursorDescription.options.transform\r\n    );\r\n  } else {\r\n    self._transform = null;\r\n  }\r\n\r\n  // Need to specify that the callback is the first argument to nextObject,\r\n  // since otherwise when we try to call it with no args the driver will\r\n  // interpret \"undefined\" first arg as an options hash and crash.\r\n  self._synchronousNextObject = Future.wrap(\r\n    dbCursor.nextObject.bind(dbCursor), 0);\r\n  self._synchronousCount = Future.wrap(dbCursor.count.bind(dbCursor));\r\n  self._visitedIds = {};\r\n};\r\n\r\n_.extend(SynchronousCursor.prototype, {\r\n  _nextObject: function () {\r\n    var self = this;\r\n    while (true) {\r\n      var doc = self._synchronousNextObject().wait();\r\n      if (!doc || typeof doc._id === 'undefined') return null;\r\n      doc = replaceTypes(doc, replaceMongoAtomWithMeteor);\r\n\r\n      if (!self._cursorDescription.options.tailable) {\r\n        // Did Mongo give us duplicate documents in the same cursor? If so,\r\n        // ignore this one. (Do this before the transform, since transform might\r\n        // return some unrelated value.) We don't do this for tailable cursors,\r\n        // because we want to maintain O(1) memory usage.\r\n        var strId = LocalCollection._idStringify(doc._id);\r\n        if (self._visitedIds[strId]) continue;\r\n        self._visitedIds[strId] = true;\r\n      }\r\n\r\n      if (self._transform)\r\n        doc = self._transform(doc);\r\n\r\n      return doc;\r\n    }\r\n  },\r\n\r\n  forEach: function (callback, thisArg) {\r\n    var self = this;\r\n\r\n    // We implement the loop ourself instead of using self._dbCursor.each,\r\n    // because \"each\" will call its callback outside of a fiber which makes it\r\n    // much more complex to make this function synchronous.\r\n    var index = 0;\r\n    while (true) {\r\n      var doc = self._nextObject();\r\n      if (!doc) return;\r\n      callback.call(thisArg, doc, index++, self._selfForIteration);\r\n    }\r\n  },\r\n\r\n  // XXX Allow overlapping callback executions if callback yields.\r\n  map: function (callback, thisArg) {\r\n    var self = this;\r\n    var res = [];\r\n    self.forEach(function (doc, index) {\r\n      res.push(callback.call(thisArg, doc, index, self._selfForIteration));\r\n    });\r\n    return res;\r\n  },\r\n\r\n  rewind: function () {\r\n    var self = this;\r\n\r\n    // known to be synchronous\r\n    self._dbCursor.rewind();\r\n\r\n    self._visitedIds = {};\r\n  },\r\n\r\n  // Mostly usable for tailable cursors.\r\n  close: function () {\r\n    var self = this;\r\n\r\n    self._dbCursor.close();\r\n  },\r\n\r\n  fetch: function () {\r\n    var self = this;\r\n    return self.map(_.identity);\r\n  },\r\n\r\n  count: function () {\r\n    var self = this;\r\n    return self._synchronousCount().wait();\r\n  },\r\n\r\n  // This method is NOT wrapped in Cursor.\r\n  getRawObjects: function (ordered) {\r\n    var self = this;\r\n    if (ordered) {\r\n      return self.fetch();\r\n    } else {\r\n      var results = {};\r\n      self.forEach(function (doc) {\r\n        results[doc._id] = doc;\r\n      });\r\n      return results;\r\n    }\r\n  }\r\n});\r\n\r\nvar nextObserveHandleId = 1;\r\nvar ObserveHandle = function (liveResultsSet, callbacks) {\r\n  var self = this;\r\n  self._liveResultsSet = liveResultsSet;\r\n  self._added = callbacks.added;\r\n  self._addedBefore = callbacks.addedBefore;\r\n  self._changed = callbacks.changed;\r\n  self._removed = callbacks.removed;\r\n  self._moved = callbacks.moved;\r\n  self._movedBefore = callbacks.movedBefore;\r\n  self._observeHandleId = nextObserveHandleId++;\r\n};\r\nObserveHandle.prototype.stop = function () {\r\n  var self = this;\r\n  self._liveResultsSet._removeObserveHandle(self);\r\n  self._liveResultsSet = null;\r\n};\r\n\r\nMongoConnection.prototype._observeChanges = function (\r\n    cursorDescription, ordered, callbacks) {\r\n  var self = this;\r\n\r\n  if (cursorDescription.options.tailable) {\r\n    return self._observeChangesTailable(cursorDescription, ordered, callbacks);\r\n  }\r\n\r\n  var observeKey = JSON.stringify(\r\n    _.extend({ordered: ordered}, cursorDescription));\r\n\r\n  var liveResultsSet;\r\n  var observeHandle;\r\n  var newlyCreated = false;\r\n\r\n  // Find a matching LiveResultsSet, or create a new one. This next block is\r\n  // guaranteed to not yield (and it doesn't call anything that can observe a\r\n  // new query), so no other calls to this function can interleave with it.\r\n  Meteor._noYieldsAllowed(function () {\r\n    if (_.has(self._liveResultsSets, observeKey)) {\r\n      liveResultsSet = self._liveResultsSets[observeKey];\r\n    } else {\r\n      // Create a new LiveResultsSet. It is created \"locked\": no polling can\r\n      // take place.\r\n      liveResultsSet = new LiveResultsSet(\r\n        cursorDescription,\r\n        self,\r\n        ordered,\r\n        function () {\r\n          delete self._liveResultsSets[observeKey];\r\n        },\r\n        callbacks._testOnlyPollCallback);\r\n      self._liveResultsSets[observeKey] = liveResultsSet;\r\n      newlyCreated = true;\r\n    }\r\n    observeHandle = new ObserveHandle(liveResultsSet, callbacks);\r\n  });\r\n\r\n  if (newlyCreated) {\r\n    // This is the first ObserveHandle on this LiveResultsSet.  Add it and run\r\n    // the initial synchronous poll (which may yield).\r\n    liveResultsSet._addFirstObserveHandle(observeHandle);\r\n  } else {\r\n    // Not the first ObserveHandle. Add it to the LiveResultsSet. This call\r\n    // yields until we're not in the middle of a poll, and its invocation of the\r\n    // initial 'added' callbacks may yield as well. It blocks until the 'added'\r\n    // callbacks have fired.\r\n    liveResultsSet._addObserveHandleAndSendInitialAdds(observeHandle);\r\n  }\r\n\r\n  return observeHandle;\r\n};\r\n\r\nvar LiveResultsSet = function (cursorDescription, mongoHandle, ordered,\r\n                               stopCallback, testOnlyPollCallback) {\r\n  var self = this;\r\n\r\n  self._cursorDescription = cursorDescription;\r\n  self._mongoHandle = mongoHandle;\r\n  self._ordered = ordered;\r\n  self._stopCallbacks = [stopCallback];\r\n\r\n  // This constructor cannot yield, so we don't create the synchronousCursor yet\r\n  // (since that can yield).\r\n  self._synchronousCursor = null;\r\n\r\n  // previous results snapshot.  on each poll cycle, diffs against\r\n  // results drives the callbacks.\r\n  self._results = ordered ? [] : {};\r\n\r\n  // The number of _pollMongo calls that have been added to self._taskQueue but\r\n  // have not started running. Used to make sure we never schedule more than one\r\n  // _pollMongo (other than possibly the one that is currently running). It's\r\n  // also used by _suspendPolling to pretend there's a poll scheduled. Usually,\r\n  // it's either 0 (for \"no polls scheduled other than maybe one currently\r\n  // running\") or 1 (for \"a poll scheduled that isn't running yet\"), but it can\r\n  // also be 2 if incremented by _suspendPolling.\r\n  self._pollsScheduledButNotStarted = 0;\r\n  // Number of _addObserveHandleAndSendInitialAdds tasks scheduled but not yet\r\n  // running. _removeObserveHandle uses this to know if it's safe to shut down\r\n  // this LiveResultsSet.\r\n  self._addHandleTasksScheduledButNotPerformed = 0;\r\n  self._pendingWrites = []; // people to notify when polling completes\r\n\r\n  // Make sure to create a separately throttled function for each LiveResultsSet\r\n  // object.\r\n  self._ensurePollIsScheduled = _.throttle(\r\n    self._unthrottledEnsurePollIsScheduled, 50 /* ms */);\r\n\r\n  self._taskQueue = new Meteor._SynchronousQueue();\r\n\r\n  // Listen for the invalidation messages that will trigger us to poll the\r\n  // database for changes. If this selector specifies specific IDs, specify them\r\n  // here, so that updates to different specific IDs don't cause us to poll.\r\n  var listenOnTrigger = function (trigger) {\r\n    var listener = DDPServer._InvalidationCrossbar.listen(\r\n      trigger, function (notification, complete) {\r\n        // When someone does a transaction that might affect us, schedule a poll\r\n        // of the database. If that transaction happens inside of a write fence,\r\n        // block the fence until we've polled and notified observers.\r\n        var fence = DDPServer._CurrentWriteFence.get();\r\n        if (fence)\r\n          self._pendingWrites.push(fence.beginWrite());\r\n        // Ensure a poll is scheduled... but if we already know that one is,\r\n        // don't hit the throttled _ensurePollIsScheduled function (which might\r\n        // lead to us calling it unnecessarily in 50ms).\r\n        if (self._pollsScheduledButNotStarted === 0)\r\n          self._ensurePollIsScheduled();\r\n        complete();\r\n      });\r\n    self._stopCallbacks.push(function () { listener.stop(); });\r\n  };\r\n  var key = {collection: cursorDescription.collectionName};\r\n  var specificIds = LocalCollection._idsMatchedBySelector(\r\n    cursorDescription.selector);\r\n  if (specificIds) {\r\n    _.each(specificIds, function (id) {\r\n      listenOnTrigger(_.extend({id: id}, key));\r\n    });\r\n  } else {\r\n    listenOnTrigger(key);\r\n  }\r\n\r\n  // Map from handle ID to ObserveHandle.\r\n  self._observeHandles = {};\r\n\r\n  self._callbackMultiplexer = {};\r\n  var callbackNames = ['added', 'changed', 'removed'];\r\n  if (self._ordered) {\r\n    callbackNames.push('moved');\r\n    callbackNames.push('addedBefore');\r\n    callbackNames.push('movedBefore');\r\n  }\r\n  _.each(callbackNames, function (callback) {\r\n    var handleCallback = '_' + callback;\r\n    self._callbackMultiplexer[callback] = function () {\r\n      var args = _.toArray(arguments);\r\n      // Because callbacks can yield and _removeObserveHandle() (ie,\r\n      // handle.stop()) doesn't synchronize its actions with _taskQueue,\r\n      // ObserveHandles can disappear from self._observeHandles during this\r\n      // dispatch. Thus, we save a copy of the keys of self._observeHandles\r\n      // before we start to iterate, and we check to see if the handle is still\r\n      // there each time.\r\n      _.each(_.keys(self._observeHandles), function (handleId) {\r\n        var handle = self._observeHandles[handleId];\r\n        if (handle && handle[handleCallback])\r\n          handle[handleCallback].apply(null, EJSON.clone(args));\r\n      });\r\n    };\r\n  });\r\n\r\n  // every once and a while, poll even if we don't think we're dirty, for\r\n  // eventual consistency with database writes from outside the Meteor\r\n  // universe.\r\n  //\r\n  // For testing, there's an undocumented callback argument to observeChanges\r\n  // which disables time-based polling and gets called at the beginning of each\r\n  // poll.\r\n  if (testOnlyPollCallback) {\r\n    self._testOnlyPollCallback = testOnlyPollCallback;\r\n  } else {\r\n    var intervalHandle = Meteor.setInterval(\r\n      _.bind(self._ensurePollIsScheduled, self), 10 * 1000);\r\n    self._stopCallbacks.push(function () {\r\n      Meteor.clearInterval(intervalHandle);\r\n    });\r\n  }\r\n};\r\n\r\n_.extend(LiveResultsSet.prototype, {\r\n  _addFirstObserveHandle: function (handle) {\r\n    var self = this;\r\n    if (! _.isEmpty(self._observeHandles))\r\n      throw new Error(\"Not the first observe handle!\");\r\n    if (! _.isEmpty(self._results))\r\n      throw new Error(\"Call _addFirstObserveHandle before polling!\");\r\n\r\n    self._observeHandles[handle._observeHandleId] = handle;\r\n\r\n    // Run the first _poll() cycle synchronously (delivering results to the\r\n    // first ObserveHandle).\r\n    ++self._pollsScheduledButNotStarted;\r\n    self._taskQueue.runTask(function () {\r\n      self._pollMongo();\r\n    });\r\n  },\r\n\r\n  // This is always called through _.throttle.\r\n  _unthrottledEnsurePollIsScheduled: function () {\r\n    var self = this;\r\n    if (self._pollsScheduledButNotStarted > 0)\r\n      return;\r\n    ++self._pollsScheduledButNotStarted;\r\n    self._taskQueue.queueTask(function () {\r\n      self._pollMongo();\r\n    });\r\n  },\r\n\r\n  // test-only interface for controlling polling.\r\n  //\r\n  // _suspendPolling blocks until any currently running and scheduled polls are\r\n  // done, and prevents any further polls from being scheduled. (new\r\n  // ObserveHandles can be added and receive their initial added callbacks,\r\n  // though.)\r\n  //\r\n  // _resumePolling immediately polls, and allows further polls to occur.\r\n  _suspendPolling: function() {\r\n    var self = this;\r\n    // Pretend that there's another poll scheduled (which will prevent\r\n    // _ensurePollIsScheduled from queueing any more polls).\r\n    ++self._pollsScheduledButNotStarted;\r\n    // Now block until all currently running or scheduled polls are done.\r\n    self._taskQueue.runTask(function() {});\r\n\r\n    // Confirm that there is only one \"poll\" (the fake one we're pretending to\r\n    // have) scheduled.\r\n    if (self._pollsScheduledButNotStarted !== 1)\r\n      throw new Error(\"_pollsScheduledButNotStarted is \" +\r\n                      self._pollsScheduledButNotStarted);\r\n  },\r\n  _resumePolling: function() {\r\n    var self = this;\r\n    // We should be in the same state as in the end of _suspendPolling.\r\n    if (self._pollsScheduledButNotStarted !== 1)\r\n      throw new Error(\"_pollsScheduledButNotStarted is \" +\r\n                      self._pollsScheduledButNotStarted);\r\n    // Run a poll synchronously (which will counteract the\r\n    // ++_pollsScheduledButNotStarted from _suspendPolling).\r\n    self._taskQueue.runTask(function () {\r\n      self._pollMongo();\r\n    });\r\n  },\r\n\r\n  _pollMongo: function () {\r\n    var self = this;\r\n    --self._pollsScheduledButNotStarted;\r\n\r\n    self._testOnlyPollCallback && self._testOnlyPollCallback();\r\n\r\n    // Save the list of pending writes which this round will commit.\r\n    var writesForCycle = self._pendingWrites;\r\n    self._pendingWrites = [];\r\n\r\n    // Get the new query results. (These calls can yield.)\r\n    if (self._synchronousCursor) {\r\n      self._synchronousCursor.rewind();\r\n    } else {\r\n      self._synchronousCursor = self._mongoHandle._createSynchronousCursor(\r\n        self._cursorDescription);\r\n    }\r\n    var newResults = self._synchronousCursor.getRawObjects(self._ordered);\r\n    var oldResults = self._results;\r\n\r\n    // Run diffs. (This can yield too.)\r\n    if (!_.isEmpty(self._observeHandles)) {\r\n      LocalCollection._diffQueryChanges(\r\n        self._ordered, oldResults, newResults, self._callbackMultiplexer);\r\n    }\r\n\r\n    // Replace self._results atomically.\r\n    self._results = newResults;\r\n\r\n    // Mark all the writes which existed before this call as commmitted. (If new\r\n    // writes have shown up in the meantime, there'll already be another\r\n    // _pollMongo task scheduled.)\r\n    _.each(writesForCycle, function (w) {w.committed();});\r\n  },\r\n\r\n  // Adds the observe handle to this set and sends its initial added\r\n  // callbacks. Meteor._SynchronousQueue guarantees that this won't interleave\r\n  // with a call to _pollMongo or another call to this function.\r\n  _addObserveHandleAndSendInitialAdds: function (handle) {\r\n    var self = this;\r\n\r\n    // Check this before calling runTask (even though runTask does the same\r\n    // check) so that we don't leak a LiveResultsSet by incrementing\r\n    // _addHandleTasksScheduledButNotPerformed and never decrementing it.\r\n    if (!self._taskQueue.safeToRunTask())\r\n      throw new Error(\r\n        \"Can't call observe() from an observe callback on the same query\");\r\n\r\n    // Keep track of how many of these tasks are on the queue, so that\r\n    // _removeObserveHandle knows if it's safe to GC.\r\n    ++self._addHandleTasksScheduledButNotPerformed;\r\n\r\n    self._taskQueue.runTask(function () {\r\n      if (!self._observeHandles)\r\n        throw new Error(\"Can't add observe handle to stopped LiveResultsSet\");\r\n\r\n      if (_.has(self._observeHandles, handle._observeHandleId))\r\n        throw new Error(\"Duplicate observe handle ID\");\r\n      self._observeHandles[handle._observeHandleId] = handle;\r\n      --self._addHandleTasksScheduledButNotPerformed;\r\n\r\n      // Send initial adds.\r\n      if (handle._added || handle._addedBefore) {\r\n        _.each(self._results, function (doc, i) {\r\n          var fields = EJSON.clone(doc);\r\n          delete fields._id;\r\n          if (self._ordered) {\r\n            handle._added && handle._added(doc._id, fields);\r\n            handle._addedBefore && handle._addedBefore(doc._id, fields, null);\r\n          } else {\r\n            handle._added(doc._id, fields);\r\n          }\r\n        });\r\n      }\r\n    });\r\n  },\r\n\r\n  // Remove an observe handle. If it was the last observe handle, call all the\r\n  // stop callbacks; you cannot add any more observe handles after this.\r\n  //\r\n  // This is not synchronized with polls and handle additions: this means that\r\n  // you can safely call it from within an observe callback.\r\n  _removeObserveHandle: function (handle) {\r\n    var self = this;\r\n\r\n    if (!_.has(self._observeHandles, handle._observeHandleId))\r\n      throw new Error(\"Unknown observe handle ID \" + handle._observeHandleId);\r\n    delete self._observeHandles[handle._observeHandleId];\r\n\r\n    if (_.isEmpty(self._observeHandles) &&\r\n        self._addHandleTasksScheduledButNotPerformed === 0) {\r\n      // The last observe handle was stopped; call our stop callbacks, which:\r\n      //  - removes us from the MongoConnection's _liveResultsSets map\r\n      //  - stops the poll timer\r\n      //  - removes us from the invalidation crossbar\r\n      _.each(self._stopCallbacks, function (c) { c(); });\r\n      // This will cause future _addObserveHandleAndSendInitialAdds calls to\r\n      // throw.\r\n      self._observeHandles = null;\r\n    }\r\n  }\r\n});\r\n\r\n// observeChanges for tailable cursors on capped collections.\r\n//\r\n// Some differences from normal cursors:\r\n//   - Will never produce anything other than 'added' or 'addedBefore'. If you\r\n//     do update a document that has already been produced, this will not notice\r\n//     it.\r\n//   - If you disconnect and reconnect from Mongo, it will essentially restart\r\n//     the query, which will lead to duplicate results. This is pretty bad,\r\n//     but if you include a field called 'ts' which is inserted as\r\n//     new MongoInternals.MongoTimestamp(0, 0) (which is initialized to the\r\n//     current Mongo-style timestamp), we'll be able to find the place to\r\n//     restart properly. (This field is specifically understood by Mongo with an\r\n//     optimization which allows it to find the right place to start without\r\n//     an index on ts. It's how the oplog works.)\r\n//   - No callbacks are triggered synchronously with the call (there's no\r\n//     differentiation between \"initial data\" and \"later changes\"; everything\r\n//     that matches the query gets sent asynchronously).\r\n//   - De-duplication is not implemented.\r\n//   - Does not yet interact with the write fence. Probably, this should work by\r\n//     ignoring removes (which don't work on capped collections) and updates\r\n//     (which don't affect tailable cursors), and just keeping track of the ID\r\n//     of the inserted object, and closing the write fence once you get to that\r\n//     ID (or timestamp?).  This doesn't work well if the document doesn't match\r\n//     the query, though.  On the other hand, the write fence can close\r\n//     immediately if it does not match the query. So if we trust minimongo\r\n//     enough to accurately evaluate the query against the write fence, we\r\n//     should be able to do this...  Of course, minimongo doesn't even support\r\n//     Mongo Timestamps yet.\r\nMongoConnection.prototype._observeChangesTailable = function (\r\n    cursorDescription, ordered, callbacks) {\r\n  var self = this;\r\n\r\n  // Tailable cursors only ever call added/addedBefore callbacks, so it's an\r\n  // error if you didn't provide them.\r\n  if ((ordered && !callbacks.addedBefore) ||\r\n      (!ordered && !callbacks.added)) {\r\n    throw new Error(\"Can't observe an \" + (ordered ? \"ordered\" : \"unordered\")\r\n                    + \" tailable cursor without a \"\r\n                    + (ordered ? \"addedBefore\" : \"added\") + \" callback\");\r\n  }\r\n  var cursor = self._createSynchronousCursor(cursorDescription);\r\n\r\n  var stopped = false;\r\n  var lastTS = undefined;\r\n  Meteor.defer(function () {\r\n    while (true) {\r\n      if (stopped)\r\n        return;\r\n      try {\r\n        var doc = cursor._nextObject();\r\n      } catch (err) {\r\n        // There's no good way to figure out if this was actually an error from\r\n        // Mongo. Ah well. But either way, we need to retry the cursor (unless\r\n        // the failure was because the observe got stopped).\r\n        doc = null;\r\n      }\r\n      if (stopped)\r\n        return;\r\n      if (doc) {\r\n        var id = doc._id;\r\n        delete doc._id;\r\n        // If a tailable cursor contains a \"ts\" field, use it to recreate the\r\n        // cursor on error, and don't publish the field. (\"ts\" is a standard\r\n        // that Mongo uses internally for the oplog, and there's a special flag\r\n        // that lets you do binary search on it instead of needing to use an\r\n        // index.)\r\n        lastTS = doc.ts;\r\n        delete doc.ts;\r\n        if (ordered) {\r\n          callbacks.addedBefore(id, doc, null);\r\n        } else {\r\n          callbacks.added(id, doc);\r\n        }\r\n      } else {\r\n        var newSelector = _.clone(cursorDescription.selector);\r\n        if (lastTS) {\r\n          newSelector.ts = {$gt: lastTS};\r\n        }\r\n        // XXX maybe set replay flag\r\n        cursor = self._createSynchronousCursor(new CursorDescription(\r\n          cursorDescription.collectionName,\r\n          newSelector,\r\n          cursorDescription.options));\r\n      }\r\n    }\r\n  });\r\n\r\n  return {\r\n    stop: function () {\r\n      stopped = true;\r\n      cursor.close();\r\n    }\r\n  };\r\n};\r\n\r\n// XXX We probably need to find a better way to expose this. Right now\r\n// it's only used by tests, but in fact you need it in normal\r\n// operation to interact with capped collections (eg, Galaxy uses it).\r\nMongoInternals.MongoTimestamp = MongoDB.Timestamp;\r\n\r\nMongoInternals.Connection = MongoConnection;\r\n","LocalCollectionDriver = function () {\r\n  var self = this;\r\n  self.noConnCollections = {};\r\n};\r\n\r\nvar ensureCollection = function (name, collections) {\r\n  if (!(name in collections))\r\n    collections[name] = new LocalCollection(name);\r\n  return collections[name];\r\n};\r\n\r\n_.extend(LocalCollectionDriver.prototype, {\r\n  open: function (name, conn) {\r\n    var self = this;\r\n    if (!name)\r\n      return new LocalCollection;\r\n    if (! conn) {\r\n      return ensureCollection(name, self.noConnCollections);\r\n    }\r\n    if (! conn._mongo_livedata_collections)\r\n      conn._mongo_livedata_collections = {};\r\n    // XXX is there a way to keep track of a connection's collections without\r\n    // dangling it off the connection object?\r\n    return ensureCollection(name, conn._mongo_livedata_collections);\r\n  }\r\n});\r\n\r\n// singleton\r\nLocalCollectionDriver = new LocalCollectionDriver;\r\n","MongoInternals.RemoteCollectionDriver = function (mongo_url) {\r\n  var self = this;\r\n  self.mongo = new MongoConnection(mongo_url);\r\n};\r\n\r\n_.extend(MongoInternals.RemoteCollectionDriver.prototype, {\r\n  open: function (name) {\r\n    var self = this;\r\n    var ret = {};\r\n    _.each(\r\n      ['find', 'findOne', 'insert', 'update', , 'upsert',\r\n       'remove', '_ensureIndex', '_dropIndex', '_createCappedCollection'],\r\n      function (m) {\r\n        ret[m] = _.bind(self.mongo[m], self.mongo, name);\r\n      });\r\n    return ret;\r\n  }\r\n});\r\n\r\n\r\n// Create the singleton RemoteCollectionDriver only on demand, so we\r\n// only require Mongo configuration if it's actually used (eg, not if\r\n// you're only trying to receive data from a remote DDP server.)\r\nMongoInternals.defaultRemoteCollectionDriver = _.once(function () {\r\n  var mongoUrl;\r\n  AppConfig.configurePackage(\"mongo-livedata\", function (config) {\r\n    // This will keep running if mongo gets reconfigured.  That's not ideal, but\r\n    // should be ok for now.\r\n    mongoUrl = config.url;\r\n  });\r\n  // XXX bad error since it could also be set directly in METEOR_DEPLOY_CONFIG\r\n  if (! mongoUrl)\r\n    throw new Error(\"MONGO_URL must be set in environment\");\r\n\r\n  return new MongoInternals.RemoteCollectionDriver(mongoUrl);\r\n});\r\n","// options.connection, if given, is a LivedataClient or LivedataServer\r\n// XXX presently there is no way to destroy/clean up a Collection\r\n\r\nMeteor.Collection = function (name, options) {\r\n  var self = this;\r\n  if (! (self instanceof Meteor.Collection))\r\n    throw new Error('use \"new\" to construct a Meteor.Collection');\r\n  if (options && options.methods) {\r\n    // Backwards compatibility hack with original signature (which passed\r\n    // \"connection\" directly instead of in options. (Connections must have a \"methods\"\r\n    // method.)\r\n    // XXX remove before 1.0\r\n    options = {connection: options};\r\n  }\r\n  // Backwards compatibility: \"connection\" used to be called \"manager\".\r\n  if (options && options.manager && !options.connection) {\r\n    options.connection = options.manager;\r\n  }\r\n  options = _.extend({\r\n    connection: undefined,\r\n    idGeneration: 'STRING',\r\n    transform: null,\r\n    _driver: undefined,\r\n    _preventAutopublish: false\r\n  }, options);\r\n\r\n  switch (options.idGeneration) {\r\n  case 'MONGO':\r\n    self._makeNewID = function () {\r\n      return new Meteor.Collection.ObjectID();\r\n    };\r\n    break;\r\n  case 'STRING':\r\n  default:\r\n    self._makeNewID = function () {\r\n      return Random.id();\r\n    };\r\n    break;\r\n  }\r\n\r\n  if (options.transform)\r\n    self._transform = Deps._makeNonreactive(options.transform);\r\n  else\r\n    self._transform = null;\r\n\r\n  if (!name && (name !== null)) {\r\n    Meteor._debug(\"Warning: creating anonymous collection. It will not be \" +\r\n                  \"saved or synchronized over the network. (Pass null for \" +\r\n                  \"the collection name to turn off this warning.)\");\r\n  }\r\n\r\n  if (! name || options.connection === null)\r\n    // note: nameless collections never have a connection\r\n    self._connection = null;\r\n  else if (options.connection)\r\n    self._connection = options.connection;\r\n  else if (Meteor.isClient)\r\n    self._connection = Meteor.connection;\r\n  else\r\n    self._connection = Meteor.server;\r\n\r\n  if (!options._driver) {\r\n    if (name && self._connection === Meteor.server &&\r\n        typeof MongoInternals !== \"undefined\" &&\r\n        MongoInternals.defaultRemoteCollectionDriver) {\r\n      options._driver = MongoInternals.defaultRemoteCollectionDriver();\r\n    } else {\r\n      options._driver = LocalCollectionDriver;\r\n    }\r\n  }\r\n\r\n  self._collection = options._driver.open(name, self._connection);\r\n  self._name = name;\r\n\r\n  if (self._connection && self._connection.registerStore) {\r\n    // OK, we're going to be a slave, replicating some remote\r\n    // database, except possibly with some temporary divergence while\r\n    // we have unacknowledged RPC's.\r\n    var ok = self._connection.registerStore(name, {\r\n      // Called at the beginning of a batch of updates. batchSize is the number\r\n      // of update calls to expect.\r\n      //\r\n      // XXX This interface is pretty janky. reset probably ought to go back to\r\n      // being its own function, and callers shouldn't have to calculate\r\n      // batchSize. The optimization of not calling pause/remove should be\r\n      // delayed until later: the first call to update() should buffer its\r\n      // message, and then we can either directly apply it at endUpdate time if\r\n      // it was the only update, or do pauseObservers/apply/apply at the next\r\n      // update() if there's another one.\r\n      beginUpdate: function (batchSize, reset) {\r\n        // pause observers so users don't see flicker when updating several\r\n        // objects at once (including the post-reconnect reset-and-reapply\r\n        // stage), and so that a re-sorting of a query can take advantage of the\r\n        // full _diffQuery moved calculation instead of applying change one at a\r\n        // time.\r\n        if (batchSize > 1 || reset)\r\n          self._collection.pauseObservers();\r\n\r\n        if (reset)\r\n          self._collection.remove({});\r\n      },\r\n\r\n      // Apply an update.\r\n      // XXX better specify this interface (not in terms of a wire message)?\r\n      update: function (msg) {\r\n        var mongoId = LocalCollection._idParse(msg.id);\r\n        var doc = self._collection.findOne(mongoId);\r\n\r\n        // Is this a \"replace the whole doc\" message coming from the quiescence\r\n        // of method writes to an object? (Note that 'undefined' is a valid\r\n        // value meaning \"remove it\".)\r\n        if (msg.msg === 'replace') {\r\n          var replace = msg.replace;\r\n          if (!replace) {\r\n            if (doc)\r\n              self._collection.remove(mongoId);\r\n          } else if (!doc) {\r\n            self._collection.insert(replace);\r\n          } else {\r\n            // XXX check that replace has no $ ops\r\n            self._collection.update(mongoId, replace);\r\n          }\r\n          return;\r\n        } else if (msg.msg === 'added') {\r\n          if (doc) {\r\n            throw new Error(\"Expected not to find a document already present for an add\");\r\n          }\r\n          self._collection.insert(_.extend({_id: mongoId}, msg.fields));\r\n        } else if (msg.msg === 'removed') {\r\n          if (!doc)\r\n            throw new Error(\"Expected to find a document already present for removed\");\r\n          self._collection.remove(mongoId);\r\n        } else if (msg.msg === 'changed') {\r\n          if (!doc)\r\n            throw new Error(\"Expected to find a document to change\");\r\n          if (!_.isEmpty(msg.fields)) {\r\n            var modifier = {};\r\n            _.each(msg.fields, function (value, key) {\r\n              if (value === undefined) {\r\n                if (!modifier.$unset)\r\n                  modifier.$unset = {};\r\n                modifier.$unset[key] = 1;\r\n              } else {\r\n                if (!modifier.$set)\r\n                  modifier.$set = {};\r\n                modifier.$set[key] = value;\r\n              }\r\n            });\r\n            self._collection.update(mongoId, modifier);\r\n          }\r\n        } else {\r\n          throw new Error(\"I don't know how to deal with this message\");\r\n        }\r\n\r\n      },\r\n\r\n      // Called at the end of a batch of updates.\r\n      endUpdate: function () {\r\n        self._collection.resumeObservers();\r\n      },\r\n\r\n      // Called around method stub invocations to capture the original versions\r\n      // of modified documents.\r\n      saveOriginals: function () {\r\n        self._collection.saveOriginals();\r\n      },\r\n      retrieveOriginals: function () {\r\n        return self._collection.retrieveOriginals();\r\n      }\r\n    });\r\n\r\n    if (!ok)\r\n      throw new Error(\"There is already a collection named '\" + name + \"'\");\r\n  }\r\n\r\n  self._defineMutationMethods();\r\n\r\n  // autopublish\r\n  if (Package.autopublish && !options._preventAutopublish && self._connection\r\n      && self._connection.publish) {\r\n    self._connection.publish(null, function () {\r\n      return self.find();\r\n    }, {is_auto: true});\r\n  }\r\n};\r\n\r\n///\r\n/// Main collection API\r\n///\r\n\r\n\r\n_.extend(Meteor.Collection.prototype, {\r\n\r\n  _getFindSelector: function (args) {\r\n    if (args.length == 0)\r\n      return {};\r\n    else\r\n      return args[0];\r\n  },\r\n\r\n  _getFindOptions: function (args) {\r\n    var self = this;\r\n    if (args.length < 2) {\r\n      return { transform: self._transform };\r\n    } else {\r\n      return _.extend({\r\n        transform: self._transform\r\n      }, args[1]);\r\n    }\r\n  },\r\n\r\n  find: function (/* selector, options */) {\r\n    // Collection.find() (return all docs) behaves differently\r\n    // from Collection.find(undefined) (return 0 docs).  so be\r\n    // careful about the length of arguments.\r\n    var self = this;\r\n    var argArray = _.toArray(arguments);\r\n    return self._collection.find(self._getFindSelector(argArray),\r\n                                 self._getFindOptions(argArray));\r\n  },\r\n\r\n  findOne: function (/* selector, options */) {\r\n    var self = this;\r\n    var argArray = _.toArray(arguments);\r\n    return self._collection.findOne(self._getFindSelector(argArray),\r\n                                    self._getFindOptions(argArray));\r\n  }\r\n\r\n});\r\n\r\nMeteor.Collection._publishCursor = function (cursor, sub, collection) {\r\n  var observeHandle = cursor.observeChanges({\r\n    added: function (id, fields) {\r\n      sub.added(collection, id, fields);\r\n    },\r\n    changed: function (id, fields) {\r\n      sub.changed(collection, id, fields);\r\n    },\r\n    removed: function (id) {\r\n      sub.removed(collection, id);\r\n    }\r\n  });\r\n\r\n  // We don't call sub.ready() here: it gets called in livedata_server, after\r\n  // possibly calling _publishCursor on multiple returned cursors.\r\n\r\n  // register stop callback (expects lambda w/ no args).\r\n  sub.onStop(function () {observeHandle.stop();});\r\n};\r\n\r\n// protect against dangerous selectors.  falsey and {_id: falsey} are both\r\n// likely programmer error, and not what you want, particularly for destructive\r\n// operations.  JS regexps don't serialize over DDP but can be trivially\r\n// replaced by $regex.\r\nMeteor.Collection._rewriteSelector = function (selector) {\r\n  // shorthand -- scalars match _id\r\n  if (LocalCollection._selectorIsId(selector))\r\n    selector = {_id: selector};\r\n\r\n  if (!selector || (('_id' in selector) && !selector._id))\r\n    // can't match anything\r\n    return {_id: Random.id()};\r\n\r\n  var ret = {};\r\n  _.each(selector, function (value, key) {\r\n    // Mongo supports both {field: /foo/} and {field: {$regex: /foo/}}\r\n    if (value instanceof RegExp) {\r\n      ret[key] = convertRegexpToMongoSelector(value);\r\n    } else if (value && value.$regex instanceof RegExp) {\r\n      ret[key] = convertRegexpToMongoSelector(value.$regex);\r\n      // if value is {$regex: /foo/, $options: ...} then $options\r\n      // override the ones set on $regex.\r\n      if (value.$options !== undefined)\r\n        ret[key].$options = value.$options;\r\n    }\r\n    else if (_.contains(['$or','$and','$nor'], key)) {\r\n      // Translate lower levels of $and/$or/$nor\r\n      ret[key] = _.map(value, function (v) {\r\n        return Meteor.Collection._rewriteSelector(v);\r\n      });\r\n    }\r\n    else {\r\n      ret[key] = value;\r\n    }\r\n  });\r\n  return ret;\r\n};\r\n\r\n// convert a JS RegExp object to a Mongo {$regex: ..., $options: ...}\r\n// selector\r\nvar convertRegexpToMongoSelector = function (regexp) {\r\n  check(regexp, RegExp); // safety belt\r\n\r\n  var selector = {$regex: regexp.source};\r\n  var regexOptions = '';\r\n  // JS RegExp objects support 'i', 'm', and 'g'. Mongo regex $options\r\n  // support 'i', 'm', 'x', and 's'. So we support 'i' and 'm' here.\r\n  if (regexp.ignoreCase)\r\n    regexOptions += 'i';\r\n  if (regexp.multiline)\r\n    regexOptions += 'm';\r\n  if (regexOptions)\r\n    selector.$options = regexOptions;\r\n\r\n  return selector;\r\n};\r\n\r\nvar throwIfSelectorIsNotId = function (selector, methodName) {\r\n  if (!LocalCollection._selectorIsIdPerhapsAsObject(selector)) {\r\n    throw new Meteor.Error(\r\n      403, \"Not permitted. Untrusted code may only \" + methodName +\r\n        \" documents by ID.\");\r\n  }\r\n};\r\n\r\n// 'insert' immediately returns the inserted document's new _id.\r\n// The others return values immediately if you are in a stub, an in-memory\r\n// unmanaged collection, or a mongo-backed collection and you don't pass a\r\n// callback. 'update' and 'remove' return the number of affected\r\n// documents. 'upsert' returns an object with keys 'numberAffected' and, if an\r\n// insert happened, 'insertedId'.\r\n//\r\n// Otherwise, the semantics are exactly like other methods: they take\r\n// a callback as an optional last argument; if no callback is\r\n// provided, they block until the operation is complete, and throw an\r\n// exception if it fails; if a callback is provided, then they don't\r\n// necessarily block, and they call the callback when they finish with error and\r\n// result arguments.  (The insert method provides the document ID as its result;\r\n// update and remove provide the number of affected docs as the result; upsert\r\n// provides an object with numberAffected and maybe insertedId.)\r\n//\r\n// On the client, blocking is impossible, so if a callback\r\n// isn't provided, they just return immediately and any error\r\n// information is lost.\r\n//\r\n// There's one more tweak. On the client, if you don't provide a\r\n// callback, then if there is an error, a message will be logged with\r\n// Meteor._debug.\r\n//\r\n// The intent (though this is actually determined by the underlying\r\n// drivers) is that the operations should be done synchronously, not\r\n// generating their result until the database has acknowledged\r\n// them. In the future maybe we should provide a flag to turn this\r\n// off.\r\n_.each([\"insert\", \"update\", \"remove\"], function (name) {\r\n  Meteor.Collection.prototype[name] = function (/* arguments */) {\r\n    var self = this;\r\n    var args = _.toArray(arguments);\r\n    var callback;\r\n    var insertId;\r\n    var ret;\r\n\r\n    if (args.length && args[args.length - 1] instanceof Function)\r\n      callback = args.pop();\r\n\r\n    if (name === \"insert\") {\r\n      if (!args.length)\r\n        throw new Error(\"insert requires an argument\");\r\n      // shallow-copy the document and generate an ID\r\n      args[0] = _.extend({}, args[0]);\r\n      if ('_id' in args[0]) {\r\n        insertId = args[0]._id;\r\n        if (!insertId || !(typeof insertId === 'string'\r\n              || insertId instanceof Meteor.Collection.ObjectID))\r\n          throw new Error(\"Meteor requires document _id fields to be non-empty strings or ObjectIDs\");\r\n      } else {\r\n        insertId = args[0]._id = self._makeNewID();\r\n      }\r\n    } else {\r\n      args[0] = Meteor.Collection._rewriteSelector(args[0]);\r\n\r\n      if (name === \"update\") {\r\n        // Mutate args but copy the original options object. We need to add\r\n        // insertedId to options, but don't want to mutate the caller's options\r\n        // object. We need to mutate `args` because we pass `args` into the\r\n        // driver below.\r\n        var options = args[2] = _.clone(args[2]) || {};\r\n        if (options && typeof options !== \"function\" && options.upsert) {\r\n          // set `insertedId` if absent.  `insertedId` is a Meteor extension.\r\n          if (options.insertedId) {\r\n            if (!(typeof options.insertedId === 'string'\r\n                  || options.insertedId instanceof Meteor.Collection.ObjectID))\r\n              throw new Error(\"insertedId must be string or ObjectID\");\r\n          } else {\r\n            options.insertedId = self._makeNewID();\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // On inserts, always return the id that we generated; on all other\r\n    // operations, just return the result from the collection.\r\n    var chooseReturnValueFromCollectionResult = function (result) {\r\n      if (name === \"insert\")\r\n        return insertId;\r\n      else\r\n        return result;\r\n    };\r\n\r\n    var wrappedCallback;\r\n    if (callback) {\r\n      wrappedCallback = function (error, result) {\r\n        callback(error, ! error && chooseReturnValueFromCollectionResult(result));\r\n      };\r\n    }\r\n\r\n    if (self._connection && self._connection !== Meteor.server) {\r\n      // just remote to another endpoint, propagate return value or\r\n      // exception.\r\n\r\n      var enclosing = DDP._CurrentInvocation.get();\r\n      var alreadyInSimulation = enclosing && enclosing.isSimulation;\r\n\r\n      if (Meteor.isClient && !wrappedCallback && ! alreadyInSimulation) {\r\n        // Client can't block, so it can't report errors by exception,\r\n        // only by callback. If they forget the callback, give them a\r\n        // default one that logs the error, so they aren't totally\r\n        // baffled if their writes don't work because their database is\r\n        // down.\r\n        // Don't give a default callback in simulation, because inside stubs we\r\n        // want to return the results from the local collection immediately and\r\n        // not force a callback.\r\n        wrappedCallback = function (err) {\r\n          if (err)\r\n            Meteor._debug(name + \" failed: \" + (err.reason || err.stack));\r\n        };\r\n      }\r\n\r\n      if (!alreadyInSimulation && name !== \"insert\") {\r\n        // If we're about to actually send an RPC, we should throw an error if\r\n        // this is a non-ID selector, because the mutation methods only allow\r\n        // single-ID selectors. (If we don't throw here, we'll see flicker.)\r\n        throwIfSelectorIsNotId(args[0], name);\r\n      }\r\n\r\n      ret = chooseReturnValueFromCollectionResult(\r\n        self._connection.apply(self._prefix + name, args, wrappedCallback)\r\n      );\r\n\r\n    } else {\r\n      // it's my collection.  descend into the collection object\r\n      // and propagate any exception.\r\n      args.push(wrappedCallback);\r\n      try {\r\n        // If the user provided a callback and the collection implements this\r\n        // operation asynchronously, then queryRet will be undefined, and the\r\n        // result will be returned through the callback instead.\r\n        var queryRet = self._collection[name].apply(self._collection, args);\r\n        ret = chooseReturnValueFromCollectionResult(queryRet);\r\n      } catch (e) {\r\n        if (callback) {\r\n          callback(e);\r\n          return null;\r\n        }\r\n        throw e;\r\n      }\r\n    }\r\n\r\n    // both sync and async, unless we threw an exception, return ret\r\n    // (new document ID for insert, num affected for update/remove, object with\r\n    // numberAffected and maybe insertedId for upsert).\r\n    return ret;\r\n  };\r\n});\r\n\r\nMeteor.Collection.prototype.upsert = function (selector, modifier,\r\n                                               options, callback) {\r\n  var self = this;\r\n  if (! callback && typeof options === \"function\") {\r\n    callback = options;\r\n    options = {};\r\n  }\r\n  return self.update(selector, modifier,\r\n              _.extend({}, options, { _returnObject: true, upsert: true }),\r\n              callback);\r\n};\r\n\r\n// We'll actually design an index API later. For now, we just pass through to\r\n// Mongo's, but make it synchronous.\r\nMeteor.Collection.prototype._ensureIndex = function (index, options) {\r\n  var self = this;\r\n  if (!self._collection._ensureIndex)\r\n    throw new Error(\"Can only call _ensureIndex on server collections\");\r\n  self._collection._ensureIndex(index, options);\r\n};\r\nMeteor.Collection.prototype._dropIndex = function (index) {\r\n  var self = this;\r\n  if (!self._collection._dropIndex)\r\n    throw new Error(\"Can only call _dropIndex on server collections\");\r\n  self._collection._dropIndex(index);\r\n};\r\nMeteor.Collection.prototype._createCappedCollection = function (byteSize) {\r\n  var self = this;\r\n  if (!self._collection._createCappedCollection)\r\n    throw new Error(\"Can only call _createCappedCollection on server collections\");\r\n  self._collection._createCappedCollection(byteSize);\r\n};\r\n\r\nMeteor.Collection.ObjectID = LocalCollection._ObjectID;\r\n\r\n///\r\n/// Remote methods and access control.\r\n///\r\n\r\n// Restrict default mutators on collection. allow() and deny() take the\r\n// same options:\r\n//\r\n// options.insert {Function(userId, doc)}\r\n//   return true to allow/deny adding this document\r\n//\r\n// options.update {Function(userId, docs, fields, modifier)}\r\n//   return true to allow/deny updating these documents.\r\n//   `fields` is passed as an array of fields that are to be modified\r\n//\r\n// options.remove {Function(userId, docs)}\r\n//   return true to allow/deny removing these documents\r\n//\r\n// options.fetch {Array}\r\n//   Fields to fetch for these validators. If any call to allow or deny\r\n//   does not have this option then all fields are loaded.\r\n//\r\n// allow and deny can be called multiple times. The validators are\r\n// evaluated as follows:\r\n// - If neither deny() nor allow() has been called on the collection,\r\n//   then the request is allowed if and only if the \"insecure\" smart\r\n//   package is in use.\r\n// - Otherwise, if any deny() function returns true, the request is denied.\r\n// - Otherwise, if any allow() function returns true, the request is allowed.\r\n// - Otherwise, the request is denied.\r\n//\r\n// Meteor may call your deny() and allow() functions in any order, and may not\r\n// call all of them if it is able to make a decision without calling them all\r\n// (so don't include side effects).\r\n\r\n(function () {\r\n  var addValidator = function(allowOrDeny, options) {\r\n    // validate keys\r\n    var VALID_KEYS = ['insert', 'update', 'remove', 'fetch', 'transform'];\r\n    _.each(_.keys(options), function (key) {\r\n      if (!_.contains(VALID_KEYS, key))\r\n        throw new Error(allowOrDeny + \": Invalid key: \" + key);\r\n    });\r\n\r\n    var self = this;\r\n    self._restricted = true;\r\n\r\n    _.each(['insert', 'update', 'remove'], function (name) {\r\n      if (options[name]) {\r\n        if (!(options[name] instanceof Function)) {\r\n          throw new Error(allowOrDeny + \": Value for `\" + name + \"` must be a function\");\r\n        }\r\n        if (self._transform)\r\n          options[name].transform = self._transform;\r\n        if (options.transform)\r\n          options[name].transform = Deps._makeNonreactive(options.transform);\r\n        self._validators[name][allowOrDeny].push(options[name]);\r\n      }\r\n    });\r\n\r\n    // Only update the fetch fields if we're passed things that affect\r\n    // fetching. This way allow({}) and allow({insert: f}) don't result in\r\n    // setting fetchAllFields\r\n    if (options.update || options.remove || options.fetch) {\r\n      if (options.fetch && !(options.fetch instanceof Array)) {\r\n        throw new Error(allowOrDeny + \": Value for `fetch` must be an array\");\r\n      }\r\n      self._updateFetch(options.fetch);\r\n    }\r\n  };\r\n\r\n  Meteor.Collection.prototype.allow = function(options) {\r\n    addValidator.call(this, 'allow', options);\r\n  };\r\n  Meteor.Collection.prototype.deny = function(options) {\r\n    addValidator.call(this, 'deny', options);\r\n  };\r\n})();\r\n\r\n\r\nMeteor.Collection.prototype._defineMutationMethods = function() {\r\n  var self = this;\r\n\r\n  // set to true once we call any allow or deny methods. If true, use\r\n  // allow/deny semantics. If false, use insecure mode semantics.\r\n  self._restricted = false;\r\n\r\n  // Insecure mode (default to allowing writes). Defaults to 'undefined' which\r\n  // means insecure iff the insecure package is loaded. This property can be\r\n  // overriden by tests or packages wishing to change insecure mode behavior of\r\n  // their collections.\r\n  self._insecure = undefined;\r\n\r\n  self._validators = {\r\n    insert: {allow: [], deny: []},\r\n    update: {allow: [], deny: []},\r\n    remove: {allow: [], deny: []},\r\n    upsert: {allow: [], deny: []}, // dummy arrays; can't set these!\r\n    fetch: [],\r\n    fetchAllFields: false\r\n  };\r\n\r\n  if (!self._name)\r\n    return; // anonymous collection\r\n\r\n  // XXX Think about method namespacing. Maybe methods should be\r\n  // \"Meteor:Mongo:insert/NAME\"?\r\n  self._prefix = '/' + self._name + '/';\r\n\r\n  // mutation methods\r\n  if (self._connection) {\r\n    var m = {};\r\n\r\n    _.each(['insert', 'update', 'remove'], function (method) {\r\n      m[self._prefix + method] = function (/* ... */) {\r\n        // All the methods do their own validation, instead of using check().\r\n        check(arguments, [Match.Any]);\r\n        try {\r\n          if (this.isSimulation) {\r\n\r\n            // In a client simulation, you can do any mutation (even with a\r\n            // complex selector).\r\n            return self._collection[method].apply(\r\n              self._collection, _.toArray(arguments));\r\n          }\r\n\r\n          // This is the server receiving a method call from the client.\r\n\r\n          // We don't allow arbitrary selectors in mutations from the client: only\r\n          // single-ID selectors.\r\n          if (method !== 'insert')\r\n            throwIfSelectorIsNotId(arguments[0], method);\r\n\r\n          if (self._restricted) {\r\n            // short circuit if there is no way it will pass.\r\n            if (self._validators[method].allow.length === 0) {\r\n              throw new Meteor.Error(\r\n                403, \"Access denied. No allow validators set on restricted \" +\r\n                  \"collection for method '\" + method + \"'.\");\r\n            }\r\n\r\n            var validatedMethodName =\r\n                  '_validated' + method.charAt(0).toUpperCase() + method.slice(1);\r\n            var argsWithUserId = [this.userId].concat(_.toArray(arguments));\r\n            return self[validatedMethodName].apply(self, argsWithUserId);\r\n          } else if (self._isInsecure()) {\r\n            // In insecure mode, allow any mutation (with a simple selector).\r\n            return self._collection[method].apply(self._collection,\r\n                                                  _.toArray(arguments));\r\n          } else {\r\n            // In secure mode, if we haven't called allow or deny, then nothing\r\n            // is permitted.\r\n            throw new Meteor.Error(403, \"Access denied\");\r\n          }\r\n        } catch (e) {\r\n          if (e.name === 'MongoError' || e.name === 'MinimongoError') {\r\n            throw new Meteor.Error(409, e.toString());\r\n          } else {\r\n            throw e;\r\n          }\r\n        }\r\n      };\r\n    });\r\n    // Minimongo on the server gets no stubs; instead, by default\r\n    // it wait()s until its result is ready, yielding.\r\n    // This matches the behavior of macromongo on the server better.\r\n    if (Meteor.isClient || self._connection === Meteor.server)\r\n      self._connection.methods(m);\r\n  }\r\n};\r\n\r\n\r\nMeteor.Collection.prototype._updateFetch = function (fields) {\r\n  var self = this;\r\n\r\n  if (!self._validators.fetchAllFields) {\r\n    if (fields) {\r\n      self._validators.fetch = _.union(self._validators.fetch, fields);\r\n    } else {\r\n      self._validators.fetchAllFields = true;\r\n      // clear fetch just to make sure we don't accidentally read it\r\n      self._validators.fetch = null;\r\n    }\r\n  }\r\n};\r\n\r\nMeteor.Collection.prototype._isInsecure = function () {\r\n  var self = this;\r\n  if (self._insecure === undefined)\r\n    return !!Package.insecure;\r\n  return self._insecure;\r\n};\r\n\r\nvar docToValidate = function (validator, doc) {\r\n  var ret = doc;\r\n  if (validator.transform)\r\n    ret = validator.transform(EJSON.clone(doc));\r\n  return ret;\r\n};\r\n\r\nMeteor.Collection.prototype._validatedInsert = function(userId, doc) {\r\n  var self = this;\r\n\r\n  // call user validators.\r\n  // Any deny returns true means denied.\r\n  if (_.any(self._validators.insert.deny, function(validator) {\r\n    return validator(userId, docToValidate(validator, doc));\r\n  })) {\r\n    throw new Meteor.Error(403, \"Access denied\");\r\n  }\r\n  // Any allow returns true means proceed. Throw error if they all fail.\r\n  if (_.all(self._validators.insert.allow, function(validator) {\r\n    return !validator(userId, docToValidate(validator, doc));\r\n  })) {\r\n    throw new Meteor.Error(403, \"Access denied\");\r\n  }\r\n\r\n  self._collection.insert.call(self._collection, doc);\r\n};\r\n\r\nvar transformDoc = function (validator, doc) {\r\n  if (validator.transform)\r\n    return validator.transform(doc);\r\n  return doc;\r\n};\r\n\r\n// Simulate a mongo `update` operation while validating that the access\r\n// control rules set by calls to `allow/deny` are satisfied. If all\r\n// pass, rewrite the mongo operation to use $in to set the list of\r\n// document ids to change ##ValidatedChange\r\nMeteor.Collection.prototype._validatedUpdate = function(\r\n    userId, selector, mutator, options) {\r\n  var self = this;\r\n\r\n  options = options || {};\r\n\r\n  if (!LocalCollection._selectorIsIdPerhapsAsObject(selector))\r\n    throw new Error(\"validated update should be of a single ID\");\r\n\r\n  // We don't support upserts because they don't fit nicely into allow/deny\r\n  // rules.\r\n  if (options.upsert)\r\n    throw new Meteor.Error(403, \"Access denied. Upserts not \" +\r\n                           \"allowed in a restricted collection.\");\r\n\r\n  // compute modified fields\r\n  var fields = [];\r\n  _.each(mutator, function (params, op) {\r\n    if (op.charAt(0) !== '$') {\r\n      throw new Meteor.Error(\r\n        403, \"Access denied. In a restricted collection you can only update documents, not replace them. Use a Mongo update operator, such as '$set'.\");\r\n    } else if (!_.has(ALLOWED_UPDATE_OPERATIONS, op)) {\r\n      throw new Meteor.Error(\r\n        403, \"Access denied. Operator \" + op + \" not allowed in a restricted collection.\");\r\n    } else {\r\n      _.each(_.keys(params), function (field) {\r\n        // treat dotted fields as if they are replacing their\r\n        // top-level part\r\n        if (field.indexOf('.') !== -1)\r\n          field = field.substring(0, field.indexOf('.'));\r\n\r\n        // record the field we are trying to change\r\n        if (!_.contains(fields, field))\r\n          fields.push(field);\r\n      });\r\n    }\r\n  });\r\n\r\n  var findOptions = {transform: null};\r\n  if (!self._validators.fetchAllFields) {\r\n    findOptions.fields = {};\r\n    _.each(self._validators.fetch, function(fieldName) {\r\n      findOptions.fields[fieldName] = 1;\r\n    });\r\n  }\r\n\r\n  var doc = self._collection.findOne(selector, findOptions);\r\n  if (!doc)  // none satisfied!\r\n    return;\r\n\r\n  var factoriedDoc;\r\n\r\n  // call user validators.\r\n  // Any deny returns true means denied.\r\n  if (_.any(self._validators.update.deny, function(validator) {\r\n    if (!factoriedDoc)\r\n      factoriedDoc = transformDoc(validator, doc);\r\n    return validator(userId,\r\n                     factoriedDoc,\r\n                     fields,\r\n                     mutator);\r\n  })) {\r\n    throw new Meteor.Error(403, \"Access denied\");\r\n  }\r\n  // Any allow returns true means proceed. Throw error if they all fail.\r\n  if (_.all(self._validators.update.allow, function(validator) {\r\n    if (!factoriedDoc)\r\n      factoriedDoc = transformDoc(validator, doc);\r\n    return !validator(userId,\r\n                      factoriedDoc,\r\n                      fields,\r\n                      mutator);\r\n  })) {\r\n    throw new Meteor.Error(403, \"Access denied\");\r\n  }\r\n\r\n  // Back when we supported arbitrary client-provided selectors, we actually\r\n  // rewrote the selector to include an _id clause before passing to Mongo to\r\n  // avoid races, but since selector is guaranteed to already just be an ID, we\r\n  // don't have to any more.\r\n\r\n  self._collection.update.call(\r\n    self._collection, selector, mutator, options);\r\n};\r\n\r\n// Only allow these operations in validated updates. Specifically\r\n// whitelist operations, rather than blacklist, so new complex\r\n// operations that are added aren't automatically allowed. A complex\r\n// operation is one that does more than just modify its target\r\n// field. For now this contains all update operations except '$rename'.\r\n// http://docs.mongodb.org/manual/reference/operators/#update\r\nvar ALLOWED_UPDATE_OPERATIONS = {\r\n  $inc:1, $set:1, $unset:1, $addToSet:1, $pop:1, $pullAll:1, $pull:1,\r\n  $pushAll:1, $push:1, $bit:1\r\n};\r\n\r\n// Simulate a mongo `remove` operation while validating access control\r\n// rules. See #ValidatedChange\r\nMeteor.Collection.prototype._validatedRemove = function(userId, selector) {\r\n  var self = this;\r\n\r\n  var findOptions = {transform: null};\r\n  if (!self._validators.fetchAllFields) {\r\n    findOptions.fields = {};\r\n    _.each(self._validators.fetch, function(fieldName) {\r\n      findOptions.fields[fieldName] = 1;\r\n    });\r\n  }\r\n\r\n  var doc = self._collection.findOne(selector, findOptions);\r\n  if (!doc)\r\n    return;\r\n\r\n  // call user validators.\r\n  // Any deny returns true means denied.\r\n  if (_.any(self._validators.remove.deny, function(validator) {\r\n    return validator(userId, transformDoc(validator, doc));\r\n  })) {\r\n    throw new Meteor.Error(403, \"Access denied\");\r\n  }\r\n  // Any allow returns true means proceed. Throw error if they all fail.\r\n  if (_.all(self._validators.remove.allow, function(validator) {\r\n    return !validator(userId, transformDoc(validator, doc));\r\n  })) {\r\n    throw new Meteor.Error(403, \"Access denied\");\r\n  }\r\n\r\n  // Back when we supported arbitrary client-provided selectors, we actually\r\n  // rewrote the selector to {_id: {$in: [ids that we found]}} before passing to\r\n  // Mongo to avoid races, but since selector is guaranteed to already just be\r\n  // an ID, we don't have to any more.\r\n\r\n  self._collection.remove.call(self._collection, selector);\r\n};\r\n"]}