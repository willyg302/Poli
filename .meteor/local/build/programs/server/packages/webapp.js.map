{"version":3,"file":"\\packages\\webapp.js","sources":["webapp/webapp_server.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,8B;;AAEA,2B;AACA,+B;AACA,2B;AACA,+B;AACA,6B;AACA,mC;;AAEA,qC;AACA,uC;AACA,yC;AACA,+B;;AAEA,Y;AACA,qB;;AAEA,oE;AACA,sE;AACA,Y;AACA,6E;AACA,qE;;AAEA,iC;AACA,yB;;AAEA,4C;AACA,uB;AACA,K;;AAEA,yB;;AAEA,2B;AACA,sB;AACA,8B;AACA,2D;AACA,sB;AACA,K;AACA,W;AACA,E;;;AAGA,gC;AACA,uC;AACA,wB;AACA,4B;AACA,E;;AAEA,yB;AACA,E;AACA,iE;AACA,kE;AACA,+C;AACA,E;AACA,wE;AACA,+D;AACA,sE;AACA,kE;AACA,W;AACA,E;AACA,kD;AACA,uE;AACA,E;AACA,uE;AACA,iE;AACA,gE;AACA,E;AACA,6D;AACA,qD;AACA,E;AACA,8E;AACA,8E;AACA,8E;AACA,sB;AACA,E;AACA,uE;AACA,qE;AACA,8C;AACA,E;AACA,mE;AACA,W;;;AAGA,yC;AACA,iC;AACA,8B;AACA,oC;AACA,4C;AACA,qE;AACA,G;AACA,wB;AACA,E;;AAEA,sC;AACA,8D;AACA,U;AACA,sC;AACA,4B;AACA,4B;AACA,2B;AACA,I;AACA,E;;AAEA,2C;AACA,U;AACA,kC;AACA,iC;AACA,I;AACA,E;;AAEA,8E;AACA,gF;AACA,sD;AACA,4B;AACA,mD;AACA,sB;AACA,oD;AACA,kC;AACA,0E;AACA,oC;AACA,K;AACA,6D;AACA,E;AACA,+C;AACA,gC;AACA,E;;AAEA,+B;AACA,6B;AACA,sD;AACA,iB;;AAEA,kE;AACA,kE;AACA,oE;AACA,oE;AACA,8D;AACA,kD;AACA,8B;AACA,iB;;AAEA,iE;AACA,gC;AACA,iB;;AAEA,wD;AACA,c;AACA,E;;AAEA,mC;AACA,wD;AACA,gE;AACA,yE;AACA,+C;AACA,uE;;AAEA,mD;AACA,8D;AACA,uD;;AAEA,c;AACA,sB;;AAEA,6C;AACA,8C;AACA,oE;AACA,oD;AACA,gC;AACA,6E;AACA,+D;AACA,gF;AACA,4C;AACA,mF;AACA,6D;AACA,a;AACA,2E;AACA,a;AACA,4B;AACA,8B;AACA,qC;AACA,qB;AACA,Y;AACA,a;AACA,K;AACA,K;AACA,0E;AACA,6B;AACA,2B;;AAEA,iD;AACA,8B;;AAEA,4C;AACA,2D;AACA,I;;AAEA,uB;AACA,+C;AACA,8C;AACA,gD;AACA,wB;AACA,kC;AACA,sC;AACA,uC;AACA,Q;;AAEA,2B;AACA,2E;AACA,qC;AACA,2D;AACA,+B;AACA,yB;AACA,U;AACA,O;AACA,K;AACA,K;;AAEA,0C;AACA,iD;AACA,qC;AACA,sD;AACA,a;AACA,a;AACA,K;AACA,wD;;AAEA,S;AACA,8C;AACA,iB;AACA,a;AACA,a;AACA,K;;AAEA,gE;AACA,mD;AACA,+B;AACA,qD;AACA,8E;AACA,uE;AACA,gD;AACA,iE;AACA,gB;AACA,a;AACA,K;;AAEA,wC;AACA,a;AACA,a;AACA,K;;AAEA,8E;AACA,6E;AACA,c;;AAEA,qC;;AAEA,oE;AACA,gE;AACA,oC;AACA,M;AACA,+E;AACA,gF;AACA,oE;AACA,gF;AACA,4E;AACA,4E;AACA,kD;AACA,+B;AACA,qC;AACA,gC;;AAEA,oE;AACA,yE;AACA,sC;AACA,M;AACA,+E;AACA,+C;AACA,M;AACA,2E;AACA,c;AACA,kE;AACA,kE;AACA,kI;AACA,oE;AACA,uE;AACA,qE;AACA,8D;AACA,iE;AACA,sE;AACA,+D;AACA,M;AACA,2E;AACA,4E;AACA,M;AACA,8E;AACA,8C;AACA,4D;AACA,2E;AACA,wD;AACA,0B;AACA,sD;;AAEA,8C;AACA,qB;AACA,2E;AACA,mC;AACA,sD;AACA,2B;AACA,kB;AACA,Q;AACA,oC;AACA,uD;AACA,2B;AACA,kB;AACA,Q;AACA,iB;AACA,K;;AAEA,2E;AACA,kD;AACA,wC;AACA,iC;;AAEA,oC;AACA,+E;AACA,+E;AACA,mC;AACA,0C;AACA,6E;AACA,gB;AACA,a;AACA,K;AACA,gE;AACA,gC;AACA,K;;AAEA,8C;AACA,6B;AACA,qC;AACA,0B;AACA,oB;;AAEA,yB;AACA,yE;;AAEA,gD;;AAEA,qE;;AAEA,uE;AACA,mC;AACA,c;AACA,qB;AACA,K;;AAEA,gE;AACA,+B;AACA,uB;AACA,c;AACA,K;;;AAGA,0C;AACA,gC;;AAEA,iB;AACA,oB;AACA,2C;AACA,2B;AACA,sD;AACA,oB;AACA,mC;AACA,8E;AACA,oB;AACA,M;AACA,mB;AACA,wC;AACA,mC;AACA,M;AACA,+B;AACA,+B;AACA,qC;AACA,U;AACA,Y;AACA,M;AACA,2E;AACA,8E;AACA,6D;AACA,oC;AACA,K;;AAEA,2E;AACA,gF;AACA,2B;AACA,0B;AACA,8E;AACA,8D;AACA,mE;AACA,oD;;AAEA,oE;AACA,mE;;AAEA,gF;AACA,iC;AACA,gE;AACA,iC;AACA,uD;AACA,4E;AACA,gD;AACA,+B;AACA,uE;AACA,oE;AACA,Y;AACA,gD;AACA,6B;AACA,0G;AACA,Q;AACA,K;AACA,8C;AACA,oC;AACA,4D;;AAEA,+D;AACA,oD;AACA,mC;AACA,oC;AACA,6E;AACA,iC;AACA,sD;AACA,2C;AACA,uB;;AAEA,qE;AACA,yB;AACA,8B;AACA,mD;AACA,wH;AACA,+C;AACA,4B;AACA,0C;AACA,6B;AACA,oC;AACA,qC;AACA,wC;AACA,8D;AACA,kB;AACA,sB;AACA,gD;;AAEA,e;AACA,oF;AACA,oD;AACA,2D;AACA,6B;AACA,a;AACA,a;AACA,S;AACA,S;;AAEA,2C;AACA,kC;AACA,+C;;AAEA,qB;AACA,2C;AACA,6B;AACA,Q;;AAEA,uB;AACA,sB;AACA,oB;AACA,I;AACA,E;;AAEA,sD;AACA,kD;AACA,sD;AACA,wD;AACA,yC;AACA,iC;AACA,6C;AACA,4B;AACA,wC;AACA,8B;AACA,2C;AACA,8B;AACA,2C;AACA,8B;AACA,2C;;AAEA,uC;AACA,a;AACA,gC;AACA,wC;AACA,+B;AACA,I;AACA,6B;;AAEA,mB;AACA,sF;AACA,8B;AACA,I;;AAEA,kE;AACA,iB;AACA,qD;AACA,gC;AACA,iC;AACA,kC;;AAEA,2B;AACA,e;AACA,gB;AACA,8D;AACA,I;;AAEA,gD;AACA,iC;AACA,c;AACA,kB;;AAEA,wC;AACA,gF;AACA,6C;AACA,oD;AACA,S;AACA,uB;AACA,+B;AACA,0B;AACA,M;AACA,I;;AAEA,yB;AACA,a;AACA,sB;AACA,c;AACA,iB;AACA,iB;AACA,+C;AACA,K;AACA,iC;AACA,0B;AACA,a;AACA,a;AACA,iC;AACA,yB;AACA,gC;AACA,M;AACA,c;AACA,iB;AACA,iB;AACA,gC;AACA,K;AACA,kC;AACA,wC;AACA,4B;AACA,e;AACA,e;AACA,mC;AACA,yB;AACA,mC;AACA,iB;AACA,Q;AACA,gB;AACA,mB;AACA,mB;AACA,kC;AACA,O;AACA,qC;AACA,G;AACA,E;;AAEA,kB","sourcesContent":["////////// Requires //////////\r\n\r\nvar fs = Npm.require(\"fs\");\r\nvar http = Npm.require(\"http\");\r\nvar os = Npm.require(\"os\");\r\nvar path = Npm.require(\"path\");\r\nvar url = Npm.require(\"url\");\r\nvar crypto = Npm.require(\"crypto\");\r\n\r\nvar connect = Npm.require('connect');\r\nvar optimist = Npm.require('optimist');\r\nvar useragent = Npm.require('useragent');\r\nvar send = Npm.require('send');\r\n\r\nWebApp = {};\r\nWebAppInternals = {};\r\n\r\n// Keepalives so that when the outer server dies unceremoniously and\r\n// doesn't kill us, we quit ourselves. A little gross, but better than\r\n// pidfiles.\r\n// XXX This should really be part of the boot script, not the webapp package.\r\n//     Or we should just get rid of it, and rely on containerization.\r\n\r\nvar initKeepalive = function () {\r\n  var keepaliveCount = 0;\r\n\r\n  process.stdin.on('data', function (data) {\r\n    keepaliveCount = 0;\r\n  });\r\n\r\n  process.stdin.resume();\r\n\r\n  setInterval(function () {\r\n    keepaliveCount ++;\r\n    if (keepaliveCount >= 3) {\r\n      console.log(\"Failed to receive keepalive! Exiting.\");\r\n      process.exit(1);\r\n    }\r\n  }, 3000);\r\n};\r\n\r\n\r\nvar sha1 = function (contents) {\r\n  var hash = crypto.createHash('sha1');\r\n  hash.update(contents);\r\n  return hash.digest('hex');\r\n};\r\n\r\n// #BrowserIdentification\r\n//\r\n// We have multiple places that want to identify the browser: the\r\n// unsupported browser page, the appcache package, and, eventually\r\n// delivering browser polyfills only as needed.\r\n//\r\n// To avoid detecting the browser in multiple places ad-hoc, we create a\r\n// Meteor \"browser\" object. It uses but does not expose the npm\r\n// useragent module (we could choose a different mechanism to identify\r\n// the browser in the future if we wanted to).  The browser object\r\n// contains\r\n//\r\n// * `name`: the name of the browser in camel case\r\n// * `major`, `minor`, `patch`: integers describing the browser version\r\n//\r\n// Also here is an early version of a Meteor `request` object, intended\r\n// to be a high-level description of the request without exposing\r\n// details of connect's low-level `req`.  Currently it contains:\r\n//\r\n// * `browser`: browser identification object described above\r\n// * `url`: parsed url, including parsed query params\r\n//\r\n// As a temporary hack there is a `categorizeRequest` function on WebApp which\r\n// converts a connect `req` to a Meteor `request`. This can go away once smart\r\n// packages such as appcache are being passed a `request` object directly when\r\n// they serve content.\r\n//\r\n// This allows `request` to be used uniformly: it is passed to the html\r\n// attributes hook, and the appcache package can use it when deciding\r\n// whether to generate a 404 for the manifest.\r\n//\r\n// Real routing / server side rendering will probably refactor this\r\n// heavily.\r\n\r\n\r\n// e.g. \"Mobile Safari\" => \"mobileSafari\"\r\nvar camelCase = function (name) {\r\n  var parts = name.split(' ');\r\n  parts[0] = parts[0].toLowerCase();\r\n  for (var i = 1;  i < parts.length;  ++i) {\r\n    parts[i] = parts[i].charAt(0).toUpperCase() + parts[i].substr(1);\r\n  }\r\n  return parts.join('');\r\n};\r\n\r\nvar identifyBrowser = function (req) {\r\n  var userAgent = useragent.lookup(req.headers['user-agent']);\r\n  return {\r\n    name: camelCase(userAgent.family),\r\n    major: +userAgent.major,\r\n    minor: +userAgent.minor,\r\n    patch: +userAgent.patch\r\n  };\r\n};\r\n\r\nWebApp.categorizeRequest = function (req) {\r\n  return {\r\n    browser: identifyBrowser(req),\r\n    url: url.parse(req.url, true)\r\n  };\r\n};\r\n\r\n// HTML attribute hooks: functions to be called to determine any attributes to\r\n// be added to the '<html>' tag. Each function is passed a 'request' object (see\r\n// #BrowserIdentification) and should return a string,\r\nvar htmlAttributeHooks = [];\r\nvar htmlAttributes = function (template, request) {\r\n  var attributes = '';\r\n  _.each(htmlAttributeHooks || [], function (hook) {\r\n    var attribute = hook(request);\r\n    if (attribute !== null && attribute !== undefined && attribute !== '')\r\n      attributes += ' ' + attribute;\r\n  });\r\n  return template.replace('##HTML_ATTRIBUTES##', attributes);\r\n};\r\nWebApp.addHtmlAttributeHook = function (hook) {\r\n  htmlAttributeHooks.push(hook);\r\n};\r\n\r\n// Serve app HTML for this URL?\r\nvar appUrl = function (url) {\r\n  if (url === '/favicon.ico' || url === '/robots.txt')\r\n    return false;\r\n\r\n  // NOTE: app.manifest is not a web standard like favicon.ico and\r\n  // robots.txt. It is a file name we have chosen to use for HTML5\r\n  // appcache URLs. It is included here to prevent using an appcache\r\n  // then removing it from poisoning an app permanently. Eventually,\r\n  // once we have server side routing, this won't be needed as\r\n  // unknown URLs with return a 404 automatically.\r\n  if (url === '/app.manifest')\r\n    return false;\r\n\r\n  // Avoid serving app HTML for declared routes such as /sockjs/.\r\n  if (RoutePolicy.classify(url))\r\n    return false;\r\n\r\n  // we currently return app HTML on all URLs by default\r\n  return true;\r\n};\r\n\r\nvar runWebAppServer = function () {\r\n  // read the control for the client we'll be serving up\r\n  var clientJsonPath = path.join(__meteor_bootstrap__.serverDir,\r\n                                 __meteor_bootstrap__.configJson.client);\r\n  var clientDir = path.dirname(clientJsonPath);\r\n  var clientJson = JSON.parse(fs.readFileSync(clientJsonPath, 'utf8'));\r\n\r\n  if (clientJson.format !== \"browser-program-pre1\")\r\n    throw new Error(\"Unsupported format for client assets: \" +\r\n                    JSON.stringify(clientJson.format));\r\n\r\n  // webserver\r\n  var app = connect();\r\n\r\n  // Strip off the path prefix, if it exists.\r\n  app.use(function (request, response, next) {\r\n    var pathPrefix = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX;\r\n    var url = Npm.require('url').parse(request.url);\r\n    var pathname = url.pathname;\r\n    // check if the path in the url starts with the path prefix (and the part\r\n    // after the path prefix must start with a / if it exists.)\r\n    if (pathPrefix && pathname.substring(0, pathPrefix.length) === pathPrefix &&\r\n       (pathname.length == pathPrefix.length\r\n        || pathname.substring(pathPrefix.length, pathPrefix.length + 1) === \"/\")) {\r\n      request.url = request.url.substring(pathPrefix.length);\r\n      next();\r\n    } else if (pathname === \"/favicon.ico\" || pathname === \"/robots.txt\") {\r\n      next();\r\n    } else if (pathPrefix) {\r\n      response.writeHead(404);\r\n      response.write(\"Unknown path\");\r\n      response.end();\r\n    } else {\r\n      next();\r\n    }\r\n  });\r\n  // Parse the query string into res.query. Used by oauth_server, but it's\r\n  // generally pretty handy..\r\n  app.use(connect.query());\r\n\r\n  // Auto-compress any json, javascript, or text.\r\n  app.use(connect.compress());\r\n\r\n  var getItemPathname = function (itemUrl) {\r\n    return decodeURIComponent(url.parse(itemUrl).pathname);\r\n  };\r\n\r\n  var staticFiles = {};\r\n  _.each(clientJson.manifest, function (item) {\r\n    if (item.url && item.where === \"client\") {\r\n      staticFiles[getItemPathname(item.url)] = {\r\n        path: item.path,\r\n        cacheable: item.cacheable,\r\n        // Link from source to its map\r\n        sourceMapUrl: item.sourceMapUrl\r\n      };\r\n\r\n      if (item.sourceMap) {\r\n        // Serve the source map too, under the specified URL. We assume all\r\n        // source maps are cacheable.\r\n        staticFiles[getItemPathname(item.sourceMapUrl)] = {\r\n          path: item.sourceMap,\r\n          cacheable: true\r\n        };\r\n      }\r\n    }\r\n  });\r\n\r\n  // Serve static files from the manifest.\r\n  // This is inspired by the 'static' middleware.\r\n  app.use(function (req, res, next) {\r\n    if ('GET' != req.method && 'HEAD' != req.method) {\r\n      next();\r\n      return;\r\n    }\r\n    var pathname = connect.utils.parseUrl(req).pathname;\r\n\r\n    try {\r\n      pathname = decodeURIComponent(pathname);\r\n    } catch (e) {\r\n      next();\r\n      return;\r\n    }\r\n\r\n    var browserPolicyPackage = Package[\"browser-policy-common\"];\r\n    if (pathname === \"/meteor_runtime_config.js\" &&\r\n        browserPolicyPackage &&\r\n        browserPolicyPackage.BrowserPolicy.content &&\r\n        ! browserPolicyPackage.BrowserPolicy.content.inlineScriptsAllowed()) {\r\n      res.writeHead(200, { 'Content-type': 'application/javascript' });\r\n      res.write(\"__meteor_runtime_config__ = \" +\r\n                JSON.stringify(__meteor_runtime_config__) + \";\");\r\n      res.end();\r\n      return;\r\n    }\r\n\r\n    if (!_.has(staticFiles, pathname)) {\r\n      next();\r\n      return;\r\n    }\r\n\r\n    // We don't need to call pause because, unlike 'static', once we call into\r\n    // 'send' and yield to the event loop, we never call another handler with\r\n    // 'next'.\r\n\r\n    var info = staticFiles[pathname];\r\n\r\n    // Cacheable files are files that should never change. Typically\r\n    // named by their hash (eg meteor bundled js and css files).\r\n    // We cache them ~forever (1yr).\r\n    //\r\n    // We cache non-cacheable files anyway. This isn't really correct, as users\r\n    // can change the files and changes won't propagate immediately. However, if\r\n    // we don't cache them, browsers will 'flicker' when rerendering\r\n    // images. Eventually we will probably want to rewrite URLs of static assets\r\n    // to include a query parameter to bust caches. That way we can both get\r\n    // good caching behavior and allow users to change assets without delay.\r\n    // https://github.com/meteor/meteor/issues/773\r\n    var maxAge = info.cacheable\r\n          ? 1000 * 60 * 60 * 24 * 365\r\n          : 1000 * 60 * 60 * 24;\r\n\r\n    // Set the X-SourceMap header, which current Chrome understands.\r\n    // (The files also contain '//#' comments which FF 24 understands and\r\n    // Chrome doesn't understand yet.)\r\n    //\r\n    // Eventually we should set the SourceMap header but the current version of\r\n    // Chrome and no version of FF supports it.\r\n    //\r\n    // To figure out if your version of Chrome should support the SourceMap\r\n    // header,\r\n    //   - go to chrome://version. Let's say the Chrome version is\r\n    //      28.0.1500.71 and the Blink version is 537.36 (@153022)\r\n    //   - go to http://src.chromium.org/viewvc/blink/branches/chromium/1500/Source/core/inspector/InspectorPageAgent.cpp?view=log\r\n    //     where the \"1500\" is the third part of your Chrome version\r\n    //   - find the first revision that is no greater than the \"153022\"\r\n    //     number.  That's probably the first one and it probably has\r\n    //     a message of the form \"Branch 1500 - blink@r149738\"\r\n    //   - If *that* revision number (149738) is at least 151755,\r\n    //     then Chrome should support SourceMap (not just X-SourceMap)\r\n    // (The change is https://codereview.chromium.org/15832007)\r\n    //\r\n    // You also need to enable source maps in Chrome: open dev tools, click\r\n    // the gear in the bottom right corner, and select \"enable source maps\".\r\n    //\r\n    // Firefox 23+ supports source maps but doesn't support either header yet,\r\n    // so we include the '//#' comment for it:\r\n    //   https://bugzilla.mozilla.org/show_bug.cgi?id=765993\r\n    // In FF 23 you need to turn on `devtools.debugger.source-maps-enabled`\r\n    // in `about:config` (it is on by default in FF 24).\r\n    if (info.sourceMapUrl)\r\n      res.setHeader('X-SourceMap', info.sourceMapUrl);\r\n\r\n    send(req, path.join(clientDir, info.path))\r\n      .maxage(maxAge)\r\n      .hidden(true)  // if we specified a dotfile in the manifest, serve it\r\n      .on('error', function (err) {\r\n        Log.error(\"Error serving static file \" + err);\r\n        res.writeHead(500);\r\n        res.end();\r\n      })\r\n      .on('directory', function () {\r\n        Log.error(\"Unexpected directory \" + info.path);\r\n        res.writeHead(500);\r\n        res.end();\r\n      })\r\n      .pipe(res);\r\n  });\r\n\r\n  // Packages and apps can add handlers to this via WebApp.connectHandlers.\r\n  // They are inserted before our default handler.\r\n  var packageAndAppHandlers = connect();\r\n  app.use(packageAndAppHandlers);\r\n\r\n  var suppressConnectErrors = false;\r\n  // connect knows it is an error handler because it has 4 arguments instead of\r\n  // 3. go figure.  (It is not smart enough to find such a thing if it's hidden\r\n  // inside packageAndAppHandlers.)\r\n  app.use(function (err, req, res, next) {\r\n    if (!err || !suppressConnectErrors || !req.headers['x-suppress-error']) {\r\n      next(err);\r\n      return;\r\n    }\r\n    res.writeHead(err.status, { 'Content-Type': 'text/plain' });\r\n    res.end(\"An error message\");\r\n  });\r\n\r\n  // Will be updated by main before we listen.\r\n  var boilerplateHtml = null;\r\n  app.use(function (req, res, next) {\r\n    if (! appUrl(req.url))\r\n      return next();\r\n\r\n    if (!boilerplateHtml)\r\n      throw new Error(\"boilerplateHtml should be set before listening!\");\r\n\r\n    var request = WebApp.categorizeRequest(req);\r\n\r\n    res.writeHead(200, {'Content-Type': 'text/html; charset=utf-8'});\r\n\r\n    var requestSpecificHtml = htmlAttributes(boilerplateHtml, request);\r\n    res.write(requestSpecificHtml);\r\n    res.end();\r\n    return undefined;\r\n  });\r\n\r\n  // Return 404 by default, if no other handlers serve this URL.\r\n  app.use(function (req, res) {\r\n    res.writeHead(404);\r\n    res.end();\r\n  });\r\n\r\n\r\n  var httpServer = http.createServer(app);\r\n  var onListeningCallbacks = [];\r\n\r\n  // start up app\r\n  _.extend(WebApp, {\r\n    connectHandlers: packageAndAppHandlers,\r\n    httpServer: httpServer,\r\n    // metadata about the client program that we serve\r\n    clientProgram: {\r\n      manifest: clientJson.manifest\r\n      // XXX do we need a \"root: clientDir\" field here? it used to be here but\r\n      // was unused.\r\n    },\r\n    // For testing.\r\n    suppressConnectErrors: function () {\r\n      suppressConnectErrors = true;\r\n    },\r\n    onListening: function (f) {\r\n      if (onListeningCallbacks)\r\n        onListeningCallbacks.push(f);\r\n      else\r\n        f();\r\n    },\r\n    // Hack: allow http tests to call connect.basicAuth without making them\r\n    // Npm.depends on another copy of connect. (That would be fine if we could\r\n    // have test-only NPM dependencies but is overkill here.)\r\n    __basicAuth__: connect.basicAuth\r\n  });\r\n\r\n  // Let the rest of the packages (and Meteor.startup hooks) insert connect\r\n  // middlewares and update __meteor_runtime_config__, then keep going to set up\r\n  // actually serving HTML.\r\n  main = function (argv) {\r\n    // main happens post startup hooks, so we don't need a Meteor.startup() to\r\n    // ensure this happens after the galaxy package is loaded.\r\n    var AppConfig = Package[\"application-configuration\"].AppConfig;\r\n    argv = optimist(argv).boolean('keepalive').argv;\r\n\r\n    var boilerplateHtmlPath = path.join(clientDir, clientJson.page);\r\n    boilerplateHtml = fs.readFileSync(boilerplateHtmlPath, 'utf8');\r\n\r\n    // Include __meteor_runtime_config__ in the app html, as an inline script if\r\n    // it's not forbidden by CSP.\r\n    var browserPolicyPackage = Package[\"browser-policy-common\"];\r\n    if (! browserPolicyPackage ||\r\n        ! browserPolicyPackage.BrowserPolicy.content ||\r\n        browserPolicyPackage.BrowserPolicy.content.inlineScriptsAllowed()) {\r\n      boilerplateHtml = boilerplateHtml.replace(\r\n          /##RUNTIME_CONFIG##/,\r\n        \"<script type='text/javascript'>__meteor_runtime_config__ = \" +\r\n          JSON.stringify(__meteor_runtime_config__) + \";</script>\");\r\n    } else {\r\n      boilerplateHtml = boilerplateHtml.replace(\r\n        /##RUNTIME_CONFIG##/,\r\n        \"<script type='text/javascript' src='##ROOT_URL_PATH_PREFIX##/meteor_runtime_config.js'></script>\"\r\n      );\r\n    }\r\n    boilerplateHtml = boilerplateHtml.replace(\r\n        /##ROOT_URL_PATH_PREFIX##/g,\r\n      __meteor_runtime_config__.ROOT_URL_PATH_PREFIX || \"\");\r\n\r\n    // only start listening after all the startup code has run.\r\n    var localPort = parseInt(process.env.PORT) || 0;\r\n    var host = process.env.BIND_IP;\r\n    var localIp = host || '0.0.0.0';\r\n    httpServer.listen(localPort, localIp, Meteor.bindEnvironment(function() {\r\n      if (argv.keepalive || true)\r\n        console.log(\"LISTENING\"); // must match run.js\r\n      var port = httpServer.address().port;\r\n      var proxyBinding;\r\n\r\n      AppConfig.configurePackage('webapp', function (configuration) {\r\n        if (proxyBinding)\r\n          proxyBinding.stop();\r\n        if (configuration && configuration.proxy) {\r\n          proxyBinding = AppConfig.configureService(configuration.proxyServiceName || \"proxy\", function (proxyService) {\r\n            if (proxyService.providers.proxy) {\r\n              var proxyConf;\r\n              if (process.env.ADMIN_APP) {\r\n                proxyConf = {\r\n                  securePort: 44333,\r\n                  insecurePort: 9414,\r\n                  bindHost: \"localhost\",\r\n                  bindPathPrefix: \"/\" + process.env.GALAXY_APP\r\n                };\r\n              } else {\r\n                proxyConf = configuration.proxy;\r\n\r\n              }\r\n              Log(\"Attempting to bind to proxy at \" + proxyService.providers.proxy);\r\n              WebAppInternals.bindToProxy(_.extend({\r\n                proxyEndpoint: proxyService.providers.proxy\r\n              }, proxyConf));\r\n            }\r\n          });\r\n        }\r\n      });\r\n\r\n      var callbacks = onListeningCallbacks;\r\n      onListeningCallbacks = null;\r\n      _.each(callbacks, function (x) { x(); });\r\n\r\n    }, function (e) {\r\n      console.error(\"Error listening:\", e);\r\n      console.error(e.stack);\r\n    }));\r\n\r\n    if (argv.keepalive)\r\n      initKeepalive();\r\n    return 'DAEMON';\r\n  };\r\n};\r\n\r\nWebAppInternals.bindToProxy = function (proxyConfig) {\r\n  var securePort = proxyConfig.securePort || 4433;\r\n  var insecurePort = proxyConfig.insecurePort || 8080;\r\n  var bindPathPrefix = proxyConfig.bindPathPrefix || \"\";\r\n  // XXX also support galaxy-based lookup\r\n  if (!proxyConfig.proxyEndpoint)\r\n    throw new Error(\"missing proxyEndpoint\");\r\n  if (!proxyConfig.bindHost)\r\n    throw new Error(\"missing bindHost\");\r\n  if (!process.env.GALAXY_JOB)\r\n    throw new Error(\"missing $GALAXY_JOB\");\r\n  if (!process.env.GALAXY_APP)\r\n    throw new Error(\"missing $GALAXY_APP\");\r\n  if (!process.env.LAST_START)\r\n    throw new Error(\"missing $LAST_START\");\r\n\r\n  // XXX rename pid argument to bindTo.\r\n  var pid = {\r\n    job: process.env.GALAXY_JOB,\r\n    lastStarted: process.env.LAST_START,\r\n    app: process.env.GALAXY_APP\r\n  };\r\n  var myHost = os.hostname();\r\n\r\n  var ddpBindTo = {\r\n    ddpUrl: 'ddp://' + proxyConfig.bindHost + ':' + securePort + bindPathPrefix + '/',\r\n    insecurePort: insecurePort\r\n  };\r\n\r\n  // This is run after packages are loaded (in main) so we can use\r\n  // DDP.connect.\r\n  var proxy = DDP.connect(proxyConfig.proxyEndpoint);\r\n  var route = process.env.ROUTE;\r\n  var host = route.split(\":\")[0];\r\n  var port = +route.split(\":\")[1];\r\n\r\n  var completedBindings = {\r\n    ddp: false,\r\n    http: false,\r\n    https: proxyConfig.securePort !== null ? false : undefined\r\n  };\r\n\r\n  var bindingDoneCallback = function (binding) {\r\n    return function (err, resp) {\r\n      if (err)\r\n        throw err;\r\n\r\n      completedBindings[binding] = true;\r\n      var completedAll = _.every(_.keys(completedBindings), function (binding) {\r\n        return (completedBindings[binding] ||\r\n          completedBindings[binding] === undefined);\r\n      });\r\n      if (completedAll)\r\n        Log(\"Bound to proxy.\");\r\n      return completedAll;\r\n    };\r\n  };\r\n\r\n  proxy.call('bindDdp', {\r\n    pid: pid,\r\n    bindTo: ddpBindTo,\r\n    proxyTo: {\r\n      host: host,\r\n      port: port,\r\n      pathPrefix: bindPathPrefix + '/websocket'\r\n    }\r\n  }, bindingDoneCallback(\"ddp\"));\r\n  proxy.call('bindHttp', {\r\n    pid: pid,\r\n    bindTo: {\r\n      host: proxyConfig.bindHost,\r\n      port: insecurePort,\r\n      pathPrefix: bindPathPrefix\r\n    },\r\n    proxyTo: {\r\n      host: host,\r\n      port: port,\r\n      pathPrefix: bindPathPrefix\r\n    }\r\n  }, bindingDoneCallback(\"http\"));\r\n  if (proxyConfig.securePort !== null) {\r\n    proxy.call('bindHttp', {\r\n      pid: pid,\r\n      bindTo: {\r\n        host: proxyConfig.bindHost,\r\n        port: securePort,\r\n        pathPrefix: bindPathPrefix,\r\n        ssl: true\r\n      },\r\n      proxyTo: {\r\n        host: host,\r\n        port: port,\r\n        pathPrefix: bindPathPrefix\r\n      }\r\n    }, bindingDoneCallback(\"https\"));\r\n  }\r\n};\r\n\r\nrunWebAppServer();\r\n"]}