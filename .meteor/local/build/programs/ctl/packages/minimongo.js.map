{"version":3,"file":"\\packages\\minimongo.js","sources":["minimongo/minimongo.js","minimongo/selector.js","minimongo/modify.js","minimongo/diff.js","minimongo/objectid.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,+D;;AAEA,2E;;AAEA,mE;AACA,sF;;AAEA,oD;;AAEA,mC;AACA,mB;AACA,yD;;AAEA,sD;;AAEA,+C;;AAEA,oC;AACA,uE;AACA,4B;AACA,uE;AACA,gE;AACA,0C;AACA,gD;AACA,oB;;AAEA,8E;AACA,2D;AACA,8B;;AAEA,qE;AACA,sB;AACA,E;;;AAGA,8D;AACA,8C;AACA,4B;AACA,sB;AACA,Q;AACA,uB;AACA,K;AACA,E;;AAEA,yC;AACA,6B;AACA,4B;AACA,W;AACA,E;;;AAGA,kD;AACA,kC;AACA,oB;AACA,oC;AACA,2B;AACA,mE;AACA,wB;AACA,E;AACA,mE;AACA,W;AACA,E;AACA,iE;AACA,iE;AACA,Q;AACA,E;AACA,6D;AACA,oC;AACA,Y;AACA,+D;AACA,oE;AACA,sE;AACA,0C;AACA,6B;AACA,kB;;AAEA,6D;AACA,E;;AAEA,8D;AACA,mE;AACA,kB;AACA,6B;;AAEA,+B;;AAEA,gD;AACA,0B;AACA,8D;AACA,uE;AACA,4B;AACA,U;AACA,uE;AACA,uB;AACA,oC;AACA,kE;;AAEA,iC;AACA,uE;AACA,0D;AACA,oE;AACA,G;AACA,2B;AACA,6B;AACA,+B;;AAEA,kB;AACA,wE;;AAEA,uD;AACA,+D;AACA,M;AACA,wC;;AAEA,8E;AACA,sE;AACA,yB;AACA,sB;;AAEA,+D;AACA,kC;AACA,+E;AACA,E;;AAEA,uD;AACA,kB;AACA,yB;AACA,sB;AACA,E;;AAEA,kE;AACA,6B;AACA,kB;;AAEA,oE;AACA,uE;AACA,8D;AACA,qE;AACA,sE;AACA,qE;AACA,uE;AACA,iB;AACA,0B;AACA,oB;;AAEA,iD;AACA,E;;AAEA,yE;AACA,kB;;AAEA,+B;AACA,gD;;AAEA,oB;AACA,kB;AACA,wB;AACA,oB;AACA,oB;AACA,0B;;AAEA,oD;AACA,4D;AACA,0B;AACA,mC;AACA,wB;AACA,iC;AACA,uD;AACA,sB;AACA,G;AACA,E;;AAEA,6D;AACA,kB;AACA,yB;AACA,E;;AAEA,qE;AACA,kB;AACA,e;AACA,sC;AACA,uD;AACA,K;AACA,a;AACA,E;;AAEA,sD;AACA,kB;AACA,e;AACA,+B;AACA,kB;AACA,K;AACA,a;AACA,E;;AAEA,sD;AACA,kB;;AAEA,oB;AACA,8C;AACA,+D;;AAEA,+B;AACA,gD;;AAEA,gC;AACA,E;;AAEA,kE;AACA,kB;AACA,6B;AACA,gF;AACA,wC;;AAEA,uD;AACA,iE;AACA,E;;AAEA,0D;AACA,+C;AACA,4E;AACA,sD;AACA,gD;AACA,E;;AAEA,2C;AACA,gD;;AAEA,sB;AACA,8B;AACA,mC;AACA,wB;AACA,qD;AACA,0C;AACA,qC;AACA,0B;AACA,8C;AACA,E;AACA,iD;AACA,yB;AACA,uD;AACA,E;AACA,kD;AACA,0C;AACA,E;AACA,mD;AACA,6E;AACA,sE;;AAEA,4C;AACA,+B;AACA,oB;AACA,qE;AACA,I;AACA,sC;AACA,oB;;AAEA,6D;;AAEA,2E;AACA,qE;;AAEA,iE;AACA,iB;AACA,qD;AACA,qC;AACA,6B;AACA,uB;AACA,mB;AACA,6C;AACA,0B;AACA,qC;AACA,M;AACA,Y;;AAEA,2E;AACA,Y;AACA,wB;AACA,uC;AACA,2C;AACA,K;AACA,iD;AACA,+B;AACA,mD;;AAEA,6E;AACA,8E;AACA,kB;AACA,uE;AACA,gC;;AAEA,6E;AACA,Y;AACA,qE;AACA,a;AACA,8B;AACA,kC;AACA,2B;AACA,6B;;AAEA,6D;AACA,mE;AACA,gE;AACA,mB;AACA,S;;AAEA,sC;AACA,+D;AACA,mC;AACA,a;AACA,S;AACA,Q;AACA,M;AACA,iD;AACA,2D;AACA,kD;AACA,kB;AACA,gD;AACA,+D;AACA,4D;AACA,K;;AAEA,gE;AACA,+C;AACA,sC;;AAEA,0B;AACA,oB;AACA,mD;AACA,qC;AACA,S;AACA,K;;AAEA,oD;AACA,sB;AACA,kC;AACA,yB;AACA,0B;AACA,8C;AACA,O;AACA,O;;AAEA,uC;AACA,mE;AACA,6D;AACA,2D;AACA,iE;AACA,6C;AACA,qC;AACA,sB;AACA,S;AACA,K;AACA,oE;AACA,mC;AACA,0C;;AAEA,kB;AACA,G;AACA,G;;AAEA,wE;AACA,E;AACA,gF;AACA,gF;AACA,S;AACA,E;AACA,gF;AACA,gC;AACA,sE;AACA,kB;;AAEA,kC;;AAEA,kC;AACA,yB;AACA,iE;AACA,sE;AACA,Y;AACA,kB;AACA,qB;;AAEA,wD;AACA,+D;AACA,kB;AACA,kC;AACA,U;AACA,gD;AACA,K;AACA,mB;AACA,G;;AAEA,wD;AACA,wC;AACA,uC;AACA,+B;AACA,kB;AACA,0B;AACA,U;AACA,0B;AACA,K;AACA,8C;AACA,mD;AACA,sC;AACA,qB;AACA,G;;AAEA,e;AACA,mB;;AAEA,kB;AACA,8B;;AAEA,iC;AACA,uE;AACA,2C;AACA,E;;AAEA,uE;AACA,oB;AACA,kF;AACA,kB;;AAEA,oB;AACA,gC;AACA,e;AACA,4C;;AAEA,mB;AACA,8B;AACA,wC;AACA,M;AACA,yE;AACA,8B;AACA,kC;AACA,8C;AACA,c;;AAEA,sE;AACA,iC;AACA,G;AACA,E;;AAEA,wE;AACA,2C;AACA,mE;AACA,4C;AACA,6D;AACA,kB;AACA,yB;;AAEA,2B;AACA,4D;AACA,0E;AACA,uE;AACA,oD;AACA,G;AACA,iD;;AAEA,2B;AACA,4D;;AAEA,oC;AACA,sB;;AAEA,8B;AACA,oC;AACA,iC;AACA,kC;AACA,gC;AACA,kD;AACA,qC;AACA,U;AACA,qD;AACA,K;AACA,G;;AAEA,6C;AACA,0B;AACA,2D;AACA,K;AACA,6B;;AAEA,0E;AACA,iB;AACA,e;AACA,8B;AACA,8B;AACA,O;AACA,iB;AACA,E;;AAEA,kE;AACA,kB;AACA,kB;;AAEA,8B;AACA,oE;;AAEA,gD;AACA,oE;AACA,oB;AACA,uC;AACA,mD;AACA,qE;AACA,4B;AACA,kE;AACA,2B;AACA,O;AACA,U;AACA,+B;AACA,8B;AACA,4B;AACA,wB;AACA,O;AACA,K;AACA,G;;AAEA,uB;AACA,2C;AACA,6B;AACA,wC;AACA,gD;AACA,wC;AACA,oD;AACA,uC;AACA,Y;AACA,uD;AACA,O;AACA,O;AACA,4C;AACA,+B;AACA,G;;AAEA,kE;AACA,yC;AACA,yC;AACA,c;AACA,4D;AACA,K;AACA,6C;AACA,kC;AACA,c;AACA,+C;AACA,K;AACA,6B;AACA,6B;AACA,e;AACA,8B;AACA,6B;AACA,O;AACA,gB;AACA,E;;AAEA,kE;AACA,4C;AACA,gF;AACA,kB;AACA,kD;AACA,uB;AACA,mB;AACA,G;AACA,6B;;AAEA,oE;;AAEA,iE;AACA,8E;AACA,8E;AACA,oE;AACA,wB;AACA,gC;AACA,8C;AACA,mE;AACA,6D;AACA,K;AACA,yB;;AAEA,sB;;AAEA,6B;AACA,4B;AACA,0B;AACA,2E;AACA,kC;AACA,qD;AACA,oB;AACA,yB;AACA,c;AACA,K;AACA,G;;AAEA,+C;AACA,kC;AACA,c;AACA,8C;AACA,mE;AACA,K;AACA,6B;;AAEA,4E;AACA,8E;AACA,2B;AACA,iB;AACA,4C;AACA,kE;AACA,+C;AACA,2C;AACA,sC;AACA,qC;AACA,oB;AACA,G;;AAEA,8E;AACA,0E;AACA,sB;AACA,a;AACA,8B;AACA,c;AACA,iC;AACA,M;AACA,iC;AACA,qC;AACA,U;AACA,yB;AACA,G;;AAEA,e;AACA,8B;AACA,6B;AACA,O;AACA,gB;AACA,E;;AAEA,uE;AACA,gF;AACA,W;AACA,gF;AACA,kB;AACA,oD;AACA,uB;AACA,iB;AACA,G;AACA,2D;AACA,iB;AACA,uB;AACA,gB;AACA,E;;AAEA,uD;AACA,8B;AACA,kB;;AAEA,0B;AACA,iC;AACA,kC;AACA,wB;AACA,kD;AACA,Y;AACA,8E;AACA,qC;AACA,gD;AACA,yE;AACA,K;AACA,G;;AAEA,iC;;AAEA,oC;;AAEA,6B;AACA,8B;AACA,qC;AACA,sC;;AAEA,kD;AACA,0E;AACA,8E;AACA,4E;AACA,6E;AACA,8E;AACA,2E;AACA,yB;AACA,0B;AACA,kC;AACA,kC;AACA,qD;AACA,kC;AACA,mD;AACA,iC;AACA,4D;AACA,K;AACA,G;AACA,E;;AAEA,mE;AACA,wD;AACA,E;AACA,kE;AACA,oE;;AAEA,0D;AACA,gC;AACA,oB;AACA,sB;AACA,wB;AACA,+C;AACA,8B;AACA,Y;AACA,kD;AACA,0C;AACA,oC;AACA,e;AACA,wB;AACA,U;AACA,oB;AACA,+C;AACA,K;AACA,iC;AACA,U;AACA,iC;AACA,+D;AACA,G;AACA,E;;AAEA,4D;AACA,sB;AACA,8D;AACA,2B;AACA,+B;AACA,U;AACA,oF;AACA,2B;AACA,6B;AACA,G;AACA,E;;AAEA,mE;AACA,0C;AACA,+D;AACA,uE;AACA,uB;AACA,oC;AACA,4C;AACA,iE;AACA,K;AACA,W;AACA,G;;AAEA,mE;;AAEA,gC;AACA,0C;AACA,oB;AACA,W;;AAEA,oE;AACA,Y;AACA,oC;AACA,oD;AACA,sC;AACA,6B;AACA,wC;AACA,a;AACA,sB;AACA,Q;AACA,kB;AACA,0D;AACA,G;AACA,E;;AAEA,uE;AACA,0E;AACA,wC;AACA,E;AACA,+E;AACA,yE;AACA,gF;AACA,0E;AACA,kE;AACA,kB;AACA,+B;AACA,6D;;AAEA,sB;AACA,sC;AACA,uD;AACA,G;AACA,E;;;AAGA,+D;AACA,qB;AACA,2E;AACA,gD;AACA,iC;AACA,e;AACA,2C;AACA,E;;AAEA,0E;AACA,gB;AACA,8D;AACA,4C;;AAEA,2B;AACA,8C;AACA,oD;AACA,6B;AACA,mC;AACA,Y;AACA,8B;AACA,K;AACA,G;AACA,e;AACA,E;;AAEA,oE;AACA,2B;AACA,sB;AACA,a;AACA,G;;AAEA,6D;AACA,8B;AACA,a;AACA,E;;AAEA,gF;AACA,2E;AACA,8E;AACA,+E;AACA,gF;AACA,yE;AACA,uB;AACA,uD;AACA,kB;AACA,2B;AACA,4E;AACA,4B;AACA,E;AACA,2D;AACA,kB;AACA,4B;AACA,sE;;AAEA,uC;AACA,8B;AACA,mB;AACA,E;;AAEA,8D;AACA,kB;AACA,0C;AACA,4B;AACA,W;AACA,0E;AACA,4E;AACA,6B;AACA,sC;AACA,W;AACA,8C;AACA,E;;AAEA,mE;AACA,+B;AACA,wD;AACA,6B;AACA,kB;AACA,W;;AAEA,sE;AACA,qB;;AAEA,yD;AACA,iC;AACA,kC;;AAEA,wD;AACA,G;AACA,E;;AAEA,6D;AACA,0D;AACA,sE;AACA,+D;AACA,yD;AACA,kB;AACA,yB;AACA,mB;AACA,W;;AAEA,mE;AACA,+D;AACA,sB;;AAEA,iC;AACA,kC;AACA,2E;AACA,wD;AACA,sC;AACA,mE;AACA,kC;AACA,G;AACA,6B;AACA,E;;;AAGA,uB;AACA,8C;AACA,gD;AACA,wB;AACA,sC;AACA,oB;AACA,gB;AACA,6E;AACA,gF;AACA,yF;AACA,qG;AACA,sB;AACA,Y;AACA,uD;AACA,K;AACA,gC;AACA,e;AACA,qD;AACA,4F;AACA,wC;AACA,oC;AACA,G;AACA,E;;;AAGA,uB;AACA,0C;AACA,kB;AACA,c;AACA,0B;AACA,qB;AACA,uC;AACA,wB;AACA,uC;AACA,oC;AACA,sD;AACA,6C;AACA,U;AACA,c;AACA,G;AACA,E;;AAEA,gE;AACA,kB;AACA,gD;AACA,qC;AACA,8B;AACA,M;AACA,sC;AACA,0B;AACA,M;AACA,iD;AACA,+C;AACA,iC;AACA,K;AACA,K;AACA,gB;AACA,E;;AAEA,2E;AACA,wC;AACA,iB;AACA,6C;AACA,2C;AACA,wE;AACA,+C;AACA,4E;AACA,+C;AACA,4E;AACA,+C;AACA,iD;AACA,2F;AACA,M;AACA,6F;AACA,E;;AAEA,qD;AACA,6C;AACA,gB;AACA,iD;AACA,sC;AACA,kC;AACA,mD;AACA,oC;AACA,mB;AACA,wB;AACA,uE;AACA,M;AACA,oC;AACA,mD;AACA,4B;AACA,oC;AACA,sC;AACA,iD;AACA,8F;AACA,M;AACA,4B;AACA,mD;AACA,4B;AACA,yB;AACA,2E;AACA,K;AACA,K;AACA,qB;AACA,gB;AACA,E;;AAEA,mD;AACA,6C;AACA,2D;AACA,iD;AACA,4D;AACA,0D;AACA,yD;AACA,mD;AACA,4D;AACA,mB;AACA,uC;AACA,sC;AACA,gD;AACA,oC;AACA,mB;AACA,uD;AACA,sD;AACA,yD;AACA,8C;AACA,wB;AACA,gC;AACA,sD;AACA,wD;AACA,2C;AACA,qC;AACA,uD;AACA,S;AACA,O;AACA,M;AACA,oC;AACA,6B;AACA,e;AACA,yD;AACA,oC;AACA,sC;AACA,iD;AACA,gC;AACA,oD;AACA,wD;AACA,sD;AACA,qC;AACA,sD;AACA,6C;AACA,O;AACA,M;AACA,wC;AACA,6B;AACA,e;AACA,kF;AACA,4B;AACA,+C;AACA,0C;AACA,8B;AACA,iD;AACA,gE;AACA,0C;AACA,mC;AACA,qD;AACA,O;;AAEA,M;AACA,4B;AACA,6B;AACA,gB;AACA,8B;AACA,gD;AACA,sB;AACA,wE;AACA,6D;AACA,K;AACA,K;AACA,qB;AACA,gB;AACA,E;;AAEA,wD;AACA,0B;AACA,4D;;AAEA,4C;AACA,0D;AACA,oF;;AAEA,oE;AACA,kF;AACA,6E;AACA,gE;AACA,6F;AACA,kC;AACA,qE;;AAEA,yC;AACA,iC;AACA,2B;AACA,uB;AACA,2B;AACA,wD;AACA,uF;AACA,sC;AACA,iC;;AAEA,sD;AACA,+B;AACA,0B;AACA,2C;AACA,8E;AACA,6E;AACA,8E;AACA,2E;AACA,6E;AACA,gF;AACA,2C;AACA,U;AACA,oD;AACA,oD;AACA,mD;AACA,+E;AACA,mD;AACA,yF;AACA,U;AACA,qE;;AAEA,4C;AACA,8D;AACA,4E;AACA,qE;AACA,uE;AACA,O;;AAEA,6B;AACA,O;;AAEA,yC;AACA,K;;AAEA,kD;AACA,4C;AACA,8B;AACA,uB;AACA,mF;;AAEA,gD;AACA,2C;AACA,2B;AACA,e;AACA,6B;AACA,4C;AACA,iC;AACA,+C;AACA,sD;AACA,2B;AACA,4B;AACA,U;AACA,wB;AACA,O;;AAEA,e;AACA,I;;AAEA,yB;AACA,kD;;AAEA,2C;AACA,wB;AACA,4C;AACA,qB;AACA,e;AACA,I;AACA,E;;AAEA,sD;AACA,8C;AACA,sC;AACA,8C;AACA,kD;AACA,mE;AACA,K;AACA,E;;AAEA,+D;AACA,6C;AACA,8C;AACA,yD;AACA,6B;AACA,kD;AACA,qD;AACA,K;AACA,E;;;;;;;;;;;;;;;;;;;;ACjrCA,+E;AACA,U;AACA,4B;AACA,4C;AACA,E;;AAEA,mC;AACA,iB;AACA,uB;AACA,c;AACA,E;;AAEA,uC;AACA,W;AACA,gB;AACA,mC;AACA,E;;AAEA,4C;AACA,oC;AACA,qC;AACA,qD;AACA,0C;AACA,yC;AACA,sD;AACA,iE;AACA,K;AACA,G;AACA,qD;AACA,E;;AAEA,uE;AACA,oD;AACA,6B;AACA,8C;AACA,+C;AACA,S;AACA,M;AACA,G;;AAEA,0E;AACA,mC;AACA,6B;AACA,8C;AACA,mC;AACA,S;AACA,M;AACA,G;;AAEA,wC;AACA,6B;AACA,8B;AACA,qB;AACA,8C;AACA,qC;AACA,S;AACA,M;AACA,G;;AAEA,+E;AACA,+B;AACA,6B;AACA,0B;AACA,qB;AACA,kD;AACA,2D;AACA,S;AACA,M;AACA,G;;AAEA,gD;AACA,oC;AACA,+B;AACA,wD;AACA,4C;AACA,8D;AACA,4C;AACA,uD;AACA,yC;AACA,O;AACA,kC;AACA,oD;AACA,6B;AACA,S;AACA,M;AACA,G;;AAEA,8E;AACA,c;AACA,2B;AACA,4C;AACA,yD;AACA,O;AACA,I;AACA,E;;AAEA,wC;AACA,yB;AACA,oD;AACA,wD;AACA,0D;AACA,uE;AACA,2D;AACA,qC;AACA,uD;AACA,gC;AACA,S;AACA,M;AACA,I;;AAEA,mD;AACA,wD;AACA,0D;AACA,uE;AACA,2D;AACA,qC;AACA,uD;AACA,gC;AACA,S;AACA,M;AACA,I;;AAEA,oD;AACA,wD;AACA,0D;AACA,uE;AACA,2D;AACA,qC;AACA,uD;AACA,iC;AACA,S;AACA,M;AACA,I;;AAEA,qC;AACA,+C;AACA,0D;AACA,K;AACA,2B;AACA,qC;AACA,M;AACA,G;AACA,E;;AAEA,+C;AACA,wB;AACA,mE;AACA,uC;AACA,gC;AACA,oD;AACA,mD;AACA,uB;AACA,6B;AACA,0B;AACA,uD;AACA,6B;AACA,kD;AACA,qD;AACA,0D;AACA,W;AACA,S;AACA,M;AACA,I;;AAEA,8B;AACA,0B;AACA,wD;AACA,6B;AACA,0B;AACA,qB;AACA,mD;AACA,iD;AACA,iE;AACA,W;AACA,S;AACA,M;AACA,I;;AAEA,6B;AACA,6B;AACA,8C;AACA,uD;AACA,S;AACA,M;AACA,I;;AAEA,8B;AACA,6B;AACA,8C;AACA,wD;AACA,S;AACA,M;AACA,I;;AAEA,6B;AACA,6B;AACA,8C;AACA,uD;AACA,S;AACA,M;AACA,I;;AAEA,8B;AACA,6B;AACA,8C;AACA,wD;AACA,S;AACA,M;AACA,I;;AAEA,6B;AACA,6B;AACA,oD;AACA,qD;AACA,S;AACA,M;AACA,I;;AAEA,8B;AACA,0B;AACA,wD;AACA,kD;AACA,kC;AACA,oD;AACA,8B;AACA,oB;AACA,qC;AACA,M;AACA,I;;AAEA,iC;AACA,6B;AACA,+C;AACA,M;AACA,I;;AAEA,8B;AACA,6B;AACA,+B;AACA,6B;AACA,8C;AACA,yC;AACA,S;AACA,M;AACA,I;;AAEA,+B;AACA,6B;AACA,wD;AACA,M;AACA,I;;AAEA,+B;AACA,6B;AACA,2C;AACA,8B;AACA,qB;AACA,+E;AACA,wD;AACA,8C;AACA,uD;AACA,S;AACA,M;AACA,I;;AAEA,2C;AACA,qC;AACA,gC;AACA,4E;AACA,uD;AACA,6C;;AAEA,6E;AACA,8E;AACA,qD;AACA,iC;AACA,6E;;AAEA,6E;AACA,iD;AACA,8C;AACA,oC;AACA,K;;AAEA,6B;AACA,8B;AACA,qB;AACA,8C;AACA,+B;AACA,S;AACA,M;AACA,I;;AAEA,kC;AACA,sD;AACA,6C;AACA,I;;AAEA,sD;AACA,2D;AACA,kC;AACA,0B;AACA,qB;AACA,wC;AACA,+B;AACA,S;AACA,M;AACA,I;;AAEA,iD;AACA,mE;AACA,kC;AACA,kC;AACA,M;AACA,I;;AAEA,kD;AACA,6C;AACA,0B;AACA,0B;AACA,0B;AACA,0B;AACA,mC;AACA,oB;AACA,sC;AACA,K;AACA,8E;AACA,sD;AACA,4D;AACA,mC;AACA,sC;AACA,K;AACA,oD;AACA,sF;AACA,oF;AACA,4D;AACA,kC;AACA,sB;AACA,qB;AACA,kB;AACA,uD;AACA,gB;AACA,wB;AACA,+E;AACA,+E;AACA,wB;AACA,qC;AACA,uD;AACA,c;AACA,4E;AACA,yC;AACA,gB;AACA,O;AACA,6E;AACA,2C;AACA,mB;AACA,8B;AACA,gC;AACA,yC;AACA,O;;AAEA,kD;AACA,wB;AACA,qB;;AAEA,oE;AACA,M;AACA,I;;AAEA,+B;AACA,+C;AACA,uC;AACA,G;AACA,E;;AAEA,yC;AACA,sB;AACA,wE;;AAEA,uB;AACA,8B;AACA,e;AACA,8B;AACA,e;AACA,+B;AACA,e;AACA,mB;AACA,e;AACA,mB;AACA,gB;AACA,4B;AACA,gB;AACA,gC;AACA,6C;AACA,gB;AACA,0B;AACA,e;AACA,0B;AACA,e;AACA,+C;AACA,e;AACA,uB;;AAEA,qC;AACA,iB;AACA,qC;AACA,oC;AACA,oB;AACA,kB;AACA,kB;AACA,I;;AAEA,mE;AACA,2B;AACA,yD;AACA,I;;AAEA,mE;AACA,oB;AACA,4B;AACA,mF;AACA,iE;AACA,kC;AACA,wB;AACA,gC;AACA,0B;AACA,0B;AACA,0B;AACA,yB;AACA,0B;AACA,8B;AACA,4B;AACA,wB;AACA,wB;AACA,wB;AACA,0B;AACA,8B;AACA,2B;AACA,uC;AACA,2B;AACA,8B;AACA,mC;AACA,8B;AACA,gB;AACA,I;;AAEA,kE;AACA,sE;AACA,qE;AACA,wB;AACA,yB;AACA,wB;AACA,sC;AACA,wB;AACA,e;AACA,yC;AACA,yC;AACA,+C;AACA,+C;AACA,kB;AACA,8B;AACA,kB;AACA,0E;AACA,kB;AACA,yD;AACA,+B;AACA,2B;AACA,kB;AACA,0B;AACA,0B;AACA,K;AACA,2B;AACA,2B;AACA,kB;AACA,sB;AACA,sB;AACA,K;;AAEA,2B;AACA,mB;AACA,2B;AACA,4C;AACA,6B;AACA,mE;AACA,qC;AACA,qB;AACA,8B;AACA,wB;AACA,6B;AACA,S;AACA,mB;AACA,Q;AACA,+D;AACA,K;AACA,4B;AACA,8B;AACA,2B;AACA,2C;AACA,2B;AACA,mB;AACA,oD;AACA,oB;AACA,mB;AACA,O;AACA,K;AACA,6B;AACA,6E;AACA,e;AACA,gC;AACA,mC;AACA,sC;AACA,wB;AACA,oB;AACA,wB;AACA,mB;AACA,O;AACA,e;AACA,K;AACA,8B;AACA,8B;AACA,wB;AACA,K;AACA,0B;AACA,e;AACA,4B;AACA,wE;AACA,0B;AACA,iB;AACA,qC;AACA,yB;AACA,oB;AACA,yB;AACA,kB;AACA,kB;AACA,qC;AACA,qE;AACA,wC;AACA,G;AACA,E;;AAEA,+D;AACA,Y;AACA,qD;AACA,2D;AACA,E;;AAEA,sD;AACA,E;AACA,yE;AACA,gF;AACA,4E;AACA,4E;AACA,gF;AACA,yE;AACA,kD;AACA,E;AACA,sD;AACA,0D;AACA,0D;AACA,0C;AACA,4C;AACA,4C;AACA,gC;AACA,sD;AACA,qC;AACA,uC;AACA,2B;AACA,gB;AACA,U;AACA,uC;AACA,2C;AACA,2D;AACA,uE;AACA,4C;AACA,G;;AAEA,yB;AACA,0C;AACA,yB;AACA,gC;;AAEA,4C;AACA,oB;AACA,0B;;AAEA,uE;AACA,uD;AACA,yB;;AAEA,+E;AACA,2E;AACA,yB;AACA,M;AACA,0E;AACA,wE;AACA,sC;AACA,kD;AACA,2E;AACA,8C;AACA,gC;AACA,2E;AACA,I;AACA,E;;AAEA,sD;AACA,8D;AACA,2B;AACA,mD;AACA,mC;AACA,6E;AACA,mC;AACA,yC;AACA,iE;AACA,2B;AACA,kE;AACA,Y;AACA,mE;AACA,6B;AACA,+D;AACA,qD;AACA,8C;AACA,gF;AACA,gF;AACA,2C;AACA,U;AACA,gF;AACA,6E;AACA,kE;AACA,4E;AACA,0C;AACA,U;AACA,uE;AACA,0D;AACA,2E;AACA,2E;AACA,oB;AACA,sC;AACA,+D;AACA,2C;AACA,8B;AACA,sD;AACA,kD;AACA,W;AACA,S;AACA,K;AACA,K;;;AAGA,mC;AACA,wE;AACA,+B;AACA,qB;AACA,gD;AACA,8B;AACA,O;AACA,I;AACA,E;;AAEA,iE;AACA,mE;AACA,c;AACA,gE;AACA,0D;AACA,mC;AACA,uD;;AAEA,mC;AACA,gD;AACA,2B;AACA,6C;AACA,M;AACA,G;;AAEA,4E;AACA,qE;AACA,4B;AACA,0D;AACA,0C;;AAEA,mD;AACA,4D;AACA,+B;AACA,qD;;AAEA,mD;AACA,E;;AAEA,wD;AACA,4B;AACA,wC;AACA,+B;AACA,E;AACA,iE;AACA,sE;AACA,0D;AACA,E;AACA,kE;AACA,kE;AACA,wD;;AAEA,wD;AACA,yB;;AAEA,8B;AACA,2C;AACA,wC;AACA,4B;AACA,+D;AACA,yB;AACA,W;AACA,c;AACA,4B;AACA,kE;AACA,0C;AACA,W;AACA,O;AACA,K;AACA,wC;AACA,2B;AACA,0B;AACA,yD;AACA,iC;AACA,S;AACA,K;AACA,U;AACA,kE;AACA,G;;AAEA,6E;AACA,sE;AACA,iC;AACA,4B;AACA,uC;AACA,iB;AACA,+D;AACA,M;;AAEA,gF;AACA,sE;AACA,2E;AACA,gF;AACA,c;AACA,sD;AACA,gB;AACA,qB;AACA,+E;AACA,wE;AACA,iD;AACA,2C;AACA,gC;AACA,oC;AACA,+E;AACA,0B;AACA,2D;AACA,kC;AACA,4C;AACA,8E;AACA,yE;AACA,iD;AACA,oB;AACA,0B;AACA,wB;AACA,gB;AACA,+E;AACA,2E;AACA,mB;AACA,4D;AACA,4D;AACA,4B;AACA,S;AACA,S;AACA,O;AACA,mB;AACA,I;;AAEA,0B;AACA,oD;AACA,sC;AACA,uE;AACA,uE;AACA,4D;AACA,wB;AACA,uD;AACA,M;AACA,a;AACA,I;AACA,E;;;;;;;;;;;;;;;;;;;;AClxBA,6D;AACA,uC;AACA,E;AACA,6D;AACA,E;AACA,sE;AACA,U;AACA,E;AACA,0E;AACA,6E;AACA,sD;AACA,yD;AACA,0B;AACA,sB;AACA,2E;AACA,kC;AACA,gE;AACA,yC;AACA,uC;AACA,G;;AAEA,c;;AAEA,qB;AACA,mD;AACA,yD;;AAEA,iC;AACA,wB;AACA,iC;AACA,kF;AACA,uB;AACA,+E;AACA,K;AACA,kB;AACA,U;AACA,sB;AACA,mC;;AAEA,yB;AACA,oD;AACA,yD;AACA,4C;AACA,sD;AACA,oB;AACA,wD;AACA,oC;AACA,sE;AACA,kE;AACA,gE;AACA,yE;;AAEA,mC;AACA,0C;AACA,iE;AACA,8C;AACA,sE;AACA,6E;AACA,mC;AACA,uD;AACA,O;AACA,K;AACA,G;;AAEA,kC;AACA,oC;AACA,sE;AACA,uE;AACA,qD;;AAEA,wE;AACA,qE;AACA,0D;AACA,gC;AACA,oB;AACA,K;AACA,0B;AACA,wB;AACA,G;AACA,E;;AAEA,sE;AACA,iE;AACA,iE;AACA,oE;AACA,iE;AACA,mE;AACA,qE;AACA,kE;AACA,oE;AACA,qC;AACA,oE;AACA,qD;AACA,6C;AACA,2C;AACA,8B;AACA,2C;AACA,uE;AACA,uB;AACA,+B;AACA,uB;AACA,oB;AACA,mB;AACA,qE;AACA,qC;AACA,kC;AACA,e;AACA,wB;AACA,8B;AACA,kC;AACA,uB;AACA,kB;AACA,mC;AACA,uB;AACA,kD;AACA,gE;AACA,yE;AACA,O;AACA,Y;AACA,wD;AACA,qC;AACA,0B;AACA,K;;AAEA,a;AACA,iB;AACA,uB;AACA,G;;AAEA,e;AACA,E;;AAEA,sC;AACA,e;AACA,a;AACA,gB;AACA,c;AACA,gB;AACA,E;;AAEA,8B;AACA,uC;AACA,gC;AACA,4D;AACA,0B;AACA,4C;AACA,gE;AACA,2B;AACA,Y;AACA,0B;AACA,K;AACA,I;AACA,uC;AACA,0D;AACA,yD;;AAEA,qC;AACA,I;AACA,+C;AACA,uC;AACA,I;AACA,yC;AACA,+B;AACA,oC;AACA,4B;AACA,+B;AACA,Y;AACA,6B;AACA,K;AACA,I;AACA,wC;AACA,0B;AACA,wB;AACA,4B;AACA,mC;AACA,8D;AACA,Q;AACA,+B;AACA,I;AACA,2C;AACA,2D;AACA,uE;AACA,0B;AACA,wB;AACA,0B;AACA,mC;AACA,iE;AACA,U;AACA,0C;AACA,uB;AACA,K;AACA,I;AACA,4C;AACA,0B;AACA,wB;AACA,4B;AACA,mC;AACA,kE;AACA,U;AACA,yB;AACA,oC;AACA,4B;AACA,4B;AACA,0B;AACA,gB;AACA,S;AACA,O;AACA,iD;AACA,uC;AACA,0C;AACA,qD;AACA,mB;AACA,sB;AACA,S;AACA,K;AACA,I;AACA,uC;AACA,6B;AACA,a;AACA,0B;AACA,wB;AACA,a;AACA,mC;AACA,6D;AACA,U;AACA,6C;AACA,uB;AACA,U;AACA,gB;AACA,K;AACA,I;AACA,wC;AACA,6B;AACA,a;AACA,0B;AACA,wB;AACA,a;AACA,mC;AACA,sE;AACA,U;AACA,kB;AACA,+D;AACA,oE;AACA,8D;AACA,mE;AACA,c;;AAEA,qE;AACA,kE;AACA,6D;AACA,6C;AACA,0D;AACA,0C;AACA,2B;AACA,0B;AACA,c;AACA,0C;AACA,oD;AACA,2B;AACA,O;AACA,0B;AACA,K;AACA,I;AACA,2C;AACA,2D;AACA,uE;AACA,6B;AACA,a;AACA,0B;AACA,wB;AACA,a;AACA,mC;AACA,sE;AACA,U;AACA,kB;AACA,0C;AACA,4B;AACA,8C;AACA,wD;AACA,2B;AACA,kB;AACA,W;AACA,S;AACA,qB;AACA,yB;AACA,O;AACA,0B;AACA,K;AACA,I;AACA,wD;AACA,wB;AACA,iD;AACA,4D;AACA,wB;AACA,kD;AACA,gC;AACA,qD;AACA,6B;AACA,a;AACA,0B;AACA,yB;;AAEA,kC;AACA,6E;AACA,yB;AACA,kD;AACA,gC;AACA,wB;AACA,I;AACA,uC;AACA,oE;AACA,2E;AACA,yC;AACA,G;AACA,E;;AAEA,8D;AACA,uB;AACA,yB;AACA,+B;AACA,mC;AACA,qB;AACA,E;;;;;;;;;;;;;;;;;;;;ACjUA,iB;AACA,yD;AACA,kC;AACA,6C;AACA,uD;AACA,+D;AACA,8E;AACA,kD;AACA,c;AACA,6C;AACA,wC;AACA,M;AACA,+C;AACA,wC;AACA,E;;AAEA,8E;AACA,2D;AACA,uB;AACA,yE;AACA,G;;AAEA,wC;AACA,wC;AACA,0C;AACA,8D;AACA,yF;AACA,O;AACA,Y;AACA,uC;AACA,wB;AACA,2D;AACA,K;AACA,K;;AAEA,yB;AACA,0C;AACA,yC;AACA,qC;AACA,O;AACA,G;AACA,E;;;AAGA,0F;;AAEA,8B;AACA,sC;AACA,oC;AACA,oD;AACA,uC;AACA,K;;AAEA,2B;AACA,yC;AACA,mC;AACA,oD;AACA,iC;AACA,K;;AAEA,e;AACA,I;AACA,oE;AACA,gE;AACA,oE;AACA,sE;AACA,sB;;AAEA,gF;AACA,e;;AAEA,0E;AACA,W;;AAEA,+E;AACA,8E;AACA,gF;AACA,+E;AACA,gF;AACA,4E;AACA,8E;AACA,S;;AAEA,oE;AACA,mE;;;AAGA,6D;AACA,8D;AACA,iE;AACA,yB;AACA,I;AACA,8D;AACA,4C;AACA,mB;AACA,4C;AACA,sB;AACA,iE;AACA,uD;AACA,6B;AACA,8B;AACA,qE;AACA,iE;AACA,kB;AACA,0B;AACA,mD;AACA,qC;AACA,mD;AACA,I;AACA,wE;AACA,+B;AACA,0B;AACA,4D;AACA,0B;AACA,gE;AACA,sE;AACA,qE;AACA,uE;AACA,oD;AACA,qB;AACA,wD;AACA,gB;AACA,Y;AACA,O;;AAEA,+C;AACA,sB;AACA,4B;AACA,0B;AACA,K;AACA,G;;AAEA,sC;AACA,+D;AACA,oB;AACA,sB;AACA,oB;AACA,G;AACA,0D;AACA,oB;;AAEA,8E;AACA,oB;AACA,mC;;AAEA,sC;AACA,qC;AACA,oD;AACA,K;AACA,+E;AACA,mD;AACA,uB;AACA,yC;AACA,+E;AACA,e;AACA,e;AACA,e;AACA,qD;AACA,8B;AACA,gD;AACA,qC;AACA,0B;AACA,kF;AACA,6D;AACA,c;AACA,gB;AACA,0D;AACA,oE;AACA,iC;AACA,mE;AACA,S;AACA,0E;AACA,O;AACA,K;AACA,kB;AACA,uC;AACA,wD;AACA,kE;AACA,+B;AACA,iE;AACA,O;AACA,K;AACA,gC;AACA,K;;;AAGA,E;;;AAGA,2C;AACA,kC;AACA,+C;AACA,iD;AACA,uD;AACA,I;AACA,kE;AACA,0C;AACA,0B;AACA,mE;AACA,Q;AACA,+D;AACA,K;AACA,4B;AACA,6C;AACA,4B;AACA,6C;AACA,O;AACA,G;AACA,E;;;;;;;;;;;;;;;;;;;ACjNA,qD;AACA,uD;AACA,E;;AAEA,kD;AACA,uC;AACA,kB;AACA,kB;AACA,wC;AACA,yD;AACA,6E;AACA,K;AACA,0E;AACA,0B;AACA,U;AACA,qC;AACA,G;AACA,E;;AAEA,4D;AACA,kB;AACA,2C;AACA,E;;AAEA,+D;AACA,kB;AACA,sD;AACA,uC;AACA,E;;AAEA,yD;AACA,kB;AACA,kD;AACA,E;;AAEA,2D;AACA,e;AACA,E;;AAEA,+D;AACA,kB;AACA,8C;AACA,E;;AAEA,6C;AACA,qD;AACA,qD;AACA,sC;;AAEA,qD;AACA,qD;AACA,0C;AACA,qC;AACA,kD;AACA,E;;AAEA,yD;AACA,oE;AACA,mD;AACA,gD;AACA,mE;AACA,6B;AACA,E;;AAEA,gF;AACA,uE;AACA,8E;AACA,8E;AACA,uC;AACA,6D;AACA,gC;AACA,8C;AACA,sB;AACA,gB;AACA,gB;;AAEA,8B;AACA,+B;AACA,oC;AACA,oD;AACA,4B;AACA,uD;AACA,wC;AACA,sC;AACA,uC;AACA,oE;AACA,8B;AACA,K;AACA,gB;AACA,G;;AAEA,wE;AACA,0E;AACA,wE;AACA,kD;AACA,oD;AACA,2E;AACA,iB;AACA,sB;AACA,K;AACA,G;;AAEA,c;AACA,E;;AAEA,sC;AACA,4C;AACA,G","sourcesContent":["// XXX type checking on selectors (graceful error if malformed)\r\n\r\n// LocalCollection: a set of documents that supports queries and modifiers.\r\n\r\n// Cursor: a specification for a particular subset of documents, w/\r\n// a defined order, limit, and offset.  creating a Cursor with LocalCollection.find(),\r\n\r\n// LiveResultsSet: the return value of a live query.\r\n\r\nLocalCollection = function (name) {\r\n  this.name = name;\r\n  this.docs = {}; // _id -> document (also containing id)\r\n\r\n  this._observeQueue = new Meteor._SynchronousQueue();\r\n\r\n  this.next_qid = 1; // live query id generator\r\n\r\n  // qid -> live query object. keys:\r\n  //  ordered: bool. ordered queries have moved callbacks and callbacks\r\n  //           take indices.\r\n  //  results: array (ordered) or object (unordered) of current results\r\n  //  results_snapshot: snapshot of results. null if not paused.\r\n  //  cursor: Cursor object for the query.\r\n  //  selector_f, sort_f, (callbacks): functions\r\n  this.queries = {};\r\n\r\n  // null if not saving originals; a map from id to original document value if\r\n  // saving originals. See comments before saveOriginals().\r\n  this._savedOriginals = null;\r\n\r\n  // True when observers are paused and we should not send callbacks.\r\n  this.paused = false;\r\n};\r\n\r\n\r\nLocalCollection._applyChanges = function (doc, changeFields) {\r\n  _.each(changeFields, function (value, key) {\r\n    if (value === undefined)\r\n      delete doc[key];\r\n    else\r\n      doc[key] = value;\r\n  });\r\n};\r\n\r\nvar MinimongoError = function (message) {\r\n  var e = new Error(message);\r\n  e.name = \"MinimongoError\";\r\n  return e;\r\n};\r\n\r\n\r\n// options may include sort, skip, limit, reactive\r\n// sort may be any of these forms:\r\n//     {a: 1, b: -1}\r\n//     [[\"a\", \"asc\"], [\"b\", \"desc\"]]\r\n//     [\"a\", [\"b\", \"desc\"]]\r\n//   (in the first form you're beholden to key enumeration order in\r\n//   your javascript VM)\r\n//\r\n// reactive: if given, and false, don't register with Deps (default\r\n// is true)\r\n//\r\n// XXX possibly should support retrieving a subset of fields? and\r\n// have it be a hint (ignored on the client, when not copying the\r\n// doc?)\r\n//\r\n// XXX sort does not yet support subkeys ('a.b') .. fix that!\r\n// XXX add one more sort form: \"key\"\r\n// XXX tests\r\nLocalCollection.prototype.find = function (selector, options) {\r\n  // default syntax for everything is to omit the selector argument.\r\n  // but if selector is explicitly passed in as false or undefined, we\r\n  // want a selector that matches nothing.\r\n  if (arguments.length === 0)\r\n    selector = {};\r\n\r\n  return new LocalCollection.Cursor(this, selector, options);\r\n};\r\n\r\n// don't call this ctor directly.  use LocalCollection.find().\r\nLocalCollection.Cursor = function (collection, selector, options) {\r\n  var self = this;\r\n  if (!options) options = {};\r\n\r\n  this.collection = collection;\r\n\r\n  if (LocalCollection._selectorIsId(selector)) {\r\n    // stash for fast path\r\n    self.selector_id = LocalCollection._idStringify(selector);\r\n    self.selector_f = LocalCollection._compileSelector(selector, self);\r\n    self.sort_f = undefined;\r\n  } else {\r\n    // MongoDB throws different errors on different branching operators\r\n    // containing $near\r\n    if (isGeoQuerySpecial(selector))\r\n      throw new Error(\"$near can't be inside $or/$and/$nor/$not\");\r\n\r\n    self.selector_id = undefined;\r\n    self.selector_f = LocalCollection._compileSelector(selector, self);\r\n    self.sort_f = (isGeoQuery(selector) || options.sort) ?\r\n      LocalCollection._compileSort(options.sort || [], self) : null;\r\n  }\r\n  self.skip = options.skip;\r\n  self.limit = options.limit;\r\n  self.fields = options.fields;\r\n\r\n  if (self.fields)\r\n    self.projection_f = LocalCollection._compileProjection(self.fields);\r\n\r\n  if (options.transform && typeof Deps !== \"undefined\")\r\n    self._transform = Deps._makeNonreactive(options.transform);\r\n  else\r\n    self._transform = options.transform;\r\n\r\n  // db_objects is a list of the objects that match the cursor. (It's always a\r\n  // list, never an object: LocalCollection.Cursor is always ordered.)\r\n  self.db_objects = null;\r\n  self.cursor_pos = 0;\r\n\r\n  // by default, queries register w/ Deps when it is available.\r\n  if (typeof Deps !== \"undefined\")\r\n    self.reactive = (options.reactive === undefined) ? true : options.reactive;\r\n};\r\n\r\nLocalCollection.Cursor.prototype.rewind = function () {\r\n  var self = this;\r\n  self.db_objects = null;\r\n  self.cursor_pos = 0;\r\n};\r\n\r\nLocalCollection.prototype.findOne = function (selector, options) {\r\n  if (arguments.length === 0)\r\n    selector = {};\r\n\r\n  // NOTE: by setting limit 1 here, we end up using very inefficient\r\n  // code that recomputes the whole query on each update. The upside is\r\n  // that when you reactively depend on a findOne you only get\r\n  // invalidated when the found object changes, not any object in the\r\n  // collection. Most findOne will be by id, which has a fast path, so\r\n  // this might not be a big deal. In most cases, invalidation causes\r\n  // the called to re-query anyway, so this should be a net performance\r\n  // improvement.\r\n  options = options || {};\r\n  options.limit = 1;\r\n\r\n  return this.find(selector, options).fetch()[0];\r\n};\r\n\r\nLocalCollection.Cursor.prototype.forEach = function (callback, thisArg) {\r\n  var self = this;\r\n\r\n  if (self.db_objects === null)\r\n    self.db_objects = self._getRawObjects(true);\r\n\r\n  if (self.reactive)\r\n    self._depend({\r\n      addedBefore: true,\r\n      removed: true,\r\n      changed: true,\r\n      movedBefore: true});\r\n\r\n  while (self.cursor_pos < self.db_objects.length) {\r\n    var elt = EJSON.clone(self.db_objects[self.cursor_pos]);\r\n    if (self.projection_f)\r\n      elt = self.projection_f(elt);\r\n    if (self._transform)\r\n      elt = self._transform(elt);\r\n    callback.call(thisArg, elt, self.cursor_pos, self);\r\n    ++self.cursor_pos;\r\n  }\r\n};\r\n\r\nLocalCollection.Cursor.prototype.getTransform = function () {\r\n  var self = this;\r\n  return self._transform;\r\n};\r\n\r\nLocalCollection.Cursor.prototype.map = function (callback, thisArg) {\r\n  var self = this;\r\n  var res = [];\r\n  self.forEach(function (doc, index) {\r\n    res.push(callback.call(thisArg, doc, index, self));\r\n  });\r\n  return res;\r\n};\r\n\r\nLocalCollection.Cursor.prototype.fetch = function () {\r\n  var self = this;\r\n  var res = [];\r\n  self.forEach(function (doc) {\r\n    res.push(doc);\r\n  });\r\n  return res;\r\n};\r\n\r\nLocalCollection.Cursor.prototype.count = function () {\r\n  var self = this;\r\n\r\n  if (self.reactive)\r\n    self._depend({added: true, removed: true},\r\n                 true /* allow the observe to be unordered */);\r\n\r\n  if (self.db_objects === null)\r\n    self.db_objects = self._getRawObjects(true);\r\n\r\n  return self.db_objects.length;\r\n};\r\n\r\nLocalCollection.Cursor.prototype._publishCursor = function (sub) {\r\n  var self = this;\r\n  if (! self.collection.name)\r\n    throw new Error(\"Can't publish a cursor from a collection without a name.\");\r\n  var collection = self.collection.name;\r\n\r\n  // XXX minimongo should not depend on mongo-livedata!\r\n  return Meteor.Collection._publishCursor(self, sub, collection);\r\n};\r\n\r\nLocalCollection._isOrderedChanges = function (callbacks) {\r\n  if (callbacks.added && callbacks.addedBefore)\r\n    throw new Error(\"Please specify only one of added() and addedBefore()\");\r\n  return typeof callbacks.addedBefore == 'function' ||\r\n    typeof callbacks.movedBefore === 'function';\r\n};\r\n\r\n// the handle that comes back from observe.\r\nLocalCollection.LiveResultsSet = function () {};\r\n\r\n// options to contain:\r\n//  * callbacks for observe():\r\n//    - addedAt (document, atIndex)\r\n//    - added (document)\r\n//    - changedAt (newDocument, oldDocument, atIndex)\r\n//    - changed (newDocument, oldDocument)\r\n//    - removedAt (document, atIndex)\r\n//    - removed (document)\r\n//    - movedTo (document, oldIndex, newIndex)\r\n//\r\n// attributes available on returned query handle:\r\n//  * stop(): end updates\r\n//  * collection: the collection this query is querying\r\n//\r\n// iff x is a returned query handle, (x instanceof\r\n// LocalCollection.LiveResultsSet) is true\r\n//\r\n// initial results delivered through added callback\r\n// XXX maybe callbacks should take a list of objects, to expose transactions?\r\n// XXX maybe support field limiting (to limit what you're notified on)\r\n\r\n_.extend(LocalCollection.Cursor.prototype, {\r\n  observe: function (options) {\r\n    var self = this;\r\n    return LocalCollection._observeFromObserveChanges(self, options);\r\n  },\r\n  observeChanges: function (options) {\r\n    var self = this;\r\n\r\n    var ordered = LocalCollection._isOrderedChanges(options);\r\n\r\n    if (!options._allow_unordered && !ordered && (self.skip || self.limit))\r\n      throw new Error(\"must use ordered observe with skip or limit\");\r\n\r\n    // XXX merge this object w/ \"this\" Cursor.  they're the same.\r\n    var query = {\r\n      selector_f: self.selector_f, // not fast pathed\r\n      sort_f: ordered && self.sort_f,\r\n      results_snapshot: null,\r\n      ordered: ordered,\r\n      cursor: self,\r\n      observeChanges: options.observeChanges,\r\n      fields: self.fields,\r\n      projection_f: self.projection_f\r\n    };\r\n    var qid;\r\n\r\n    // Non-reactive queries call added[Before] and then never call anything\r\n    // else.\r\n    if (self.reactive) {\r\n      qid = self.collection.next_qid++;\r\n      self.collection.queries[qid] = query;\r\n    }\r\n    query.results = self._getRawObjects(ordered);\r\n    if (self.collection.paused)\r\n      query.results_snapshot = (ordered ? [] : {});\r\n\r\n    // wrap callbacks we were passed. callbacks only fire when not paused and\r\n    // are never undefined (except that query.moved is undefined for unordered\r\n    // callbacks).\r\n    // Filters out blacklisted fields according to cursor's projection.\r\n    // XXX wrong place for this?\r\n\r\n    // furthermore, callbacks enqueue until the operation we're working on is\r\n    // done.\r\n    var wrapCallback = function (f, fieldsIndex, ignoreEmptyFields) {\r\n      if (!f)\r\n        return function () {};\r\n      return function (/*args*/) {\r\n        var context = this;\r\n        var args = arguments;\r\n\r\n        if (fieldsIndex !== undefined && self.projection_f) {\r\n          args[fieldsIndex] = self.projection_f(args[fieldsIndex]);\r\n          if (ignoreEmptyFields && _.isEmpty(args[fieldsIndex]))\r\n            return;\r\n        }\r\n\r\n        if (!self.collection.paused) {\r\n          self.collection._observeQueue.queueTask(function () {\r\n            f.apply(context, args);\r\n          });\r\n        }\r\n      };\r\n    };\r\n    query.added = wrapCallback(options.added, 1);\r\n    query.changed = wrapCallback(options.changed, 1, true);\r\n    query.removed = wrapCallback(options.removed);\r\n    if (ordered) {\r\n      query.moved = wrapCallback(options.moved);\r\n      query.addedBefore = wrapCallback(options.addedBefore, 1);\r\n      query.movedBefore = wrapCallback(options.movedBefore);\r\n    }\r\n\r\n    if (!options._suppress_initial && !self.collection.paused) {\r\n      _.each(query.results, function (doc, i) {\r\n        var fields = EJSON.clone(doc);\r\n\r\n        delete fields._id;\r\n        if (ordered)\r\n          query.addedBefore(doc._id, fields, null);\r\n        query.added(doc._id, fields);\r\n      });\r\n    }\r\n\r\n    var handle = new LocalCollection.LiveResultsSet;\r\n    _.extend(handle, {\r\n      collection: self.collection,\r\n      stop: function () {\r\n        if (self.reactive)\r\n          delete self.collection.queries[qid];\r\n      }\r\n    });\r\n\r\n    if (self.reactive && Deps.active) {\r\n      // XXX in many cases, the same observe will be recreated when\r\n      // the current autorun is rerun.  we could save work by\r\n      // letting it linger across rerun and potentially get\r\n      // repurposed if the same observe is performed, using logic\r\n      // similar to that of Meteor.subscribe.\r\n      Deps.onInvalidate(function () {\r\n        handle.stop();\r\n      });\r\n    }\r\n    // run the observe callbacks resulting from the initial contents\r\n    // before we leave the observe.\r\n    self.collection._observeQueue.drain();\r\n\r\n    return handle;\r\n  }\r\n});\r\n\r\n// Returns a collection of matching objects, but doesn't deep copy them.\r\n//\r\n// If ordered is set, returns a sorted array, respecting sort_f, skip, and limit\r\n// properties of the query.  if sort_f is falsey, no sort -- you get the natural\r\n// order.\r\n//\r\n// If ordered is not set, returns an object mapping from ID to doc (sort_f, skip\r\n// and limit should not be set).\r\nLocalCollection.Cursor.prototype._getRawObjects = function (ordered) {\r\n  var self = this;\r\n\r\n  var results = ordered ? [] : {};\r\n\r\n  // fast path for single ID value\r\n  if (self.selector_id) {\r\n    // If you have non-zero skip and ask for a single id, you get\r\n    // nothing. This is so it matches the behavior of the '{_id: foo}'\r\n    // path.\r\n    if (self.skip)\r\n      return results;\r\n\r\n    if (_.has(self.collection.docs, self.selector_id)) {\r\n      var selectedDoc = self.collection.docs[self.selector_id];\r\n      if (ordered)\r\n        results.push(selectedDoc);\r\n      else\r\n        results[self.selector_id] = selectedDoc;\r\n    }\r\n    return results;\r\n  }\r\n\r\n  // slow path for arbitrary selector, sort, skip, limit\r\n  for (var id in self.collection.docs) {\r\n    var doc = self.collection.docs[id];\r\n    if (self.selector_f(doc)) {\r\n      if (ordered)\r\n        results.push(doc);\r\n      else\r\n        results[id] = doc;\r\n    }\r\n    // Fast path for limited unsorted queries.\r\n    if (self.limit && !self.skip && !self.sort_f &&\r\n        results.length === self.limit)\r\n      return results;\r\n  }\r\n\r\n  if (!ordered)\r\n    return results;\r\n\r\n  if (self.sort_f)\r\n    results.sort(self.sort_f);\r\n\r\n  var idx_start = self.skip || 0;\r\n  var idx_end = self.limit ? (self.limit + idx_start) : results.length;\r\n  return results.slice(idx_start, idx_end);\r\n};\r\n\r\n// XXX Maybe we need a version of observe that just calls a callback if\r\n// anything changed.\r\nLocalCollection.Cursor.prototype._depend = function (changers, _allow_unordered) {\r\n  var self = this;\r\n\r\n  if (Deps.active) {\r\n    var v = new Deps.Dependency;\r\n    v.depend();\r\n    var notifyChange = _.bind(v.changed, v);\r\n\r\n    var options = {\r\n      _suppress_initial: true,\r\n      _allow_unordered: _allow_unordered\r\n    };\r\n    _.each(['added', 'changed', 'removed', 'addedBefore', 'movedBefore'],\r\n           function (fnName) {\r\n             if (changers[fnName])\r\n               options[fnName] = notifyChange;\r\n           });\r\n\r\n    // observeChanges will stop() when this computation is invalidated\r\n    self.observeChanges(options);\r\n  }\r\n};\r\n\r\n// XXX enforce rule that field names can't start with '$' or contain '.'\r\n// (real mongodb does in fact enforce this)\r\n// XXX possibly enforce that 'undefined' does not appear (we assume\r\n// this in our handling of null and $exists)\r\nLocalCollection.prototype.insert = function (doc, callback) {\r\n  var self = this;\r\n  doc = EJSON.clone(doc);\r\n\r\n  if (!_.has(doc, '_id')) {\r\n    // if you really want to use ObjectIDs, set this global.\r\n    // Meteor.Collection specifies its own ids and does not use this code.\r\n    doc._id = LocalCollection._useOID ? new LocalCollection._ObjectID()\r\n                                      : Random.id();\r\n  }\r\n  var id = LocalCollection._idStringify(doc._id);\r\n\r\n  if (_.has(self.docs, id))\r\n    throw MinimongoError(\"Duplicate _id '\" + doc._id + \"'\");\r\n\r\n  self._saveOriginal(id, undefined);\r\n  self.docs[id] = doc;\r\n\r\n  var queriesToRecompute = [];\r\n  // trigger live queries that match\r\n  for (var qid in self.queries) {\r\n    var query = self.queries[qid];\r\n    if (query.selector_f(doc)) {\r\n      if (query.cursor.skip || query.cursor.limit)\r\n        queriesToRecompute.push(qid);\r\n      else\r\n        LocalCollection._insertInResults(query, doc);\r\n    }\r\n  }\r\n\r\n  _.each(queriesToRecompute, function (qid) {\r\n    if (self.queries[qid])\r\n      LocalCollection._recomputeResults(self.queries[qid]);\r\n  });\r\n  self._observeQueue.drain();\r\n\r\n  // Defer because the caller likely doesn't expect the callback to be run\r\n  // immediately.\r\n  if (callback)\r\n    Meteor.defer(function () {\r\n      callback(null, doc._id);\r\n    });\r\n  return doc._id;\r\n};\r\n\r\nLocalCollection.prototype.remove = function (selector, callback) {\r\n  var self = this;\r\n  var remove = [];\r\n\r\n  var queriesToRecompute = [];\r\n  var selector_f = LocalCollection._compileSelector(selector, self);\r\n\r\n  // Avoid O(n) for \"remove a single doc by ID\".\r\n  var specificIds = LocalCollection._idsMatchedBySelector(selector);\r\n  if (specificIds) {\r\n    _.each(specificIds, function (id) {\r\n      var strId = LocalCollection._idStringify(id);\r\n      // We still have to run selector_f, in case it's something like\r\n      //   {_id: \"X\", a: 42}\r\n      if (_.has(self.docs, strId) && selector_f(self.docs[strId]))\r\n        remove.push(strId);\r\n    });\r\n  } else {\r\n    for (var id in self.docs) {\r\n      var doc = self.docs[id];\r\n      if (selector_f(doc)) {\r\n        remove.push(id);\r\n      }\r\n    }\r\n  }\r\n\r\n  var queryRemove = [];\r\n  for (var i = 0; i < remove.length; i++) {\r\n    var removeId = remove[i];\r\n    var removeDoc = self.docs[removeId];\r\n    _.each(self.queries, function (query, qid) {\r\n      if (query.selector_f(removeDoc)) {\r\n        if (query.cursor.skip || query.cursor.limit)\r\n          queriesToRecompute.push(qid);\r\n        else\r\n          queryRemove.push({qid: qid, doc: removeDoc});\r\n      }\r\n    });\r\n    self._saveOriginal(removeId, removeDoc);\r\n    delete self.docs[removeId];\r\n  }\r\n\r\n  // run live query callbacks _after_ we've removed the documents.\r\n  _.each(queryRemove, function (remove) {\r\n    var query = self.queries[remove.qid];\r\n    if (query)\r\n      LocalCollection._removeFromResults(query, remove.doc);\r\n  });\r\n  _.each(queriesToRecompute, function (qid) {\r\n    var query = self.queries[qid];\r\n    if (query)\r\n      LocalCollection._recomputeResults(query);\r\n  });\r\n  self._observeQueue.drain();\r\n  var result = remove.length;\r\n  if (callback)\r\n    Meteor.defer(function () {\r\n      callback(null, result);\r\n    });\r\n  return result;\r\n};\r\n\r\n// XXX atomicity: if multi is true, and one modification fails, do\r\n// we rollback the whole operation, or what?\r\nLocalCollection.prototype.update = function (selector, mod, options, callback) {\r\n  var self = this;\r\n  if (! callback && options instanceof Function) {\r\n    callback = options;\r\n    options = null;\r\n  }\r\n  if (!options) options = {};\r\n\r\n  var selector_f = LocalCollection._compileSelector(selector, self);\r\n\r\n  // Save the original results of any query that we might need to\r\n  // _recomputeResults on, because _modifyAndNotify will mutate the objects in\r\n  // it. (We don't need to save the original results of paused queries because\r\n  // they already have a results_snapshot and we won't be diffing in\r\n  // _recomputeResults.)\r\n  var qidToOriginalResults = {};\r\n  _.each(self.queries, function (query, qid) {\r\n    if ((query.cursor.skip || query.cursor.limit) && !query.paused)\r\n      qidToOriginalResults[qid] = EJSON.clone(query.results);\r\n  });\r\n  var recomputeQids = {};\r\n\r\n  var updateCount = 0;\r\n\r\n  for (var id in self.docs) {\r\n    var doc = self.docs[id];\r\n    if (selector_f(doc)) {\r\n      // XXX Should we save the original even if mod ends up being a no-op?\r\n      self._saveOriginal(id, doc);\r\n      self._modifyAndNotify(doc, mod, recomputeQids);\r\n      ++updateCount;\r\n      if (!options.multi)\r\n        break;\r\n    }\r\n  }\r\n\r\n  _.each(recomputeQids, function (dummy, qid) {\r\n    var query = self.queries[qid];\r\n    if (query)\r\n      LocalCollection._recomputeResults(query,\r\n                                        qidToOriginalResults[qid]);\r\n  });\r\n  self._observeQueue.drain();\r\n\r\n  // If we are doing an upsert, and we didn't modify any documents yet, then\r\n  // it's time to do an insert. Figure out what document we are inserting, and\r\n  // generate an id for it.\r\n  var insertedId;\r\n  if (updateCount === 0 && options.upsert) {\r\n    var newDoc = LocalCollection._removeDollarOperators(selector);\r\n    LocalCollection._modify(newDoc, mod, true);\r\n    if (! newDoc._id && options.insertedId)\r\n      newDoc._id = options.insertedId;\r\n    insertedId = self.insert(newDoc);\r\n    updateCount = 1;\r\n  }\r\n\r\n  // Return the number of affected documents, or in the upsert case, an object\r\n  // containing the number of affected docs and the id of the doc that was\r\n  // inserted, if any.\r\n  var result;\r\n  if (options._returnObject) {\r\n    result = {\r\n      numberAffected: updateCount\r\n    };\r\n    if (insertedId !== undefined)\r\n      result.insertedId = insertedId;\r\n  } else {\r\n    result = updateCount;\r\n  }\r\n\r\n  if (callback)\r\n    Meteor.defer(function () {\r\n      callback(null, result);\r\n    });\r\n  return result;\r\n};\r\n\r\n// A convenience wrapper on update. LocalCollection.upsert(sel, mod) is\r\n// equivalent to LocalCollection.update(sel, mod, { upsert: true, _returnObject:\r\n// true }).\r\nLocalCollection.prototype.upsert = function (selector, mod, options, callback) {\r\n  var self = this;\r\n  if (! callback && typeof options === \"function\") {\r\n    callback = options;\r\n    options = {};\r\n  }\r\n  return self.update(selector, mod, _.extend({}, options, {\r\n    upsert: true,\r\n    _returnObject: true\r\n  }), callback);\r\n};\r\n\r\nLocalCollection.prototype._modifyAndNotify = function (\r\n    doc, mod, recomputeQids) {\r\n  var self = this;\r\n\r\n  var matched_before = {};\r\n  for (var qid in self.queries) {\r\n    var query = self.queries[qid];\r\n    if (query.ordered) {\r\n      matched_before[qid] = query.selector_f(doc);\r\n    } else {\r\n      // Because we don't support skip or limit (yet) in unordered queries, we\r\n      // can just do a direct lookup.\r\n      matched_before[qid] = _.has(query.results,\r\n                                  LocalCollection._idStringify(doc._id));\r\n    }\r\n  }\r\n\r\n  var old_doc = EJSON.clone(doc);\r\n\r\n  LocalCollection._modify(doc, mod);\r\n\r\n  for (qid in self.queries) {\r\n    query = self.queries[qid];\r\n    var before = matched_before[qid];\r\n    var after = query.selector_f(doc);\r\n\r\n    if (query.cursor.skip || query.cursor.limit) {\r\n      // We need to recompute any query where the doc may have been in the\r\n      // cursor's window either before or after the update. (Note that if skip\r\n      // or limit is set, \"before\" and \"after\" being true do not necessarily\r\n      // mean that the document is in the cursor's output after skip/limit is\r\n      // applied... but if they are false, then the document definitely is NOT\r\n      // in the output. So it's safe to skip recompute if neither before or\r\n      // after are true.)\r\n      if (before || after)\r\n        recomputeQids[qid] = true;\r\n    } else if (before && !after) {\r\n      LocalCollection._removeFromResults(query, doc);\r\n    } else if (!before && after) {\r\n      LocalCollection._insertInResults(query, doc);\r\n    } else if (before && after) {\r\n      LocalCollection._updateInResults(query, doc, old_doc);\r\n    }\r\n  }\r\n};\r\n\r\n// XXX the sorted-query logic below is laughably inefficient. we'll\r\n// need to come up with a better datastructure for this.\r\n//\r\n// XXX the logic for observing with a skip or a limit is even more\r\n// laughably inefficient. we recompute the whole results every time!\r\n\r\nLocalCollection._insertInResults = function (query, doc) {\r\n  var fields = EJSON.clone(doc);\r\n  delete fields._id;\r\n  if (query.ordered) {\r\n    if (!query.sort_f) {\r\n      query.addedBefore(doc._id, fields, null);\r\n      query.results.push(doc);\r\n    } else {\r\n      var i = LocalCollection._insertInSortedList(\r\n        query.sort_f, query.results, doc);\r\n      var next = query.results[i+1];\r\n      if (next)\r\n        next = next._id;\r\n      else\r\n        next = null;\r\n      query.addedBefore(doc._id, fields, next);\r\n    }\r\n    query.added(doc._id, fields);\r\n  } else {\r\n    query.added(doc._id, fields);\r\n    query.results[LocalCollection._idStringify(doc._id)] = doc;\r\n  }\r\n};\r\n\r\nLocalCollection._removeFromResults = function (query, doc) {\r\n  if (query.ordered) {\r\n    var i = LocalCollection._findInOrderedResults(query, doc);\r\n    query.removed(doc._id);\r\n    query.results.splice(i, 1);\r\n  } else {\r\n    var id = LocalCollection._idStringify(doc._id);  // in case callback mutates doc\r\n    query.removed(doc._id);\r\n    delete query.results[id];\r\n  }\r\n};\r\n\r\nLocalCollection._updateInResults = function (query, doc, old_doc) {\r\n  if (!EJSON.equals(doc._id, old_doc._id))\r\n    throw new Error(\"Can't change a doc's _id while updating\");\r\n  var changedFields = LocalCollection._makeChangedFields(doc, old_doc);\r\n  if (!query.ordered) {\r\n    if (!_.isEmpty(changedFields)) {\r\n      query.changed(doc._id, changedFields);\r\n      query.results[LocalCollection._idStringify(doc._id)] = doc;\r\n    }\r\n    return;\r\n  }\r\n\r\n  var orig_idx = LocalCollection._findInOrderedResults(query, doc);\r\n\r\n  if (!_.isEmpty(changedFields))\r\n    query.changed(doc._id, changedFields);\r\n  if (!query.sort_f)\r\n    return;\r\n\r\n  // just take it out and put it back in again, and see if the index\r\n  // changes\r\n  query.results.splice(orig_idx, 1);\r\n  var new_idx = LocalCollection._insertInSortedList(\r\n    query.sort_f, query.results, doc);\r\n  if (orig_idx !== new_idx) {\r\n    var next = query.results[new_idx+1];\r\n    if (next)\r\n      next = next._id;\r\n    else\r\n      next = null;\r\n    query.movedBefore && query.movedBefore(doc._id, next);\r\n  }\r\n};\r\n\r\n// Recomputes the results of a query and runs observe callbacks for the\r\n// difference between the previous results and the current results (unless\r\n// paused). Used for skip/limit queries.\r\n//\r\n// When this is used by insert or remove, it can just use query.results for the\r\n// old results (and there's no need to pass in oldResults), because these\r\n// operations don't mutate the documents in the collection. Update needs to pass\r\n// in an oldResults which was deep-copied before the modifier was applied.\r\nLocalCollection._recomputeResults = function (query, oldResults) {\r\n  if (!oldResults)\r\n    oldResults = query.results;\r\n  query.results = query.cursor._getRawObjects(query.ordered);\r\n\r\n  if (!query.paused) {\r\n    LocalCollection._diffQueryChanges(\r\n      query.ordered, oldResults, query.results, query);\r\n  }\r\n};\r\n\r\n\r\nLocalCollection._findInOrderedResults = function (query, doc) {\r\n  if (!query.ordered)\r\n    throw new Error(\"Can't call _findInOrderedResults on unordered query\");\r\n  for (var i = 0; i < query.results.length; i++)\r\n    if (query.results[i] === doc)\r\n      return i;\r\n  throw Error(\"object missing from query\");\r\n};\r\n\r\n// This binary search puts a value between any equal values, and the first\r\n// lesser value.\r\nLocalCollection._binarySearch = function (cmp, array, value) {\r\n  var first = 0, rangeLength = array.length;\r\n\r\n  while (rangeLength > 0) {\r\n    var halfRange = Math.floor(rangeLength/2);\r\n    if (cmp(value, array[first + halfRange]) >= 0) {\r\n      first += halfRange + 1;\r\n      rangeLength -= halfRange + 1;\r\n    } else {\r\n      rangeLength = halfRange;\r\n    }\r\n  }\r\n  return first;\r\n};\r\n\r\nLocalCollection._insertInSortedList = function (cmp, array, value) {\r\n  if (array.length === 0) {\r\n    array.push(value);\r\n    return 0;\r\n  }\r\n\r\n  var idx = LocalCollection._binarySearch(cmp, array, value);\r\n  array.splice(idx, 0, value);\r\n  return idx;\r\n};\r\n\r\n// To track what documents are affected by a piece of code, call saveOriginals()\r\n// before it and retrieveOriginals() after it. retrieveOriginals returns an\r\n// object whose keys are the ids of the documents that were affected since the\r\n// call to saveOriginals(), and the values are equal to the document's contents\r\n// at the time of saveOriginals. (In the case of an inserted document, undefined\r\n// is the value.) You must alternate between calls to saveOriginals() and\r\n// retrieveOriginals().\r\nLocalCollection.prototype.saveOriginals = function () {\r\n  var self = this;\r\n  if (self._savedOriginals)\r\n    throw new Error(\"Called saveOriginals twice without retrieveOriginals\");\r\n  self._savedOriginals = {};\r\n};\r\nLocalCollection.prototype.retrieveOriginals = function () {\r\n  var self = this;\r\n  if (!self._savedOriginals)\r\n    throw new Error(\"Called retrieveOriginals without saveOriginals\");\r\n\r\n  var originals = self._savedOriginals;\r\n  self._savedOriginals = null;\r\n  return originals;\r\n};\r\n\r\nLocalCollection.prototype._saveOriginal = function (id, doc) {\r\n  var self = this;\r\n  // Are we even trying to save originals?\r\n  if (!self._savedOriginals)\r\n    return;\r\n  // Have we previously mutated the original (and so 'doc' is not actually\r\n  // original)?  (Note the 'has' check rather than truth: we store undefined\r\n  // here for inserted docs!)\r\n  if (_.has(self._savedOriginals, id))\r\n    return;\r\n  self._savedOriginals[id] = EJSON.clone(doc);\r\n};\r\n\r\n// Pause the observers. No callbacks from observers will fire until\r\n// 'resumeObservers' is called.\r\nLocalCollection.prototype.pauseObservers = function () {\r\n  // No-op if already paused.\r\n  if (this.paused)\r\n    return;\r\n\r\n  // Set the 'paused' flag such that new observer messages don't fire.\r\n  this.paused = true;\r\n\r\n  // Take a snapshot of the query results for each query.\r\n  for (var qid in this.queries) {\r\n    var query = this.queries[qid];\r\n\r\n    query.results_snapshot = EJSON.clone(query.results);\r\n  }\r\n};\r\n\r\n// Resume the observers. Observers immediately receive change\r\n// notifications to bring them to the current state of the\r\n// database. Note that this is not just replaying all the changes that\r\n// happened during the pause, it is a smarter 'coalesced' diff.\r\nLocalCollection.prototype.resumeObservers = function () {\r\n  var self = this;\r\n  // No-op if not paused.\r\n  if (!this.paused)\r\n    return;\r\n\r\n  // Unset the 'paused' flag. Make sure to do this first, otherwise\r\n  // observer methods won't actually fire when we trigger them.\r\n  this.paused = false;\r\n\r\n  for (var qid in this.queries) {\r\n    var query = self.queries[qid];\r\n    // Diff the current results against the snapshot and send to observers.\r\n    // pass the query object for its observer callbacks.\r\n    LocalCollection._diffQueryChanges(\r\n      query.ordered, query.results_snapshot, query.results, query);\r\n    query.results_snapshot = null;\r\n  }\r\n  self._observeQueue.drain();\r\n};\r\n\r\n\r\n// NB: used by livedata\r\nLocalCollection._idStringify = function (id) {\r\n  if (id instanceof LocalCollection._ObjectID) {\r\n    return id.valueOf();\r\n  } else if (typeof id === 'string') {\r\n    if (id === \"\") {\r\n      return id;\r\n    } else if (id.substr(0, 1) === \"-\" || // escape previously dashed strings\r\n               id.substr(0, 1) === \"~\" || // escape escaped numbers, true, false\r\n               LocalCollection._looksLikeObjectID(id) || // escape object-id-form strings\r\n               id.substr(0, 1) === '{') { // escape object-form strings, for maybe implementing later\r\n      return \"-\" + id;\r\n    } else {\r\n      return id; // other strings go through unchanged.\r\n    }\r\n  } else if (id === undefined) {\r\n    return '-';\r\n  } else if (typeof id === 'object' && id !== null) {\r\n    throw new Error(\"Meteor does not currently support objects other than ObjectID as ids\");\r\n  } else { // Numbers, true, false, null\r\n    return \"~\" + JSON.stringify(id);\r\n  }\r\n};\r\n\r\n\r\n// NB: used by livedata\r\nLocalCollection._idParse = function (id) {\r\n  if (id === \"\") {\r\n    return id;\r\n  } else if (id === '-') {\r\n    return undefined;\r\n  } else if (id.substr(0, 1) === '-') {\r\n    return id.substr(1);\r\n  } else if (id.substr(0, 1) === '~') {\r\n    return JSON.parse(id.substr(1));\r\n  } else if (LocalCollection._looksLikeObjectID(id)) {\r\n    return new LocalCollection._ObjectID(id);\r\n  } else {\r\n    return id;\r\n  }\r\n};\r\n\r\nLocalCollection._makeChangedFields = function (newDoc, oldDoc) {\r\n  var fields = {};\r\n  LocalCollection._diffObjects(oldDoc, newDoc, {\r\n    leftOnly: function (key, value) {\r\n      fields[key] = undefined;\r\n    },\r\n    rightOnly: function (key, value) {\r\n      fields[key] = value;\r\n    },\r\n    both: function (key, leftValue, rightValue) {\r\n      if (!EJSON.equals(leftValue, rightValue))\r\n        fields[key] = rightValue;\r\n    }\r\n  });\r\n  return fields;\r\n};\r\n\r\nLocalCollection._observeFromObserveChanges = function (cursor, callbacks) {\r\n  var transform = cursor.getTransform();\r\n  if (!transform)\r\n    transform = function (doc) {return doc;};\r\n  if (callbacks.addedAt && callbacks.added)\r\n    throw new Error(\"Please specify only one of added() and addedAt()\");\r\n  if (callbacks.changedAt && callbacks.changed)\r\n    throw new Error(\"Please specify only one of changed() and changedAt()\");\r\n  if (callbacks.removed && callbacks.removedAt)\r\n    throw new Error(\"Please specify only one of removed() and removedAt()\");\r\n  if (callbacks.addedAt || callbacks.movedTo ||\r\n      callbacks.changedAt || callbacks.removedAt)\r\n    return LocalCollection._observeOrderedFromObserveChanges(cursor, callbacks, transform);\r\n  else\r\n    return LocalCollection._observeUnorderedFromObserveChanges(cursor, callbacks, transform);\r\n};\r\n\r\nLocalCollection._observeUnorderedFromObserveChanges =\r\n    function (cursor, callbacks, transform) {\r\n  var docs = {};\r\n  var suppressed = !!callbacks._suppress_initial;\r\n  var handle = cursor.observeChanges({\r\n    added: function (id, fields) {\r\n      var strId = LocalCollection._idStringify(id);\r\n      var doc = EJSON.clone(fields);\r\n      doc._id = id;\r\n      docs[strId] = doc;\r\n      suppressed || callbacks.added && callbacks.added(transform(doc));\r\n    },\r\n    changed: function (id, fields) {\r\n      var strId = LocalCollection._idStringify(id);\r\n      var doc = docs[strId];\r\n      var oldDoc = EJSON.clone(doc);\r\n      // writes through to the doc set\r\n      LocalCollection._applyChanges(doc, fields);\r\n      suppressed || callbacks.changed && callbacks.changed(transform(doc), transform(oldDoc));\r\n    },\r\n    removed: function (id) {\r\n      var strId = LocalCollection._idStringify(id);\r\n      var doc = docs[strId];\r\n      delete docs[strId];\r\n      suppressed || callbacks.removed && callbacks.removed(transform(doc));\r\n    }\r\n  });\r\n  suppressed = false;\r\n  return handle;\r\n};\r\n\r\nLocalCollection._observeOrderedFromObserveChanges =\r\n    function (cursor, callbacks, transform) {\r\n  var docs = new OrderedDict(LocalCollection._idStringify);\r\n  var suppressed = !!callbacks._suppress_initial;\r\n  // The \"_no_indices\" option sets all index arguments to -1\r\n  // and skips the linear scans required to generate them.\r\n  // This lets observers that don't need absolute indices\r\n  // benefit from the other features of this API --\r\n  // relative order, transforms, and applyChanges -- without\r\n  // the speed hit.\r\n  var indices = !callbacks._no_indices;\r\n  var handle = cursor.observeChanges({\r\n    addedBefore: function (id, fields, before) {\r\n      var doc = EJSON.clone(fields);\r\n      doc._id = id;\r\n      // XXX could `before` be a falsy ID?  Technically\r\n      // idStringify seems to allow for them -- though\r\n      // OrderedDict won't call stringify on a falsy arg.\r\n      docs.putBefore(id, doc, before || null);\r\n      if (!suppressed) {\r\n        if (callbacks.addedAt) {\r\n          var index = indices ? docs.indexOf(id) : -1;\r\n          callbacks.addedAt(transform(EJSON.clone(doc)),\r\n                            index, before);\r\n        } else if (callbacks.added) {\r\n          callbacks.added(transform(EJSON.clone(doc)));\r\n        }\r\n      }\r\n    },\r\n    changed: function (id, fields) {\r\n      var doc = docs.get(id);\r\n      if (!doc)\r\n        throw new Error(\"Unknown id for changed: \" + id);\r\n      var oldDoc = EJSON.clone(doc);\r\n      // writes through to the doc set\r\n      LocalCollection._applyChanges(doc, fields);\r\n      if (callbacks.changedAt) {\r\n        var index = indices ? docs.indexOf(id) : -1;\r\n        callbacks.changedAt(transform(EJSON.clone(doc)),\r\n                            transform(oldDoc), index);\r\n      } else if (callbacks.changed) {\r\n        callbacks.changed(transform(EJSON.clone(doc)),\r\n                          transform(oldDoc));\r\n      }\r\n    },\r\n    movedBefore: function (id, before) {\r\n      var doc = docs.get(id);\r\n      var from;\r\n      // only capture indexes if we're going to call the callback that needs them.\r\n      if (callbacks.movedTo)\r\n        from = indices ? docs.indexOf(id) : -1;\r\n      docs.moveBefore(id, before || null);\r\n      if (callbacks.movedTo) {\r\n        var to = indices ? docs.indexOf(id) : -1;\r\n        callbacks.movedTo(transform(EJSON.clone(doc)), from, to,\r\n                          before || null);\r\n      } else if (callbacks.moved) {\r\n        callbacks.moved(transform(EJSON.clone(doc)));\r\n      }\r\n\r\n    },\r\n    removed: function (id) {\r\n      var doc = docs.get(id);\r\n      var index;\r\n      if (callbacks.removedAt)\r\n        index = indices ? docs.indexOf(id) : -1;\r\n      docs.remove(id);\r\n      callbacks.removedAt && callbacks.removedAt(transform(doc), index);\r\n      callbacks.removed && callbacks.removed(transform(doc));\r\n    }\r\n  });\r\n  suppressed = false;\r\n  return handle;\r\n};\r\n\r\nLocalCollection._compileProjection = function (fields) {\r\n  if (!_.isObject(fields))\r\n    throw MinimongoError(\"fields option must be an object\");\r\n\r\n  if (_.any(_.values(fields), function (x) {\r\n      return _.indexOf([1, 0, true, false], x) === -1; }))\r\n    throw MinimongoError(\"Projection values should be one of 1, 0, true, or false\");\r\n\r\n  var _idProjection = _.isUndefined(fields._id) ? true : fields._id;\r\n  // Find the non-_id keys (_id is handled specially because it is included unless\r\n  // explicitly excluded). Sort the keys, so that our code to detect overlaps\r\n  // like 'foo' and 'foo.bar' can assume that 'foo' comes first.\r\n  var fieldsKeys = _.reject(_.keys(fields).sort(), function (key) { return key === '_id'; });\r\n  var including = null; // Unknown\r\n  var projectionRulesTree = {}; // Tree represented as nested objects\r\n\r\n  _.each(fieldsKeys, function (keyPath) {\r\n    var rule = !!fields[keyPath];\r\n    if (including === null)\r\n      including = rule;\r\n    if (including !== rule)\r\n      // This error message is copies from MongoDB shell\r\n      throw MinimongoError(\"You cannot currently mix including and excluding fields.\");\r\n    var treePos = projectionRulesTree;\r\n    keyPath = keyPath.split('.');\r\n\r\n    _.each(keyPath.slice(0, -1), function (key, idx) {\r\n      if (!_.has(treePos, key))\r\n        treePos[key] = {};\r\n      else if (_.isBoolean(treePos[key])) {\r\n        // Check passed projection fields' keys: If you have two rules such as\r\n        // 'foo.bar' and 'foo.bar.baz', then the result becomes ambiguous. If\r\n        // that happens, there is a probability you are doing something wrong,\r\n        // framework should notify you about such mistake earlier on cursor\r\n        // compilation step than later during runtime.  Note, that real mongo\r\n        // doesn't do anything about it and the later rule appears in projection\r\n        // project, more priority it takes.\r\n        //\r\n        // Example, assume following in mongo shell:\r\n        // > db.coll.insert({ a: { b: 23, c: 44 } })\r\n        // > db.coll.find({}, { 'a': 1, 'a.b': 1 })\r\n        // { \"_id\" : ObjectId(\"520bfe456024608e8ef24af3\"), \"a\" : { \"b\" : 23 } }\r\n        // > db.coll.find({}, { 'a.b': 1, 'a': 1 })\r\n        // { \"_id\" : ObjectId(\"520bfe456024608e8ef24af3\"), \"a\" : { \"b\" : 23, \"c\" : 44 } }\r\n        //\r\n        // Note, how second time the return set of keys is different.\r\n\r\n        var currentPath = keyPath.join('.');\r\n        var anotherPath = keyPath.slice(0, idx + 1).join('.');\r\n        throw MinimongoError(\"both \" + currentPath + \" and \" + anotherPath +\r\n         \" found in fields option, using both of them may trigger \" +\r\n         \"unexpected behavior. Did you mean to use only one of them?\");\r\n      }\r\n\r\n      treePos = treePos[key];\r\n    });\r\n\r\n    treePos[_.last(keyPath)] = including;\r\n  });\r\n\r\n  // returns transformed doc according to ruleTree\r\n  var transform = function (doc, ruleTree) {\r\n    // Special case for \"sets\"\r\n    if (_.isArray(doc))\r\n      return _.map(doc, function (subdoc) { return transform(subdoc, ruleTree); });\r\n\r\n    var res = including ? {} : EJSON.clone(doc);\r\n    _.each(ruleTree, function (rule, key) {\r\n      if (!_.has(doc, key))\r\n        return;\r\n      if (_.isObject(rule)) {\r\n        // For sub-objects/subsets we branch\r\n        if (_.isObject(doc[key]))\r\n          res[key] = transform(doc[key], rule);\r\n        // Otherwise we don't even touch this subfield\r\n      } else if (including)\r\n        res[key] = doc[key];\r\n      else\r\n        delete res[key];\r\n    });\r\n\r\n    return res;\r\n  };\r\n\r\n  return function (obj) {\r\n    var res = transform(obj, projectionRulesTree);\r\n\r\n    if (_idProjection && _.has(obj, '_id'))\r\n      res._id = obj._id;\r\n    if (!_idProjection && _.has(res, '_id'))\r\n      delete res._id;\r\n    return res;\r\n  };\r\n};\r\n\r\n// Searches $near operator in the selector recursively\r\n// (including all $or/$and/$nor/$not branches)\r\nvar isGeoQuery = function (selector) {\r\n  return _.any(selector, function (val, key) {\r\n    // Note: _.isObject matches objects and arrays\r\n    return key === \"$near\" || (_.isObject(val) && isGeoQuery(val));\r\n  });\r\n};\r\n\r\n// Checks if $near appears under some $or/$and/$nor/$not branch\r\nvar isGeoQuerySpecial = function (selector) {\r\n  return _.any(selector, function (val, key) {\r\n    if (_.contains(['$or', '$and', '$nor', '$not'], key))\r\n      return isGeoQuery(val);\r\n    // Note: _.isObject matches objects and arrays\r\n    return _.isObject(val) && isGeoQuerySpecial(val);\r\n  });\r\n};\r\n\r\n","// Like _.isArray, but doesn't regard polyfilled Uint8Arrays on old browsers as\r\n// arrays.\r\nvar isArray = function (x) {\r\n  return _.isArray(x) && !EJSON.isBinary(x);\r\n};\r\n\r\nvar _anyIfArray = function (x, f) {\r\n  if (isArray(x))\r\n    return _.any(x, f);\r\n  return f(x);\r\n};\r\n\r\nvar _anyIfArrayPlus = function (x, f) {\r\n  if (f(x))\r\n    return true;\r\n  return isArray(x) && _.any(x, f);\r\n};\r\n\r\nvar hasOperators = function(valueSelector) {\r\n  var theseAreOperators = undefined;\r\n  for (var selKey in valueSelector) {\r\n    var thisIsOperator = selKey.substr(0, 1) === '$';\r\n    if (theseAreOperators === undefined) {\r\n      theseAreOperators = thisIsOperator;\r\n    } else if (theseAreOperators !== thisIsOperator) {\r\n      throw new Error(\"Inconsistent selector: \" + valueSelector);\r\n    }\r\n  }\r\n  return !!theseAreOperators;  // {} has no operators\r\n};\r\n\r\nvar compileValueSelector = function (valueSelector, selector, cursor) {\r\n  if (valueSelector == null) {  // undefined or null\r\n    return function (value) {\r\n      return _anyIfArray(value, function (x) {\r\n        return x == null;  // undefined or null\r\n      });\r\n    };\r\n  }\r\n\r\n  // Selector is a non-null primitive (and not an array or RegExp either).\r\n  if (!_.isObject(valueSelector)) {\r\n    return function (value) {\r\n      return _anyIfArray(value, function (x) {\r\n        return x === valueSelector;\r\n      });\r\n    };\r\n  }\r\n\r\n  if (valueSelector instanceof RegExp) {\r\n    return function (value) {\r\n      if (value === undefined)\r\n        return false;\r\n      return _anyIfArray(value, function (x) {\r\n        return valueSelector.test(x);\r\n      });\r\n    };\r\n  }\r\n\r\n  // Arrays match either identical arrays or arrays that contain it as a value.\r\n  if (isArray(valueSelector)) {\r\n    return function (value) {\r\n      if (!isArray(value))\r\n        return false;\r\n      return _anyIfArrayPlus(value, function (x) {\r\n        return LocalCollection._f._equal(valueSelector, x);\r\n      });\r\n    };\r\n  }\r\n\r\n  // It's an object, but not an array or regexp.\r\n  if (hasOperators(valueSelector)) {\r\n    var operatorFunctions = [];\r\n    _.each(valueSelector, function (operand, operator) {\r\n      if (!_.has(VALUE_OPERATORS, operator))\r\n        throw new Error(\"Unrecognized operator: \" + operator);\r\n      // Special case for location operators\r\n      operatorFunctions.push(VALUE_OPERATORS[operator](\r\n        operand, valueSelector, cursor));\r\n    });\r\n    return function (value, doc) {\r\n      return _.all(operatorFunctions, function (f) {\r\n        return f(value, doc);\r\n      });\r\n    };\r\n  }\r\n\r\n  // It's a literal; compare value (or element of value array) directly to the\r\n  // selector.\r\n  return function (value) {\r\n    return _anyIfArray(value, function (x) {\r\n      return LocalCollection._f._equal(valueSelector, x);\r\n    });\r\n  };\r\n};\r\n\r\n// XXX can factor out common logic below\r\nvar LOGICAL_OPERATORS = {\r\n  \"$and\": function(subSelector, operators, cursor) {\r\n    if (!isArray(subSelector) || _.isEmpty(subSelector))\r\n      throw Error(\"$and/$or/$nor must be nonempty array\");\r\n    var subSelectorFunctions = _.map(subSelector, function (selector) {\r\n      return compileDocumentSelector(selector, cursor); });\r\n    return function (doc, wholeDoc) {\r\n      return _.all(subSelectorFunctions, function (f) {\r\n        return f(doc, wholeDoc);\r\n      });\r\n    };\r\n  },\r\n\r\n  \"$or\": function(subSelector, operators, cursor) {\r\n    if (!isArray(subSelector) || _.isEmpty(subSelector))\r\n      throw Error(\"$and/$or/$nor must be nonempty array\");\r\n    var subSelectorFunctions = _.map(subSelector, function (selector) {\r\n      return compileDocumentSelector(selector, cursor); });\r\n    return function (doc, wholeDoc) {\r\n      return _.any(subSelectorFunctions, function (f) {\r\n        return f(doc, wholeDoc);\r\n      });\r\n    };\r\n  },\r\n\r\n  \"$nor\": function(subSelector, operators, cursor) {\r\n    if (!isArray(subSelector) || _.isEmpty(subSelector))\r\n      throw Error(\"$and/$or/$nor must be nonempty array\");\r\n    var subSelectorFunctions = _.map(subSelector, function (selector) {\r\n      return compileDocumentSelector(selector, cursor); });\r\n    return function (doc, wholeDoc) {\r\n      return _.all(subSelectorFunctions, function (f) {\r\n        return !f(doc, wholeDoc);\r\n      });\r\n    };\r\n  },\r\n\r\n  \"$where\": function(selectorValue) {\r\n    if (!(selectorValue instanceof Function)) {\r\n      selectorValue = Function(\"return \" + selectorValue);\r\n    }\r\n    return function (doc) {\r\n      return selectorValue.call(doc);\r\n    };\r\n  }\r\n};\r\n\r\n// Each value operator is a function with args:\r\n//  - operand - Anything\r\n//  - operators - Object - operators on the same level (neighbours)\r\n//  - cursor - Object - original cursor\r\n// returns a function with args:\r\n//  - value - a value the operator is tested against\r\n//  - doc - the whole document tested in this query\r\nvar VALUE_OPERATORS = {\r\n  \"$in\": function (operand) {\r\n    if (!isArray(operand))\r\n      throw new Error(\"Argument to $in must be array\");\r\n    return function (value) {\r\n      return _anyIfArrayPlus(value, function (x) {\r\n        return _.any(operand, function (operandElt) {\r\n          return LocalCollection._f._equal(operandElt, x);\r\n        });\r\n      });\r\n    };\r\n  },\r\n\r\n  \"$all\": function (operand) {\r\n    if (!isArray(operand))\r\n      throw new Error(\"Argument to $all must be array\");\r\n    return function (value) {\r\n      if (!isArray(value))\r\n        return false;\r\n      return _.all(operand, function (operandElt) {\r\n        return _.any(value, function (valueElt) {\r\n          return LocalCollection._f._equal(operandElt, valueElt);\r\n        });\r\n      });\r\n    };\r\n  },\r\n\r\n  \"$lt\": function (operand) {\r\n    return function (value) {\r\n      return _anyIfArray(value, function (x) {\r\n        return LocalCollection._f._cmp(x, operand) < 0;\r\n      });\r\n    };\r\n  },\r\n\r\n  \"$lte\": function (operand) {\r\n    return function (value) {\r\n      return _anyIfArray(value, function (x) {\r\n        return LocalCollection._f._cmp(x, operand) <= 0;\r\n      });\r\n    };\r\n  },\r\n\r\n  \"$gt\": function (operand) {\r\n    return function (value) {\r\n      return _anyIfArray(value, function (x) {\r\n        return LocalCollection._f._cmp(x, operand) > 0;\r\n      });\r\n    };\r\n  },\r\n\r\n  \"$gte\": function (operand) {\r\n    return function (value) {\r\n      return _anyIfArray(value, function (x) {\r\n        return LocalCollection._f._cmp(x, operand) >= 0;\r\n      });\r\n    };\r\n  },\r\n\r\n  \"$ne\": function (operand) {\r\n    return function (value) {\r\n      return ! _anyIfArrayPlus(value, function (x) {\r\n        return LocalCollection._f._equal(x, operand);\r\n      });\r\n    };\r\n  },\r\n\r\n  \"$nin\": function (operand) {\r\n    if (!isArray(operand))\r\n      throw new Error(\"Argument to $nin must be array\");\r\n    var inFunction = VALUE_OPERATORS.$in(operand);\r\n    return function (value, doc) {\r\n      // Field doesn't exist, so it's not-in operand\r\n      if (value === undefined)\r\n        return true;\r\n      return !inFunction(value, doc);\r\n    };\r\n  },\r\n\r\n  \"$exists\": function (operand) {\r\n    return function (value) {\r\n      return operand === (value !== undefined);\r\n    };\r\n  },\r\n\r\n  \"$mod\": function (operand) {\r\n    var divisor = operand[0],\r\n        remainder = operand[1];\r\n    return function (value) {\r\n      return _anyIfArray(value, function (x) {\r\n        return x % divisor === remainder;\r\n      });\r\n    };\r\n  },\r\n\r\n  \"$size\": function (operand) {\r\n    return function (value) {\r\n      return isArray(value) && operand === value.length;\r\n    };\r\n  },\r\n\r\n  \"$type\": function (operand) {\r\n    return function (value) {\r\n      // A nonexistent field is of no type.\r\n      if (value === undefined)\r\n        return false;\r\n      // Definitely not _anyIfArrayPlus: $type: 4 only matches arrays that have\r\n      // arrays as elements according to the Mongo docs.\r\n      return _anyIfArray(value, function (x) {\r\n        return LocalCollection._f._type(x) === operand;\r\n      });\r\n    };\r\n  },\r\n\r\n  \"$regex\": function (operand, operators) {\r\n    var options = operators.$options;\r\n    if (options !== undefined) {\r\n      // Options passed in $options (even the empty string) always overrides\r\n      // options in the RegExp object itself. (See also\r\n      // Meteor.Collection._rewriteSelector.)\r\n\r\n      // Be clear that we only support the JS-supported options, not extended\r\n      // ones (eg, Mongo supports x and s). Ideally we would implement x and s\r\n      // by transforming the regexp, but not today...\r\n      if (/[^gim]/.test(options))\r\n        throw new Error(\"Only the i, m, and g regexp options are supported\");\r\n\r\n      var regexSource = operand instanceof RegExp ? operand.source : operand;\r\n      operand = new RegExp(regexSource, options);\r\n    } else if (!(operand instanceof RegExp)) {\r\n      operand = new RegExp(operand);\r\n    }\r\n\r\n    return function (value) {\r\n      if (value === undefined)\r\n        return false;\r\n      return _anyIfArray(value, function (x) {\r\n        return operand.test(x);\r\n      });\r\n    };\r\n  },\r\n\r\n  \"$options\": function (operand) {\r\n    // evaluation happens at the $regex function above\r\n    return function (value) { return true; };\r\n  },\r\n\r\n  \"$elemMatch\": function (operand, selector, cursor) {\r\n    var matcher = compileDocumentSelector(operand, cursor);\r\n    return function (value, doc) {\r\n      if (!isArray(value))\r\n        return false;\r\n      return _.any(value, function (x) {\r\n        return matcher(x, doc);\r\n      });\r\n    };\r\n  },\r\n\r\n  \"$not\": function (operand, operators, cursor) {\r\n    var matcher = compileValueSelector(operand, operators, cursor);\r\n    return function (value, doc) {\r\n      return !matcher(value, doc);\r\n    };\r\n  },\r\n\r\n  \"$near\": function (operand, operators, cursor) {\r\n    function distanceCoordinatePairs (a, b) {\r\n      a = pointToArray(a);\r\n      b = pointToArray(b);\r\n      var x = a[0] - b[0];\r\n      var y = a[1] - b[1];\r\n      if (_.isNaN(x) || _.isNaN(y))\r\n        return null;\r\n      return Math.sqrt(x * x + y * y);\r\n    }\r\n    // Makes sure we get 2 elements array and assume the first one to be x and\r\n    // the second one to y no matter what user passes.\r\n    // In case user passes { lon: x, lat: y } returns [x, y]\r\n    function pointToArray (point) {\r\n      return _.map(point, _.identity);\r\n    }\r\n    // GeoJSON query is marked as $geometry property\r\n    var mode = _.isObject(operand) && _.has(operand, '$geometry') ? \"2dsphere\" : \"2d\";\r\n    var maxDistance = mode === \"2d\" ? operators.$maxDistance : operand.$maxDistance;\r\n    var point = mode === \"2d\" ? operand : operand.$geometry;\r\n    return function (value, doc) {\r\n      var dist = null;\r\n      switch (mode) {\r\n        case \"2d\":\r\n          dist = distanceCoordinatePairs(point, value);\r\n          break;\r\n        case \"2dsphere\":\r\n          // XXX: for now, we don't calculate the actual distance between, say,\r\n          // polygon and circle. If people care about this use-case it will get\r\n          // a priority.\r\n          if (value.type === \"Point\")\r\n            dist = GeoJSON.pointDistance(point, value);\r\n          else\r\n            dist = GeoJSON.geometryWithinRadius(value, point, maxDistance) ?\r\n                     0 : maxDistance + 1;\r\n          break;\r\n      }\r\n      // Used later in sorting by distance, since $near queries are sorted by\r\n      // distance from closest to farthest.\r\n      if (cursor) {\r\n        if (!cursor._distance)\r\n          cursor._distance = {};\r\n        cursor._distance[doc._id] = dist;\r\n      }\r\n\r\n      // Distance couldn't parse a geometry object\r\n      if (dist === null)\r\n        return false;\r\n\r\n      return maxDistance === undefined ? true : dist <= maxDistance;\r\n    };\r\n  },\r\n\r\n  \"$maxDistance\": function () {\r\n    // evaluation happens in the $near operator\r\n    return function () { return true; }\r\n  }\r\n};\r\n\r\n// helpers used by compiled selector code\r\nLocalCollection._f = {\r\n  // XXX for _all and _in, consider building 'inquery' at compile time..\r\n\r\n  _type: function (v) {\r\n    if (typeof v === \"number\")\r\n      return 1;\r\n    if (typeof v === \"string\")\r\n      return 2;\r\n    if (typeof v === \"boolean\")\r\n      return 8;\r\n    if (isArray(v))\r\n      return 4;\r\n    if (v === null)\r\n      return 10;\r\n    if (v instanceof RegExp)\r\n      return 11;\r\n    if (typeof v === \"function\")\r\n      // note that typeof(/x/) === \"function\"\r\n      return 13;\r\n    if (v instanceof Date)\r\n      return 9;\r\n    if (EJSON.isBinary(v))\r\n      return 5;\r\n    if (v instanceof LocalCollection._ObjectID)\r\n      return 7;\r\n    return 3; // object\r\n\r\n    // XXX support some/all of these:\r\n    // 14, symbol\r\n    // 15, javascript code with scope\r\n    // 16, 18: 32-bit/64-bit integer\r\n    // 17, timestamp\r\n    // 255, minkey\r\n    // 127, maxkey\r\n  },\r\n\r\n  // deep equality test: use for literal document and array matches\r\n  _equal: function (a, b) {\r\n    return EJSON.equals(a, b, {keyOrderSensitive: true});\r\n  },\r\n\r\n  // maps a type code to a value that can be used to sort values of\r\n  // different types\r\n  _typeorder: function (t) {\r\n    // http://www.mongodb.org/display/DOCS/What+is+the+Compare+Order+for+BSON+Types\r\n    // XXX what is the correct sort position for Javascript code?\r\n    // ('100' in the matrix below)\r\n    // XXX minkey/maxkey\r\n    return [-1,  // (not a type)\r\n            1,   // number\r\n            2,   // string\r\n            3,   // object\r\n            4,   // array\r\n            5,   // binary\r\n            -1,  // deprecated\r\n            6,   // ObjectID\r\n            7,   // bool\r\n            8,   // Date\r\n            0,   // null\r\n            9,   // RegExp\r\n            -1,  // deprecated\r\n            100, // JS code\r\n            2,   // deprecated (symbol)\r\n            100, // JS code\r\n            1,   // 32-bit int\r\n            8,   // Mongo timestamp\r\n            1    // 64-bit int\r\n           ][t];\r\n  },\r\n\r\n  // compare two values of unknown type according to BSON ordering\r\n  // semantics. (as an extension, consider 'undefined' to be less than\r\n  // any other value.) return negative if a is less, positive if b is\r\n  // less, or 0 if equal\r\n  _cmp: function (a, b) {\r\n    if (a === undefined)\r\n      return b === undefined ? 0 : -1;\r\n    if (b === undefined)\r\n      return 1;\r\n    var ta = LocalCollection._f._type(a);\r\n    var tb = LocalCollection._f._type(b);\r\n    var oa = LocalCollection._f._typeorder(ta);\r\n    var ob = LocalCollection._f._typeorder(tb);\r\n    if (oa !== ob)\r\n      return oa < ob ? -1 : 1;\r\n    if (ta !== tb)\r\n      // XXX need to implement this if we implement Symbol or integers, or\r\n      // Timestamp\r\n      throw Error(\"Missing type coercion logic in _cmp\");\r\n    if (ta === 7) { // ObjectID\r\n      // Convert to string.\r\n      ta = tb = 2;\r\n      a = a.toHexString();\r\n      b = b.toHexString();\r\n    }\r\n    if (ta === 9) { // Date\r\n      // Convert to millis.\r\n      ta = tb = 1;\r\n      a = a.getTime();\r\n      b = b.getTime();\r\n    }\r\n\r\n    if (ta === 1) // double\r\n      return a - b;\r\n    if (tb === 2) // string\r\n      return a < b ? -1 : (a === b ? 0 : 1);\r\n    if (ta === 3) { // Object\r\n      // this could be much more efficient in the expected case ...\r\n      var to_array = function (obj) {\r\n        var ret = [];\r\n        for (var key in obj) {\r\n          ret.push(key);\r\n          ret.push(obj[key]);\r\n        }\r\n        return ret;\r\n      };\r\n      return LocalCollection._f._cmp(to_array(a), to_array(b));\r\n    }\r\n    if (ta === 4) { // Array\r\n      for (var i = 0; ; i++) {\r\n        if (i === a.length)\r\n          return (i === b.length) ? 0 : -1;\r\n        if (i === b.length)\r\n          return 1;\r\n        var s = LocalCollection._f._cmp(a[i], b[i]);\r\n        if (s !== 0)\r\n          return s;\r\n      }\r\n    }\r\n    if (ta === 5) { // binary\r\n      // Surprisingly, a small binary blob is always less than a large one in\r\n      // Mongo.\r\n      if (a.length !== b.length)\r\n        return a.length - b.length;\r\n      for (i = 0; i < a.length; i++) {\r\n        if (a[i] < b[i])\r\n          return -1;\r\n        if (a[i] > b[i])\r\n          return 1;\r\n      }\r\n      return 0;\r\n    }\r\n    if (ta === 8) { // boolean\r\n      if (a) return b ? 0 : 1;\r\n      return b ? -1 : 0;\r\n    }\r\n    if (ta === 10) // null\r\n      return 0;\r\n    if (ta === 11) // regexp\r\n      throw Error(\"Sorting not supported on regular expression\"); // XXX\r\n    // 13: javascript code\r\n    // 14: symbol\r\n    // 15: javascript code with scope\r\n    // 16: 32-bit integer\r\n    // 17: timestamp\r\n    // 18: 64-bit integer\r\n    // 255: minkey\r\n    // 127: maxkey\r\n    if (ta === 13) // javascript code\r\n      throw Error(\"Sorting not supported on Javascript code\"); // XXX\r\n    throw Error(\"Unknown type to sort\");\r\n  }\r\n};\r\n\r\n// For unit tests. True if the given document matches the given\r\n// selector.\r\nLocalCollection._matches = function (selector, doc) {\r\n  return (LocalCollection._compileSelector(selector))(doc);\r\n};\r\n\r\n// _makeLookupFunction(key) returns a lookup function.\r\n//\r\n// A lookup function takes in a document and returns an array of matching\r\n// values.  This array has more than one element if any segment of the key other\r\n// than the last one is an array.  ie, any arrays found when doing non-final\r\n// lookups result in this function \"branching\"; each element in the returned\r\n// array represents the value found at this branch. If any branch doesn't have a\r\n// final value for the full key, its element in the returned list will be\r\n// undefined. It always returns a non-empty array.\r\n//\r\n// _makeLookupFunction('a.x')({a: {x: 1}}) returns [1]\r\n// _makeLookupFunction('a.x')({a: {x: [1]}}) returns [[1]]\r\n// _makeLookupFunction('a.x')({a: 5})  returns [undefined]\r\n// _makeLookupFunction('a.x')({a: [{x: 1},\r\n//                                 {x: [2]},\r\n//                                 {y: 3}]})\r\n//   returns [1, [2], undefined]\r\nLocalCollection._makeLookupFunction = function (key) {\r\n  var dotLocation = key.indexOf('.');\r\n  var first, lookupRest, nextIsNumeric;\r\n  if (dotLocation === -1) {\r\n    first = key;\r\n  } else {\r\n    first = key.substr(0, dotLocation);\r\n    var rest = key.substr(dotLocation + 1);\r\n    lookupRest = LocalCollection._makeLookupFunction(rest);\r\n    // Is the next (perhaps final) piece numeric (ie, an array lookup?)\r\n    nextIsNumeric = /^\\d+(\\.|$)/.test(rest);\r\n  }\r\n\r\n  return function (doc) {\r\n    if (doc == null)  // null or undefined\r\n      return [undefined];\r\n    var firstLevel = doc[first];\r\n\r\n    // We don't \"branch\" at the final level.\r\n    if (!lookupRest)\r\n      return [firstLevel];\r\n\r\n    // It's an empty array, and we're not done: we won't find anything.\r\n    if (isArray(firstLevel) && firstLevel.length === 0)\r\n      return [undefined];\r\n\r\n    // For each result at this level, finish the lookup on the rest of the key,\r\n    // and return everything we find. Also, if the next result is a number,\r\n    // don't branch here.\r\n    //\r\n    // Technically, in MongoDB, we should be able to handle the case where\r\n    // objects have numeric keys, but Mongo doesn't actually handle this\r\n    // consistently yet itself, see eg\r\n    // https://jira.mongodb.org/browse/SERVER-2898\r\n    // https://github.com/mongodb/mongo/blob/master/jstests/array_match2.js\r\n    if (!isArray(firstLevel) || nextIsNumeric)\r\n      firstLevel = [firstLevel];\r\n    return Array.prototype.concat.apply([], _.map(firstLevel, lookupRest));\r\n  };\r\n};\r\n\r\n// The main compilation function for a given selector.\r\nvar compileDocumentSelector = function (docSelector, cursor) {\r\n  var perKeySelectors = [];\r\n  _.each(docSelector, function (subSelector, key) {\r\n    if (key.substr(0, 1) === '$') {\r\n      // Outer operators are either logical operators (they recurse back into\r\n      // this function), or $where.\r\n      if (!_.has(LOGICAL_OPERATORS, key))\r\n        throw new Error(\"Unrecognized logical operator: \" + key);\r\n      perKeySelectors.push(\r\n        LOGICAL_OPERATORS[key](subSelector, docSelector, cursor));\r\n    } else {\r\n      var lookUpByIndex = LocalCollection._makeLookupFunction(key);\r\n      var valueSelectorFunc =\r\n        compileValueSelector(subSelector, docSelector, cursor);\r\n      perKeySelectors.push(function (doc, wholeDoc) {\r\n        var branchValues = lookUpByIndex(doc);\r\n        // We apply the selector to each \"branched\" value and return true if any\r\n        // match. However, for \"negative\" selectors like $ne or $not we actually\r\n        // require *all* elements to match.\r\n        //\r\n        // This is because {'x.tag': {$ne: \"foo\"}} applied to {x: [{tag: 'foo'},\r\n        // {tag: 'bar'}]} should NOT match even though there is a branch that\r\n        // matches. (This matches the fact that $ne uses a negated\r\n        // _anyIfArrayPlus, for when the last level of the key is the array,\r\n        // which deMorgans into an 'all'.)\r\n        //\r\n        // XXX This isn't 100% consistent with MongoDB in 'null' cases:\r\n        //     https://jira.mongodb.org/browse/SERVER-8585\r\n        // XXX this still isn't right.  consider {a: {$ne: 5, $gt: 6}}. the\r\n        //     $ne needs to use the \"all\" logic and the $gt needs the \"any\"\r\n        //     logic\r\n        var combiner = (subSelector &&\r\n                        (subSelector.$not || subSelector.$ne ||\r\n                         subSelector.$nin))\r\n              ? _.all : _.any;\r\n        return combiner(branchValues, function (val) {\r\n          return valueSelectorFunc(val, wholeDoc);\r\n        });\r\n      });\r\n    }\r\n  });\r\n\r\n\r\n  return function (doc, wholeDoc) {\r\n    // If called w/o wholeDoc, doc is considered the original by default\r\n    if (wholeDoc === undefined)\r\n      wholeDoc = doc;\r\n    return _.all(perKeySelectors, function (f) {\r\n      return f(doc, wholeDoc);\r\n    });\r\n  };\r\n};\r\n\r\n// Given a selector, return a function that takes one argument, a\r\n// document, and returns true if the document matches the selector,\r\n// else false.\r\nLocalCollection._compileSelector = function (selector, cursor) {\r\n  // you can pass a literal function instead of a selector\r\n  if (selector instanceof Function)\r\n    return function (doc) {return selector.call(doc);};\r\n\r\n  // shorthand -- scalars match _id\r\n  if (LocalCollection._selectorIsId(selector)) {\r\n    return function (doc) {\r\n      return EJSON.equals(doc._id, selector);\r\n    };\r\n  }\r\n\r\n  // protect against dangerous selectors.  falsey and {_id: falsey} are both\r\n  // likely programmer error, and not what you want, particularly for\r\n  // destructive operations.\r\n  if (!selector || (('_id' in selector) && !selector._id))\r\n    return function (doc) {return false;};\r\n\r\n  // Top level can't be an array or true or binary.\r\n  if (typeof(selector) === 'boolean' || isArray(selector) ||\r\n      EJSON.isBinary(selector))\r\n    throw new Error(\"Invalid selector: \" + selector);\r\n\r\n  return compileDocumentSelector(selector, cursor);\r\n};\r\n\r\n// Give a sort spec, which can be in any of these forms:\r\n//   {\"key1\": 1, \"key2\": -1}\r\n//   [[\"key1\", \"asc\"], [\"key2\", \"desc\"]]\r\n//   [\"key1\", [\"key2\", \"desc\"]]\r\n//\r\n// (.. with the first form being dependent on the key enumeration\r\n// behavior of your javascript VM, which usually does what you mean in\r\n// this case if the key names don't look like integers ..)\r\n//\r\n// return a function that takes two objects, and returns -1 if the\r\n// first object comes first in order, 1 if the second object comes\r\n// first, or 0 if neither object comes before the other.\r\n\r\nLocalCollection._compileSort = function (spec, cursor) {\r\n  var sortSpecParts = [];\r\n\r\n  if (spec instanceof Array) {\r\n    for (var i = 0; i < spec.length; i++) {\r\n      if (typeof spec[i] === \"string\") {\r\n        sortSpecParts.push({\r\n          lookup: LocalCollection._makeLookupFunction(spec[i]),\r\n          ascending: true\r\n        });\r\n      } else {\r\n        sortSpecParts.push({\r\n          lookup: LocalCollection._makeLookupFunction(spec[i][0]),\r\n          ascending: spec[i][1] !== \"desc\"\r\n        });\r\n      }\r\n    }\r\n  } else if (typeof spec === \"object\") {\r\n    for (var key in spec) {\r\n      sortSpecParts.push({\r\n        lookup: LocalCollection._makeLookupFunction(key),\r\n        ascending: spec[key] >= 0\r\n      });\r\n    }\r\n  } else {\r\n    throw Error(\"Bad sort specification: \", JSON.stringify(spec));\r\n  }\r\n\r\n  // If there are no sorting rules specified, try to sort on _distance hidden\r\n  // fields on cursor we may acquire if query involved $near operator.\r\n  if (sortSpecParts.length === 0)\r\n    return function (a, b) {\r\n      if (!cursor || !cursor._distance)\r\n        return 0;\r\n      return cursor._distance[a._id] - cursor._distance[b._id];\r\n    };\r\n\r\n  // reduceValue takes in all the possible values for the sort key along various\r\n  // branches, and returns the min or max value (according to the bool\r\n  // findMin). Each value can itself be an array, and we look at its values\r\n  // too. (ie, we do a single level of flattening on branchValues, then find the\r\n  // min/max.)\r\n  var reduceValue = function (branchValues, findMin) {\r\n    var reduced;\r\n    var first = true;\r\n    // Iterate over all the values found in all the branches, and if a value is\r\n    // an array itself, iterate over the values in the array separately.\r\n    _.each(branchValues, function (branchValue) {\r\n      // Value not an array? Pretend it is.\r\n      if (!isArray(branchValue))\r\n        branchValue = [branchValue];\r\n      // Value is an empty array? Pretend it was missing, since that's where it\r\n      // should be sorted.\r\n      if (isArray(branchValue) && branchValue.length === 0)\r\n        branchValue = [undefined];\r\n      _.each(branchValue, function (value) {\r\n        // We should get here at least once: lookup functions return non-empty\r\n        // arrays, so the outer loop runs at least once, and we prevented\r\n        // branchValue from being an empty array.\r\n        if (first) {\r\n          reduced = value;\r\n          first = false;\r\n        } else {\r\n          // Compare the value we found to the value we found so far, saving it\r\n          // if it's less (for an ascending sort) or more (for a descending\r\n          // sort).\r\n          var cmp = LocalCollection._f._cmp(reduced, value);\r\n          if ((findMin && cmp > 0) || (!findMin && cmp < 0))\r\n            reduced = value;\r\n        }\r\n      });\r\n    });\r\n    return reduced;\r\n  };\r\n\r\n  return function (a, b) {\r\n    for (var i = 0; i < sortSpecParts.length; ++i) {\r\n      var specPart = sortSpecParts[i];\r\n      var aValue = reduceValue(specPart.lookup(a), specPart.ascending);\r\n      var bValue = reduceValue(specPart.lookup(b), specPart.ascending);\r\n      var compare = LocalCollection._f._cmp(aValue, bValue);\r\n      if (compare !== 0)\r\n        return specPart.ascending ? compare : -compare;\r\n    };\r\n    return 0;\r\n  };\r\n};\r\n\r\n","// XXX need a strategy for passing the binding of $ into this\r\n// function, from the compiled selector\r\n//\r\n// maybe just {key.up.to.just.before.dollarsign: array_index}\r\n//\r\n// XXX atomicity: if one modification fails, do we roll back the whole\r\n// change?\r\n//\r\n// isInsert is set when _modify is being called to compute the document to\r\n// insert as part of an upsert operation. We use this primarily to figure out\r\n// when to set the fields in $setOnInsert, if present.\r\nLocalCollection._modify = function (doc, mod, isInsert) {\r\n  var is_modifier = false;\r\n  for (var k in mod) {\r\n    // IE7 doesn't support indexing into strings (eg, k[0]), so use substr.\r\n    // Too bad -- it's far slower:\r\n    // http://jsperf.com/testing-the-first-character-of-a-string\r\n    is_modifier = k.substr(0, 1) === '$';\r\n    break; // just check the first key.\r\n  }\r\n\r\n  var new_doc;\r\n\r\n  if (!is_modifier) {\r\n    if (mod._id && !EJSON.equals(doc._id, mod._id))\r\n      throw Error(\"Cannot change the _id of a document\");\r\n\r\n    // replace the whole document\r\n    for (var k in mod) {\r\n      if (k.substr(0, 1) === '$')\r\n        throw Error(\"When replacing document, field name may not start with '$'\");\r\n      if (/\\./.test(k))\r\n        throw Error(\"When replacing document, field name may not contain '.'\");\r\n    }\r\n    new_doc = mod;\r\n  } else {\r\n    // apply modifiers\r\n    var new_doc = EJSON.clone(doc);\r\n\r\n    for (var op in mod) {\r\n      var mod_func = LocalCollection._modifiers[op];\r\n      // Treat $setOnInsert as $set if this is an insert.\r\n      if (isInsert && op === '$setOnInsert')\r\n        mod_func = LocalCollection._modifiers['$set'];\r\n      if (!mod_func)\r\n        throw Error(\"Invalid modifier specified \" + op);\r\n      for (var keypath in mod[op]) {\r\n        // XXX mongo doesn't allow mod field names to end in a period,\r\n        // but I don't see why.. it allows '' as a key, as does JS\r\n        if (keypath.length && keypath[keypath.length-1] === '.')\r\n          throw Error(\"Invalid mod field name, may not end in a period\");\r\n\r\n        var arg = mod[op][keypath];\r\n        var keyparts = keypath.split('.');\r\n        var no_create = !!LocalCollection._noCreateModifiers[op];\r\n        var forbid_array = (op === \"$rename\");\r\n        var target = LocalCollection._findModTarget(new_doc, keyparts,\r\n                                                    no_create, forbid_array);\r\n        var field = keyparts.pop();\r\n        mod_func(target, field, arg, keypath, new_doc);\r\n      }\r\n    }\r\n  }\r\n\r\n  // move new document into place.\r\n  _.each(_.keys(doc), function (k) {\r\n    // Note: this used to be for (var k in doc) however, this does not\r\n    // work right in Opera. Deleting from a doc while iterating over it\r\n    // would sometimes cause opera to skip some keys.\r\n\r\n    // isInsert: if we're constructing a document to insert (via upsert)\r\n    // and we're in replacement mode, not modify mode, DON'T take the\r\n    // _id from the query.  This matches mongo's behavior.\r\n    if (k !== '_id' || isInsert)\r\n      delete doc[k];\r\n  });\r\n  for (var k in new_doc) {\r\n    doc[k] = new_doc[k];\r\n  }\r\n};\r\n\r\n// for a.b.c.2.d.e, keyparts should be ['a', 'b', 'c', '2', 'd', 'e'],\r\n// and then you would operate on the 'e' property of the returned\r\n// object. if no_create is falsey, creates intermediate levels of\r\n// structure as necessary, like mkdir -p (and raises an exception if\r\n// that would mean giving a non-numeric property to an array.) if\r\n// no_create is true, return undefined instead. may modify the last\r\n// element of keyparts to signal to the caller that it needs to use a\r\n// different value to index into the returned object (for example,\r\n// ['a', '01'] -> ['a', 1]). if forbid_array is true, return null if\r\n// the keypath goes through an array.\r\nLocalCollection._findModTarget = function (doc, keyparts, no_create,\r\n                                      forbid_array) {\r\n  for (var i = 0; i < keyparts.length; i++) {\r\n    var last = (i === keyparts.length - 1);\r\n    var keypart = keyparts[i];\r\n    var numeric = /^[0-9]+$/.test(keypart);\r\n    if (no_create && (!(typeof doc === \"object\") || !(keypart in doc)))\r\n      return undefined;\r\n    if (doc instanceof Array) {\r\n      if (forbid_array)\r\n        return null;\r\n      if (!numeric)\r\n        throw Error(\"can't append to array using string field name [\"\r\n                    + keypart + \"]\");\r\n      keypart = parseInt(keypart);\r\n      if (last)\r\n        // handle 'a.01'\r\n        keyparts[i] = keypart;\r\n      while (doc.length < keypart)\r\n        doc.push(null);\r\n      if (!last) {\r\n        if (doc.length === keypart)\r\n          doc.push({});\r\n        else if (typeof doc[keypart] !== \"object\")\r\n          throw Error(\"can't modify field '\" + keyparts[i + 1] +\r\n                      \"' of list value \" + JSON.stringify(doc[keypart]));\r\n      }\r\n    } else {\r\n      // XXX check valid fieldname (no $ at start, no .)\r\n      if (!last && !(keypart in doc))\r\n        doc[keypart] = {};\r\n    }\r\n\r\n    if (last)\r\n      return doc;\r\n    doc = doc[keypart];\r\n  }\r\n\r\n  // notreached\r\n};\r\n\r\nLocalCollection._noCreateModifiers = {\r\n  $unset: true,\r\n  $pop: true,\r\n  $rename: true,\r\n  $pull: true,\r\n  $pullAll: true\r\n};\r\n\r\nLocalCollection._modifiers = {\r\n  $inc: function (target, field, arg) {\r\n    if (typeof arg !== \"number\")\r\n      throw Error(\"Modifier $inc allowed for numbers only\");\r\n    if (field in target) {\r\n      if (typeof target[field] !== \"number\")\r\n        throw Error(\"Cannot apply $inc modifier to non-number\");\r\n      target[field] += arg;\r\n    } else {\r\n      target[field] = arg;\r\n    }\r\n  },\r\n  $set: function (target, field, arg) {\r\n    if (field === '_id' && !EJSON.equals(arg, target._id))\r\n      throw Error(\"Cannot change the _id of a document\");\r\n\r\n    target[field] = EJSON.clone(arg);\r\n  },\r\n  $setOnInsert: function (target, field, arg) {\r\n    // converted to `$set` in `_modify`\r\n  },\r\n  $unset: function (target, field, arg) {\r\n    if (target !== undefined) {\r\n      if (target instanceof Array) {\r\n        if (field in target)\r\n          target[field] = null;\r\n      } else\r\n        delete target[field];\r\n    }\r\n  },\r\n  $push: function (target, field, arg) {\r\n    var x = target[field];\r\n    if (x === undefined)\r\n      target[field] = [arg];\r\n    else if (!(x instanceof Array))\r\n      throw Error(\"Cannot apply $push modifier to non-array\");\r\n    else\r\n      x.push(EJSON.clone(arg));\r\n  },\r\n  $pushAll: function (target, field, arg) {\r\n    if (!(typeof arg === \"object\" && arg instanceof Array))\r\n      throw Error(\"Modifier $pushAll/pullAll allowed for arrays only\");\r\n    var x = target[field];\r\n    if (x === undefined)\r\n      target[field] = arg;\r\n    else if (!(x instanceof Array))\r\n      throw Error(\"Cannot apply $pushAll modifier to non-array\");\r\n    else {\r\n      for (var i = 0; i < arg.length; i++)\r\n        x.push(arg[i]);\r\n    }\r\n  },\r\n  $addToSet: function (target, field, arg) {\r\n    var x = target[field];\r\n    if (x === undefined)\r\n      target[field] = [arg];\r\n    else if (!(x instanceof Array))\r\n      throw Error(\"Cannot apply $addToSet modifier to non-array\");\r\n    else {\r\n      var isEach = false;\r\n      if (typeof arg === \"object\") {\r\n        for (var k in arg) {\r\n          if (k === \"$each\")\r\n            isEach = true;\r\n          break;\r\n        }\r\n      }\r\n      var values = isEach ? arg[\"$each\"] : [arg];\r\n      _.each(values, function (value) {\r\n        for (var i = 0; i < x.length; i++)\r\n          if (LocalCollection._f._equal(value, x[i]))\r\n            return;\r\n        x.push(value);\r\n      });\r\n    }\r\n  },\r\n  $pop: function (target, field, arg) {\r\n    if (target === undefined)\r\n      return;\r\n    var x = target[field];\r\n    if (x === undefined)\r\n      return;\r\n    else if (!(x instanceof Array))\r\n      throw Error(\"Cannot apply $pop modifier to non-array\");\r\n    else {\r\n      if (typeof arg === 'number' && arg < 0)\r\n        x.splice(0, 1);\r\n      else\r\n        x.pop();\r\n    }\r\n  },\r\n  $pull: function (target, field, arg) {\r\n    if (target === undefined)\r\n      return;\r\n    var x = target[field];\r\n    if (x === undefined)\r\n      return;\r\n    else if (!(x instanceof Array))\r\n      throw Error(\"Cannot apply $pull/pullAll modifier to non-array\");\r\n    else {\r\n      var out = []\r\n      if (typeof arg === \"object\" && !(arg instanceof Array)) {\r\n        // XXX would be much nicer to compile this once, rather than\r\n        // for each document we modify.. but usually we're not\r\n        // modifying that many documents, so we'll let it slide for\r\n        // now\r\n\r\n        // XXX _compileSelector isn't up for the job, because we need\r\n        // to permit stuff like {$pull: {a: {$gt: 4}}}.. something\r\n        // like {$gt: 4} is not normally a complete selector.\r\n        // same issue as $elemMatch possibly?\r\n        var match = LocalCollection._compileSelector(arg);\r\n        for (var i = 0; i < x.length; i++)\r\n          if (!match(x[i]))\r\n            out.push(x[i])\r\n      } else {\r\n        for (var i = 0; i < x.length; i++)\r\n          if (!LocalCollection._f._equal(x[i], arg))\r\n            out.push(x[i]);\r\n      }\r\n      target[field] = out;\r\n    }\r\n  },\r\n  $pullAll: function (target, field, arg) {\r\n    if (!(typeof arg === \"object\" && arg instanceof Array))\r\n      throw Error(\"Modifier $pushAll/pullAll allowed for arrays only\");\r\n    if (target === undefined)\r\n      return;\r\n    var x = target[field];\r\n    if (x === undefined)\r\n      return;\r\n    else if (!(x instanceof Array))\r\n      throw Error(\"Cannot apply $pull/pullAll modifier to non-array\");\r\n    else {\r\n      var out = []\r\n      for (var i = 0; i < x.length; i++) {\r\n        var exclude = false;\r\n        for (var j = 0; j < arg.length; j++) {\r\n          if (LocalCollection._f._equal(x[i], arg[j])) {\r\n            exclude = true;\r\n            break;\r\n          }\r\n        }\r\n        if (!exclude)\r\n          out.push(x[i]);\r\n      }\r\n      target[field] = out;\r\n    }\r\n  },\r\n  $rename: function (target, field, arg, keypath, doc) {\r\n    if (keypath === arg)\r\n      // no idea why mongo has this restriction..\r\n      throw Error(\"$rename source must differ from target\");\r\n    if (target === null)\r\n      throw Error(\"$rename source field invalid\");\r\n    if (typeof arg !== \"string\")\r\n      throw Error(\"$rename target must be a string\");\r\n    if (target === undefined)\r\n      return;\r\n    var v = target[field];\r\n    delete target[field];\r\n\r\n    var keyparts = arg.split('.');\r\n    var target2 = LocalCollection._findModTarget(doc, keyparts, false, true);\r\n    if (target2 === null)\r\n      throw Error(\"$rename target field invalid\");\r\n    var field2 = keyparts.pop();\r\n    target2[field2] = v;\r\n  },\r\n  $bit: function (target, field, arg) {\r\n    // XXX mongo only supports $bit on integers, and we only support\r\n    // native javascript numbers (doubles) so far, so we can't support $bit\r\n    throw Error(\"$bit is not supported\");\r\n  }\r\n};\r\n\r\nLocalCollection._removeDollarOperators = function (selector) {\r\n  var selectorDoc = {};\r\n  for (var k in selector)\r\n    if (k.substr(0, 1) !== '$')\r\n      selectorDoc[k] = selector[k];\r\n  return selectorDoc;\r\n};\r\n","\r\n// ordered: bool.\r\n// old_results and new_results: collections of documents.\r\n//    if ordered, they are arrays.\r\n//    if unordered, they are maps {_id: doc}.\r\n// observer: object with 'added', 'changed', 'removed',\r\n//           and (if ordered) 'moved' functions (each optional)\r\nLocalCollection._diffQueryChanges = function (ordered, oldResults, newResults,\r\n                                       observer) {\r\n  if (ordered)\r\n    LocalCollection._diffQueryOrderedChanges(\r\n      oldResults, newResults, observer);\r\n  else\r\n    LocalCollection._diffQueryUnorderedChanges(\r\n      oldResults, newResults, observer);\r\n};\r\n\r\nLocalCollection._diffQueryUnorderedChanges = function (oldResults, newResults,\r\n                                                observer) {\r\n  if (observer.moved) {\r\n    throw new Error(\"_diffQueryUnordered called with a moved observer!\");\r\n  }\r\n\r\n  _.each(newResults, function (newDoc) {\r\n    if (_.has(oldResults, newDoc._id)) {\r\n      var oldDoc = oldResults[newDoc._id];\r\n      if (observer.changed && !EJSON.equals(oldDoc, newDoc)) {\r\n        observer.changed(newDoc._id, LocalCollection._makeChangedFields(newDoc, oldDoc));\r\n      }\r\n    } else {\r\n      var fields = EJSON.clone(newDoc);\r\n      delete fields._id;\r\n      observer.added && observer.added(newDoc._id, fields);\r\n    }\r\n  });\r\n\r\n  if (observer.removed) {\r\n    _.each(oldResults, function (oldDoc) {\r\n      if (!_.has(newResults, oldDoc._id))\r\n        observer.removed(oldDoc._id);\r\n    });\r\n  }\r\n};\r\n\r\n\r\nLocalCollection._diffQueryOrderedChanges = function (old_results, new_results, observer) {\r\n\r\n  var new_presence_of_id = {};\r\n  _.each(new_results, function (doc) {\r\n    if (new_presence_of_id[doc._id])\r\n      Meteor._debug(\"Duplicate _id in new_results\");\r\n    new_presence_of_id[doc._id] = true;\r\n  });\r\n\r\n  var old_index_of_id = {};\r\n  _.each(old_results, function (doc, i) {\r\n    if (doc._id in old_index_of_id)\r\n      Meteor._debug(\"Duplicate _id in old_results\");\r\n    old_index_of_id[doc._id] = i;\r\n  });\r\n\r\n  // ALGORITHM:\r\n  //\r\n  // To determine which docs should be considered \"moved\" (and which\r\n  // merely change position because of other docs moving) we run\r\n  // a \"longest common subsequence\" (LCS) algorithm.  The LCS of the\r\n  // old doc IDs and the new doc IDs gives the docs that should NOT be\r\n  // considered moved.\r\n\r\n  // To actually call the appropriate callbacks to get from the old state to the\r\n  // new state:\r\n\r\n  // First, we call removed() on all the items that only appear in the old\r\n  // state.\r\n\r\n  // Then, once we have the items that should not move, we walk through the new\r\n  // results array group-by-group, where a \"group\" is a set of items that have\r\n  // moved, anchored on the end by an item that should not move.  One by one, we\r\n  // move each of those elements into place \"before\" the anchoring end-of-group\r\n  // item, and fire changed events on them if necessary.  Then we fire a changed\r\n  // event on the anchor, and move on to the next group.  There is always at\r\n  // least one group; the last group is anchored by a virtual \"null\" id at the\r\n  // end.\r\n\r\n  // Asymptotically: O(N k) where k is number of ops, or potentially\r\n  // O(N log N) if inner loop of LCS were made to be binary search.\r\n\r\n\r\n  //////// LCS (longest common sequence, with respect to _id)\r\n  // (see Wikipedia article on Longest Increasing Subsequence,\r\n  // where the LIS is taken of the sequence of old indices of the\r\n  // docs in new_results)\r\n  //\r\n  // unmoved: the output of the algorithm; members of the LCS,\r\n  // in the form of indices into new_results\r\n  var unmoved = [];\r\n  // max_seq_len: length of LCS found so far\r\n  var max_seq_len = 0;\r\n  // seq_ends[i]: the index into new_results of the last doc in a\r\n  // common subsequence of length of i+1 <= max_seq_len\r\n  var N = new_results.length;\r\n  var seq_ends = new Array(N);\r\n  // ptrs:  the common subsequence ending with new_results[n] extends\r\n  // a common subsequence ending with new_results[ptr[n]], unless\r\n  // ptr[n] is -1.\r\n  var ptrs = new Array(N);\r\n  // virtual sequence of old indices of new results\r\n  var old_idx_seq = function(i_new) {\r\n    return old_index_of_id[new_results[i_new]._id];\r\n  };\r\n  // for each item in new_results, use it to extend a common subsequence\r\n  // of length j <= max_seq_len\r\n  for(var i=0; i<N; i++) {\r\n    if (old_index_of_id[new_results[i]._id] !== undefined) {\r\n      var j = max_seq_len;\r\n      // this inner loop would traditionally be a binary search,\r\n      // but scanning backwards we will likely find a subseq to extend\r\n      // pretty soon, bounded for example by the total number of ops.\r\n      // If this were to be changed to a binary search, we'd still want\r\n      // to scan backwards a bit as an optimization.\r\n      while (j > 0) {\r\n        if (old_idx_seq(seq_ends[j-1]) < old_idx_seq(i))\r\n          break;\r\n        j--;\r\n      }\r\n\r\n      ptrs[i] = (j === 0 ? -1 : seq_ends[j-1]);\r\n      seq_ends[j] = i;\r\n      if (j+1 > max_seq_len)\r\n        max_seq_len = j+1;\r\n    }\r\n  }\r\n\r\n  // pull out the LCS/LIS into unmoved\r\n  var idx = (max_seq_len === 0 ? -1 : seq_ends[max_seq_len-1]);\r\n  while (idx >= 0) {\r\n    unmoved.push(idx);\r\n    idx = ptrs[idx];\r\n  }\r\n  // the unmoved item list is built backwards, so fix that\r\n  unmoved.reverse();\r\n\r\n  // the last group is always anchored by the end of the result list, which is\r\n  // an id of \"null\"\r\n  unmoved.push(new_results.length);\r\n\r\n  _.each(old_results, function (doc) {\r\n    if (!new_presence_of_id[doc._id])\r\n      observer.removed && observer.removed(doc._id);\r\n  });\r\n  // for each group of things in the new_results that is anchored by an unmoved\r\n  // element, iterate through the things before it.\r\n  var startOfGroup = 0;\r\n  _.each(unmoved, function (endOfGroup) {\r\n    var groupId = new_results[endOfGroup] ? new_results[endOfGroup]._id : null;\r\n    var oldDoc;\r\n    var newDoc;\r\n    var fields;\r\n    for (var i = startOfGroup; i < endOfGroup; i++) {\r\n      newDoc = new_results[i];\r\n      if (!_.has(old_index_of_id, newDoc._id)) {\r\n        fields = EJSON.clone(newDoc);\r\n        delete fields._id;\r\n        observer.addedBefore && observer.addedBefore(newDoc._id, fields, groupId);\r\n        observer.added && observer.added(newDoc._id, fields);\r\n      } else {\r\n        // moved\r\n        oldDoc = old_results[old_index_of_id[newDoc._id]];\r\n        fields = LocalCollection._makeChangedFields(newDoc, oldDoc);\r\n        if (!_.isEmpty(fields)) {\r\n          observer.changed && observer.changed(newDoc._id, fields);\r\n        }\r\n        observer.movedBefore && observer.movedBefore(newDoc._id, groupId);\r\n      }\r\n    }\r\n    if (groupId) {\r\n      newDoc = new_results[endOfGroup];\r\n      oldDoc = old_results[old_index_of_id[newDoc._id]];\r\n      fields = LocalCollection._makeChangedFields(newDoc, oldDoc);\r\n      if (!_.isEmpty(fields)) {\r\n        observer.changed && observer.changed(newDoc._id, fields);\r\n      }\r\n    }\r\n    startOfGroup = endOfGroup+1;\r\n  });\r\n\r\n\r\n};\r\n\r\n\r\n// General helper for diff-ing two objects.\r\n// callbacks is an object like so:\r\n// { leftOnly: function (key, leftValue) {...},\r\n//   rightOnly: function (key, rightValue) {...},\r\n//   both: function (key, leftValue, rightValue) {...},\r\n// }\r\nLocalCollection._diffObjects = function (left, right, callbacks) {\r\n  _.each(left, function (leftValue, key) {\r\n    if (_.has(right, key))\r\n      callbacks.both && callbacks.both(key, leftValue, right[key]);\r\n    else\r\n      callbacks.leftOnly && callbacks.leftOnly(key, leftValue);\r\n  });\r\n  if (callbacks.rightOnly) {\r\n    _.each(right, function(rightValue, key) {\r\n      if (!_.has(left, key))\r\n        callbacks.rightOnly(key, rightValue);\r\n    });\r\n  }\r\n};\r\n","LocalCollection._looksLikeObjectID = function (str) {\r\n  return str.length === 24 && str.match(/^[0-9a-f]*$/);\r\n};\r\n\r\nLocalCollection._ObjectID = function (hexString) {\r\n  //random-based impl of Mongo ObjectID\r\n  var self = this;\r\n  if (hexString) {\r\n    hexString = hexString.toLowerCase();\r\n    if (!LocalCollection._looksLikeObjectID(hexString)) {\r\n      throw new Error(\"Invalid hexadecimal string for creating an ObjectID\");\r\n    }\r\n    // meant to work with _.isEqual(), which relies on structural equality\r\n    self._str = hexString;\r\n  } else {\r\n    self._str = Random.hexString(24);\r\n  }\r\n};\r\n\r\nLocalCollection._ObjectID.prototype.toString = function () {\r\n  var self = this;\r\n  return \"ObjectID(\\\"\" + self._str + \"\\\")\";\r\n};\r\n\r\nLocalCollection._ObjectID.prototype.equals = function (other) {\r\n  var self = this;\r\n  return other instanceof LocalCollection._ObjectID &&\r\n    self.valueOf() === other.valueOf();\r\n};\r\n\r\nLocalCollection._ObjectID.prototype.clone = function () {\r\n  var self = this;\r\n  return new LocalCollection._ObjectID(self._str);\r\n};\r\n\r\nLocalCollection._ObjectID.prototype.typeName = function() {\r\n  return \"oid\";\r\n};\r\n\r\nLocalCollection._ObjectID.prototype.getTimestamp = function() {\r\n  var self = this;\r\n  return parseInt(self._str.substr(0, 8), 16);\r\n};\r\n\r\nLocalCollection._ObjectID.prototype.valueOf =\r\n    LocalCollection._ObjectID.prototype.toJSONValue =\r\n    LocalCollection._ObjectID.prototype.toHexString =\r\n    function () { return this._str; };\r\n\r\n// Is this selector just shorthand for lookup by _id?\r\nLocalCollection._selectorIsId = function (selector) {\r\n  return (typeof selector === \"string\") ||\r\n    (typeof selector === \"number\") ||\r\n    selector instanceof LocalCollection._ObjectID;\r\n};\r\n\r\n// Is the selector just lookup by _id (shorthand or not)?\r\nLocalCollection._selectorIsIdPerhapsAsObject = function (selector) {\r\n  return LocalCollection._selectorIsId(selector) ||\r\n    (selector && typeof selector === \"object\" &&\r\n     selector._id && LocalCollection._selectorIsId(selector._id) &&\r\n     _.size(selector) === 1);\r\n};\r\n\r\n// If this is a selector which explicitly constrains the match by ID to a finite\r\n// number of documents, returns a list of their IDs.  Otherwise returns\r\n// null. Note that the selector may have other restrictions so it may not even\r\n// match those document!  We care about $in and $and since those are generated\r\n// access-controlled update and remove.\r\nLocalCollection._idsMatchedBySelector = function (selector) {\r\n  // Is the selector just an ID?\r\n  if (LocalCollection._selectorIsId(selector))\r\n    return [selector];\r\n  if (!selector)\r\n    return null;\r\n\r\n  // Do we have an _id clause?\r\n  if (_.has(selector, '_id')) {\r\n    // Is the _id clause just an ID?\r\n    if (LocalCollection._selectorIsId(selector._id))\r\n      return [selector._id];\r\n    // Is the _id clause {_id: {$in: [\"x\", \"y\", \"z\"]}}?\r\n    if (selector._id && selector._id.$in\r\n        && _.isArray(selector._id.$in)\r\n        && !_.isEmpty(selector._id.$in)\r\n        && _.all(selector._id.$in, LocalCollection._selectorIsId)) {\r\n      return selector._id.$in;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // If this is a top-level $and, and any of the clauses constrain their\r\n  // documents, then the whole selector is constrained by any one clause's\r\n  // constraint. (Well, by their intersection, but that seems unlikely.)\r\n  if (selector.$and && _.isArray(selector.$and)) {\r\n    for (var i = 0; i < selector.$and.length; ++i) {\r\n      var subIds = LocalCollection._idsMatchedBySelector(selector.$and[i]);\r\n      if (subIds)\r\n        return subIds;\r\n    }\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nEJSON.addType(\"oid\",  function (str) {\r\n  return new LocalCollection._ObjectID(str);\r\n});\r\n"]}