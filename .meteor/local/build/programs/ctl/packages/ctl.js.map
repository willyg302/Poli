{"version":3,"file":"\\packages\\ctl.js","sources":["ctl/ctl.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,mB;AACA,e;AACA,yB;AACA,oC;AACA,kB;AACA,oC;AACA,qB;;AAEA,oC;AACA,G;AACA,G;;AAEA,0C;AACA,6B;AACA,gC;AACA,4E;AACA,sC;AACA,6D;AACA,2C;AACA,Q;AACA,oB;AACA,K;AACA,gB;AACA,E;;;AAGA,mB;AACA,gB;AACA,yB;AACA,yB;AACA,2C;AACA,2B;AACA,sB;AACA,O;AACA,wE;AACA,Y;AACA,E;AACA,sB;AACA,K;;AAEA,sC;AACA,iE;AACA,2B;AACA,qC;AACA,oE;;AAEA,sB;AACA,8B;AACA,4B;AACA,+C;AACA,O;;;AAGA,uB;AACA,2E;AACA,8B;AACA,c;AACA,qE;AACA,qD;AACA,4G;AACA,U;AACA,gB;AACA,mB;AACA,4B;AACA,gC;AACA,yE;AACA,gF;AACA,8E;AACA,wB;AACA,W;AACA,U;AACA,wB;AACA,U;AACA,uC;AACA,Y;AACA,6C;AACA,K;AACA,G;AACA,G;;AAEA,mB;AACA,e;AACA,wB;AACA,yB;AACA,2C;AACA,2B;AACA,qB;AACA,O;AACA,oE;AACA,sB;AACA,E;AACA,sB;AACA,K;;AAEA,6E;AACA,sB;AACA,gC;AACA,iE;AACA,iC;AACA,8B;AACA,oC;AACA,e;AACA,wB;AACA,mB;AACA,e;AACA,qC;AACA,O;AACA,mC;AACA,G;AACA,G;;;AAGA,mB;AACA,gB;AACA,qB;AACA,yB;AACA,wE;AACA,2B;AACA,wC;AACA,O;AACA,8E;AACA,kB;AACA,E;AACA,sB;AACA,K;;AAEA,+C;AACA,wC;AACA,e;AACA,uE;AACA,wB;AACA,O;AACA,oD;AACA,O;;AAEA,iC;AACA,kC;AACA,4D;AACA,mC;AACA,kB;AACA,6E;AACA,c;AACA,0B;AACA,uC;AACA,S;AACA,S;AACA,+C;AACA,uB;AACA,e;AACA,iE;AACA,oC;AACA,yB;AACA,8E;AACA,+B;AACA,Y;AACA,S;AACA,O;AACA,G;AACA,G;;AAEA,wB;AACA,wB;AACA,E","sourcesContent":["Ctl.Commands.push({\r\n  name: \"help\",\r\n  func: function (argv) {\r\n    if (!argv._.length || argv.help)\r\n      Ctl.usage();\r\n    var cmd = argv._.splice(0,1)[0];\r\n    argv.help = true;\r\n\r\n    Ctl.findCommand(cmd).func(argv);\r\n  }\r\n});\r\n\r\nvar mergeObjects = function (obj1, obj2) {\r\n  var result = _.clone(obj1);\r\n  _.each(obj2, function (v, k) {\r\n    // If both objects have an object at this key, then merge those objects.\r\n    // Otherwise, choose obj2's value.\r\n    if ((v instanceof Object) && (obj1[k] instanceof Object))\r\n      result[k] = mergeObjects(v, obj1[k]);\r\n    else\r\n      result[k] = v;\r\n  });\r\n  return result;\r\n};\r\n\r\n\r\nCtl.Commands.push({\r\n  name: \"start\",\r\n  help: \"Start this app\",\r\n  func: function (argv) {\r\n    if (argv.help || argv._.length !== 0) {\r\n      process.stderr.write(\r\n\"Usage: ctl start\\n\" +\r\n \"\\n\" +\r\n\"Starts the app. For now, this just means that it runs the 'server'\\n\" +\r\n\"program.\\n\"\r\n);\r\n      process.exit(1);\r\n    }\r\n\r\n    var numServers = Ctl.getJobsByApp(\r\n      Ctl.myAppName(), {program: 'server', done: false}).count();\r\n    if (numServers === 0) {\r\n      var appConfig = Ctl.prettyCall(\r\n        Ctl.findGalaxy(), 'getAppConfiguration', [Ctl.myAppName()]);\r\n\r\n      var proxyConfig;\r\n      var bindPathPrefix = \"\";\r\n      if (appConfig.admin) {\r\n        bindPathPrefix = \"/\" + Ctl.myAppName();\r\n      }\r\n\r\n\r\n      // XXX args? env?\r\n      Ctl.prettyCall(Ctl.findGalaxy(), 'run', [Ctl.myAppName(), 'server', {\r\n        exitPolicy: 'restart',\r\n        env: {\r\n          ROOT_URL: \"https://\" + appConfig.sitename + bindPathPrefix,\r\n          METEOR_SETTINGS: appConfig.METEOR_SETTINGS,\r\n          ADMIN_APP: appConfig.admin //TODO: When apps have admin & non-admin sides, set this based on that.\r\n        },\r\n        ports: {\r\n          \"main\": {\r\n            bindEnv: \"PORT\",\r\n            routeEnv: \"ROUTE\"//,\r\n            //bindIpEnv: \"BIND_IP\" // Later, we can teach Satellite to do\r\n            //something like recommend the process bind to a particular IP here.\r\n            //For now, we don't have a way of setting this, so Satellite binds\r\n            //to 0.0.0.0\r\n          }\r\n        },\r\n        tags: [\"runner\"]\r\n      }]);\r\n      console.log(\"Started a server.\");\r\n    } else {\r\n      console.log(\"Server already running.\");\r\n    }\r\n  }\r\n});\r\n\r\nCtl.Commands.push({\r\n  name: \"stop\",\r\n  help: \"Stop this app\",\r\n  func: function (argv) {\r\n    if (argv.help || argv._.length !== 0) {\r\n      process.stderr.write(\r\n\"Usage: ctl stop\\n\" +\r\n \"\\n\" +\r\n\"Stops the app. For now, this just means that it kills all jobs\\n\" +\r\n\"other than itself.\\n\"\r\n);\r\n      process.exit(1);\r\n    }\r\n\r\n    // Get all jobs (other than this job: don't commit suicide!) that are not\r\n    // already killed.\r\n    var jobs = Ctl.getJobsByApp(\r\n      Ctl.myAppName(), {_id: {$ne: Ctl.myJobId()}, done: false});\r\n    jobs.forEach(function (job) {\r\n      // Don't commit suicide.\r\n      if (job._id === Ctl.myJobId())\r\n        return;\r\n      // It's dead, Jim.\r\n      if (job.done)\r\n        return;\r\n      Ctl.kill(job.program, job._id);\r\n    });\r\n    console.log(\"Server stopped.\");\r\n  }\r\n});\r\n\r\n\r\nCtl.Commands.push({\r\n  name: \"scale\",\r\n  help: \"Scale jobs\",\r\n  func: function (argv) {\r\n    if (argv.help || argv._.length === 0 || _.contains(argv._, 'ctl')) {\r\n      process.stderr.write(\r\n\"Usage: ctl scale program1=n [...] \\n\" +\r\n \"\\n\" +\r\n\"Scales some programs. Runs or kills jobs until there are n non-done jobs\\n\" +\r\n\"in that state.\\n\"\r\n);\r\n      process.exit(1);\r\n    }\r\n\r\n    var scales = _.map(argv._, function (arg) {\r\n      var m = arg.match(/^(.+)=(\\d+)$/);\r\n      if (!m) {\r\n        console.log(\"Bad scaling argument; should be program=number.\");\r\n        process.exit(1);\r\n      }\r\n      return {program: m[1], scale: parseInt(m[2])};\r\n    });\r\n\r\n    _.each(scales, function (s) {\r\n      var jobs = Ctl.getJobsByApp(\r\n        Ctl.myAppName(), {program: s.program, done: false});\r\n      jobs.forEach(function (job) {\r\n        --s.scale;\r\n        // Is this an extraneous job, more than the number that we need? Kill\r\n        // it!\r\n        if (s.scale < 0) {\r\n          Ctl.kill(s.program, job._id);\r\n        }\r\n      });\r\n      // Now start any jobs that are necessary.\r\n      if (s.scale <= 0)\r\n        return;\r\n      console.log(\"Starting %d jobs for %s\", s.scale, s.program);\r\n      _.times(s.scale, function () {\r\n        // XXX args? env?\r\n        Ctl.prettyCall(Ctl.findGalaxy(), 'run', [Ctl.myAppName(), s.program, {\r\n          exitPolicy: 'restart'\r\n        }]);\r\n      });\r\n    });\r\n  }\r\n});\r\n\r\nmain = function (argv) {\r\n  return Ctl.main(argv);\r\n};\r\n"]}